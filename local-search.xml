<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PTA | Select Int</title>
    <link href="/2023/10/25/PTA-Select-Int/"/>
    <url>/2023/10/25/PTA-Select-Int/</url>
    
    <content type="html"><![CDATA[<p>输入一个字符串，内有数字和非数字字符，例如：a123x67 222y35i088 09x8 c，请编写程序，将其中连续的数字作为一个整数，依次存放到一维数组a中。例如前面的字符串，应将123存放到a[0]中，67存放到a[1]中……，最后输出整数的个数以及各个整数的值。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>长度不超过100的一个字符串，其中包含整数字符和非整数字符。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>第一行输出整数的个数</p><p>第2行输出各个整数的值，以空格间隔，最后一个整数后面没有空格。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">a123x67 222y35i088 09x8 c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7123 67 222 35 88 9 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//数字的个数</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//游标：用于字符串中控制位数</span>    <span class="token keyword">char</span> nums<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//用数组模拟高位数字</span>    <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>  <span class="token comment">//储存临时字符</span>    <span class="token keyword">char</span> tmps<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//储存临时字符串</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//标记数字结束 1表示前面的字符是数字</span>    tmp<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">>=</span><span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmps<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmps<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmps<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        tmp<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//收尾，保存最后的数字</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmps<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmps<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理多余的0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span> cur<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//输出结果</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %s"</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Tian Ji -- The Horse Racing</title>
    <link href="/2023/10/22/ACM-Tian-Ji-The-Horse-Racing/"/>
    <url>/2023/10/22/ACM-Tian-Ji-The-Horse-Racing/</url>
    
    <content type="html"><![CDATA[<p>Here is a famous story in Chinese history.</p><p>“That was about 2300 years ago. General Tian Ji was a high official in the country Qi. He likes to play horse racing with the king and others.”</p><p>“Both of Tian and the king have three horses in different classes, namely, regular, plus, and super. The rule is to have three rounds in a match; each of the horses must be used in one round. The winner of a single round takes two hundred silver dollars from the loser.”</p><p>“Being the most powerful man in the country, the king has so nice horses that in each class his horse is better than Tian’s. As a result, each time the king takes six hundred silver dollars from Tian.”</p><p>“Tian Ji was not happy about that, until he met Sun Bin, one of the most famous generals in Chinese history. Using a little trick due to Sun, Tian Ji brought home two hundred silver dollars and such a grace in the next match.”</p><p>“It was a rather simple trick. Using his regular class horse race against the super class from the king, they will certainly lose that round. But then his plus beat the king’s regular, and his super beat the king’s plus. What a simple trick. And how do you think of Tian Ji, the high ranked official in China?”</p><p>Were Tian Ji lives in nowadays, he will certainly laugh at himself. Even more, were he sitting in the ACM contest right now, he may discover that the horse racing problem can be simply viewed as finding the maximum matching in a bipartite graph. Draw Tian’s horses on one side, and the king’s horses on the other. Whenever one of Tian’s horses can beat one from the king, we draw an edge between them, meaning we wish to establish this pair. Then, the problem of winning as many rounds as possible is just to find the maximum matching in this graph. If there are ties, the problem becomes more complicated, he needs to assign weights 0, 1, or -1 to all the possible edges, and find a maximum weighted perfect matching…</p><p>However, the horse racing problem is a very special case of bipartite matching. The graph is decided by the speed of the horses — a vertex of higher speed always beat a vertex of lower speed. In this case, the weighted bipartite matching algorithm is a too advanced tool to deal with the problem.</p><p>In this problem, you are asked to write a program to solve this special case of matching problem.</p><p>这里有一个中国历史上著名的故事。</p><p>“那是大约2300年前的事了，田忌将军是齐国的一位大官，他喜欢和国王等人赛马。”</p><p>“田和王各有三匹不同级别的马，分别是普通级、高级级、超级级。规则是一场比赛进行三轮，每匹马必须用完一轮。单场获胜者 败者得两百银元。”</p><p>“国王是全国最有权势的人，他的马非常好，每一级他的马都比田的好。因此，国王每次从田那里拿走六百银子。”</p><p>“田忌对此并不高兴，直到他遇到了中国历史上最著名的将军之一孙膑。田忌利用了孙膑的一个小伎俩，在接下来的比赛中带回了两百银元，并获得了如此大的恩惠。 ”</p><p>“这是一个相当简单的技巧，用他的普通级赛马与国王的超级赛马，他们肯定会输掉这一轮。但随后他的+击败了国王的普通级，他的超级击败了国王的+。多么简单的技巧 ……那么，您对田忌这个中国的高官有什么看法呢？</p><p>如果田忌生活在现在，他一定会嘲笑自己。 更重要的是，如果他现在参加ACM比赛，他可能会发现赛马问题可以简单地看作是在二部图中寻找最大匹配。 一侧画田的马，另一侧画国王的马。 每当田的一匹马能够击败国王的一匹马时，我们就在它们之间划一条边，这意味着我们希望建立这一对。 那么，赢得尽可能多的回合的问题就是找到这个图中的最大匹配。 如果存在平局，问题就变得更加复杂，他需要给所有可能的边分配权重0、1或-1，并找到一个最大加权完美匹配……</p><p>然而，赛马问题是二分匹配的一个非常特殊的例子。 该图由马的速度决定——速度较高的顶点总是击败速度较低的顶点。 在这种情况下，加权二分匹配算法对于处理该问题来说是一个过于先进的工具。</p><p>在此问题中，要求您编写一个程序来解决匹配问题的这种特殊情况。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>The input consists of up to 50 test cases. Each case starts with a positive integer n (n &lt;&#x3D; 1000) on the first line, which is the number of horses on each side. The next n integers on the second line are the speeds of Tian’s horses. Then the next n integers on the third line are the speeds of the king’s horses. The input ends with a line that has a single 0 after the last test case.<br>输入最多包含 50 个测试用例。 每个案例的第一行都以正整数 n (n &lt;&#x3D; 1000) 开头，它是每边的马匹数量。 第二行接下来的 n 个整数是田的马的速度。 那么第三行接下来的n个整数就是国王马匹的速度。 输入以最后一个测试用例后面有一个 0 的行结束。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>For each input case, output a line containing a single number, which is the maximum money Tian Ji will get, in silver dollars.<br>对于每个输入情况，输出一行包含一个数字，这是田忌将获得的最大银元金额。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre><code class="3">92 83 7195 87 74220 2020 20220 1922 180```# 输出样例:```20000```</code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Summer Without  AC</title>
    <link href="/2023/10/22/ACM-Summer-Without-AC/"/>
    <url>/2023/10/22/ACM-Summer-Without-AC/</url>
    
    <content type="html"><![CDATA[<p>“今年暑假不AC？”<br>“是的。”<br>“那你干什么呢？”<br>“看世界杯呀，笨蛋！”<br>“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br>作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;&#x3D;100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;&#x3D;i&lt;&#x3D;n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n&#x3D;0表示输入结束，不做处理。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">121 33 40 73 815 1915 2010 158 186 125 104 142 90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出样例:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> times<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>times<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> schedule<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//计数有几个电视节目</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//初始化24小时的列表</span>            schedule<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | Joseph Ring</title>
    <link href="/2023/10/20/PTA-Joseph-Ring/"/>
    <url>/2023/10/20/PTA-Joseph-Ring/</url>
    
    <content type="html"><![CDATA[<p>有N个人围成一圈（编号为1～N），从第1号开始进行1、2、3报数，凡报3者就退出，下一个人又从1开始报数……直到最后只剩下一个人时为止。请问此人原来的编号是多少?</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>在一行中给出1个不超过100的正整数N。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>在一行中输出最后剩下那个人的编号。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span> cur<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span> pre<span class="token punctuation">;</span>    head<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur<span class="token operator">-></span>num<span class="token operator">=</span>i<span class="token punctuation">;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pre<span class="token operator">-></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>    cur<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token operator">!=</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//printf("%d",cur->num);</span>            pre<span class="token operator">-></span>next<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cur<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | Stolen Shoes</title>
    <link href="/2023/10/20/PTA-Stolen-Shoes/"/>
    <url>/2023/10/20/PTA-Stolen-Shoes/</url>
    
    <content type="html"><![CDATA[<p>恒太足球俱乐部有n名球员，每名球员编号1∼n。今天早上，更衣室管理员发现一部分球员柜的球鞋被盗。这导致今天的比赛有一部分球员因为没有球鞋而无法出场，幸运的是，有一部分球员还有备用球鞋，但是拥有备用球鞋的球员只会借给和自己号码相邻的球员，比如：5号队员只会借给4号和6号。假如5号球员的球鞋也被盗了，他拥有的备用球鞋则不会借给相邻的队员。</p><p>现在，给出上述信息，请你求出，今天的比赛，不能上场参赛的最小人数。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>输入的第一行给出三个整数n——表示总人数；m——表示球鞋坏掉的人数；x表示拥有备用球鞋的人数。</p><p>输入的第二行给出m个整数a[i]——表示球鞋坏掉的人的编号。</p><p>输入的第三行给出x个整数a[i]——表示有备用球鞋的人的编号。</p><p>2≤n≤10</p><p>2≤m≤n</p><p>2≤x≤n</p><p>2≤a[i]≤n</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>输出一个整数——表示不能上场参赛的最小人数。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 2 32 41 3 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment">//总人数</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>  <span class="token comment">//被盗人数</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>  <span class="token comment">//备用人数</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nn<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mm<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>mm<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>xx<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//初始化每个人都有鞋子</span>        nn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//有人鞋子被偷了</span>        nn<span class="token punctuation">[</span>mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | Calendar</title>
    <link href="/2023/10/19/PTA-Calendar/"/>
    <url>/2023/10/19/PTA-Calendar/</url>
    
    <content type="html"><![CDATA[<p>日历是用于表述时间的系统，从小时到分钟，从月到日，最后从年份到世纪。术语小时、日、月、年、世纪都是日历系统表述时间的单位。<br>按照目前国内使用的阳历，闰年被定义为能被4整除的年份，但是能被100整除而不能被400整除的年是例外，它们不是闰年。例如：1700, 1800, 1900 和 2100 不是闰年，而 1600, 2000 和 2400是闰年。 给定公元2000年1月1日后的天数，请您计算这一天是哪年哪月哪日星期几。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>输入包含若干行，每行包含一个正整数，表示2000年1月1日后的天数。输入最后一行是−1, 程序不必处理。可以假设输出的年份不会超过9999。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>对每个测试用例，输出一行，该行给出对应的日期和星期几。格式为“YYYY-MM-DD DayOfWeek”, 其中 “DayOfWeek”必须是下面中的一个：“Sunday”，“Monday”，“Tuesday”，“Wednesday”，“Thursday”，“Friday”或“Saturday”。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1730174017501751-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2004-09-26 Sunday2004-10-06 Wednesday2004-10-16 Saturday2004-10-17 Sunday<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">isleapyear</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token keyword">int</span> days1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> days2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> day<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        N<span class="token operator">=</span>n<span class="token punctuation">;</span>        y<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span>        m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//printf("*%d\n",isleapyear(y)?days2[m]:days1[m]);</span>            <span class="token comment">//printf("n=%d\n",n);</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token function">isleapyear</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span>days2<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">:</span>days1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                d<span class="token operator">+=</span>n<span class="token punctuation">;</span>                n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                n<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token function">isleapyear</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span>days2<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">:</span>days1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                m<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    m<span class="token operator">-=</span><span class="token number">12</span><span class="token punctuation">;</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%02d-%02d %s\n"</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">,</span>day<span class="token punctuation">[</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Doing Homework again</title>
    <link href="/2023/10/17/ACM-Doing-Homework-again/"/>
    <url>/2023/10/17/ACM-Doing-Homework-again/</url>
    
    <content type="html"><![CDATA[<p>Ignatius has just come back school from the 30th ACM&#x2F;ICPC. Now he has a lot of homework to do. Every teacher gives him a deadline of handing in the homework. If Ignatius hands in the homework after the deadline, the teacher will reduce his score of the final test. And now we assume that doing everyone homework always takes one day. So Ignatius wants you to help him to arrange the order of doing homework to minimize the reduced score.<br>Ignatius 刚刚从第 30 届 ACM&#x2F;ICPC 回到学校。 现在他有很多作业要做。 每个老师都给他规定了交作业的截止日期。 如果 Ignatius 在截止日期后交作业，老师将降低他期末考试的分数。 现在我们假设做每个人的作业总是需要一天的时间。 所以 Ignatius 希望你帮他安排一下做作业的顺序，尽量减少分数的降低。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>The input contains several test cases. The first line of the input is a single integer T that is the number of test cases. T test cases follow.<br>Each test case start with a positive integer N(1&lt;&#x3D;N&lt;&#x3D;1000) which indicate the number of homework.. Then 2 lines follow. The first line contains N integers that indicate the deadlines of the subjects, and the next line contains N integers that indicate the reduced scores.<br>输入包含多个测试用例。 输入的第一行是一个整数 T，它是测试用例的数量。 T 测试用例如下。<br>每个测试用例都以正整数 N(1&lt;&#x3D;N&lt;&#x3D;1000) 开头，表示作业的数量。然后是 2 行。 第一行包含 N 个整数，表示科目的截止日期，下一行包含 N 个整数，表示减少的分数。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>For each test case, you should output the smallest total reduced score, one line per test case.<br>对于每个测试用例，您应该输出最小的总降低分数，每个测试用例一行。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">333 3 310 5 131 3 16 2 371 4 6 4 2 4 33 2 1 7 6 5 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">035<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><p>因为要使扣的分数最小，所以需要使延时提交的作业数最少。所以要优先完成时间早的作业。所以我先进行一个排序算法，将所有的作业按照deadline从小到大排序。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">homework</span> <span class="token operator">*</span>homework<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">></span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">=</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当然，完全按照deadline也是错误的，例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 4 6 4 2 4 33 2 1 7 6 5 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>完成排序后变成了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 2 3 4 4 4 63 6 4 7 5 2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>此时严格按照deadline排序输出结果是错误的。我们发现如果我们第一天不完成第一个作业，扣的分数反而会更小。所以前面的想法其实不完全正确。</p><p>我们需要的是扣的分数最小，所以我们可以优先考虑分数。</p><p>那我们先对分数进行排序，如下所示：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">homework</span> <span class="token operator">*</span>homework<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">==</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>进行如上排序后我们会获得下面的结果：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>然后我们根据score的权重，把作业“放入”我们需要完成的日子。</p><p>当遇到分数相同的，根据日期，我在前面排列时把日期大的放在了待处理队列中相同分数的靠前位置，所以会优先处理。如果在处理时发现该日期已经被占用，那么顺应往前面未被占用的日期处移动，这样能保证该作业能一定能完成。</p><p>下面是分步结果：（前面的一列0是用于占位，可以忽略）</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后剩余的未完成的作业加起来的分数就是最小的会被扣掉的分数。</p><h1 id="源码实现："><a href="#源码实现：" class="headerlink" title="源码实现："></a>源码实现：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">homework</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> deadline<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">int</span> availible<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">homework</span> <span class="token operator">*</span>homework<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">==</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> N<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">homework</span> homework<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_date<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> reduced_score<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token operator">></span>max_date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                max_date<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>  <span class="token comment">//找最大的日期</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>            reduced_score<span class="token operator">+=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>homework<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">homework</span> schedule<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>max_date<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            schedule<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//1表示占用</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>                schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                reduced_score<span class="token operator">-=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>                        schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                        reduced_score<span class="token operator">-=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                        schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>reduced_score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><!-- ```c#include<stdio.h>struct homework{    int deadline;    int score;    int availible;};void swap(int *a,int *b){    int t=*a;    *a=*b;    *b=t;}void sort(struct homework *homework,int N){    for(int i=0;i<N;i++){        for(int j=0;j<N-i-1;j++){            if((homework+j)->score<(homework+j+1)->score){                swap(&(homework+j)->score,&(homework+j+1)->score);                swap(&(homework+j)->deadline,&(homework+j+1)->deadline);            }else if((homework+j)->deadline<(homework+j+1)->deadline && (homework+j)->score==(homework+j+1)->score){                swap(&(homework+j)->score,&(homework+j+1)->score);                swap(&(homework+j)->deadline,&(homework+j+1)->deadline);            }        }    }}int main(){    int T;    scanf("%d",&T);    while(T--){        int N;        scanf("%d",&N);        struct homework homework[1001];        int max_date=0;        int reduced_score=0;        for(int i=0;i<N;i++){            scanf("%d",&homework[i].deadline);            if(homework[i].deadline>max_date){                max_date=homework[i].deadline;  //找最大的日期            }        }        for(int i=0;i<N;i++){            scanf("%d",&homework[i].score);            reduced_score+=homework[i].score;        }        //printf("%d\n",reduced_score); //debug        sort(homework,N);                // debug        // for(int i=0;i<N;i++){        //     printf(" %d ",homework[i].deadline);        // }        // printf("\n");        // for(int i=0;i<N;i++){        //     printf(" %d ",homework[i].score);        // }        // printf("\n");        struct homework schedule[1001];        for(int i=0;i<=max_date;i++){            schedule[i].availible=0; //1表示占用        }        //int not_finished=max_date;        for(int i=0;i<N;i++){            if(schedule[homework[i].deadline].availible==0){                schedule[homework[i].deadline].deadline=homework[i].deadline;                schedule[homework[i].deadline].score=homework[i].score;                reduced_score-=homework[i].score;                schedule[homework[i].deadline].availible=1;            }else{                for(int j=homework[i].deadline;j>=1;j--){                    if(schedule[j].availible==0){                        schedule[j].deadline=homework[i].deadline;                        schedule[j].score=homework[i].score;                        reduced_score-=homework[i].score;                        schedule[j].availible=1;                        break;                    }                }            }            // printf("*%d*%d*\n",i,reduced_score);            // for(int i=0;i<max_date;i++){            //     printf("%d ",schedule[i].deadline);            // }            // printf("\n");            // for(int i=0;i<max_date;i++){            //     printf("%d ",schedule[i].score);            // }            // printf("\n");            // for(int i=0;i<max_date;i++){            //     printf("%d ",schedule[i].availible);            // }            // printf("\n");        }        printf("%d\n",reduced_score);    }    return 0;}// 1 4 6 4 2 4 3// 3 2 1 7 6 5 4// 1 2 3 4 4 4 6// 3 6 4 7 5 2 1// 4 2 4 3 1 4 6// 7 6 5 4 3 2 1// 2 3 4 4 6 1 4// 6 4 7 5 1 3 2``` -->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | FatMouse&#39; Trade</title>
    <link href="/2023/10/17/ACM-FatMouse-Trade/"/>
    <url>/2023/10/17/ACM-FatMouse-Trade/</url>
    
    <content type="html"><![CDATA[<p>FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean. The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if he pays F[i]* a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1’s. All integers are not greater than 1000.</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 37 24 35 220 325 1824 1515 10-1 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">13.33331.500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="错误代码示例："><a href="#错误代码示例：" class="headerlink" title="错误代码示例："></a>错误代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> J<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//回报</span>    <span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//付出</span>    <span class="token keyword">double</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> N<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>J<span class="token operator">+</span>i<span class="token punctuation">,</span>F<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>J<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> max<span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token punctuation">;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//找到回报率最大的位置</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    max<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cur<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            s<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>M<span class="token operator">>=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                M<span class="token operator">-=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>M<span class="token operator">/</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                M<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//printf("*%d*%lf*\n",cur,ans);  DEBUG</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="正确代码示例："><a href="#正确代码示例：" class="headerlink" title="正确代码示例："></a>正确代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> J<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//回报</span>    <span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//付出</span>    <span class="token keyword">double</span> s<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> N<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>J<span class="token operator">+</span>i<span class="token punctuation">,</span>F<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>J<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> max<span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token punctuation">;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> items<span class="token operator">=</span>N<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> N<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//找到回报率最大的位置</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    max<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cur<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            s<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>M<span class="token operator">>=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                M<span class="token operator">-=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                items<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>M<span class="token operator">/</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                M<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//printf("*%d*%lf*\n",cur,ans);  DEBUG</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/17/hello-world/"/>
    <url>/2023/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
