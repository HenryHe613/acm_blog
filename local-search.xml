<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ACM | ACM Test 231228</title>
    <link href="/2023/12/28/ACM-ACM-Test-231228/"/>
    <url>/2023/12/28/ACM-ACM-Test-231228/</url>
    
    <content type="html"><![CDATA[<h1 id="a-点赞">A 点赞</h1><p>微博上有个“点赞”功能，你可以为你喜欢的博文点个赞表示支持。每篇博文都有一些刻画其特性的标签，而你点赞的博文的类型，也间接刻画了你的特性。本题就要求你写个程序，通过统计一个人点赞的纪录，分析这个人的特性。</p><h2 id="输入格式">输入格式：</h2><p>输入在第一行给出一个正整数 <spanclass="math inline">\(N（≤1000）\)</span>，是该用户点赞的博文数量。随后N行，每行给出一篇被其点赞的博文的特性描述，格式为<span class="math inline">\(“K F_1,⋯F_K”\)</span> ，其中 <spanclass="math inline">\(1≤K≤10\)</span> ，<spanclass="math inline">\(F_i（i=1,⋯,K）\)</span>是特性标签的编号，我们将所有特性标签从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(1000\)</span> 编号。数字间以空格分隔。</p><h2 id="输出格式">输出格式：</h2><p>统计所有被点赞的博文中最常出现的那个特性标签，在一行中输出它的编号和出现次数，数字间隔1个空格。如果有并列，则输出编号最大的那个。</p><h2 id="输入样例">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">43 889 233 25 100 3 233 2 734 3 73 889 22 233 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">233 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>count<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>            count<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1010</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>count<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>max<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>count<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="b-最佳情侣身高差">B 最佳情侣身高差</h1><p>专家通过多组情侣研究数据发现，最佳的情侣身高差遵循着一个公式：（女方的身高）×1.09=（男方的身高）。如果符合，你俩的身高差不管是牵手、拥抱、接吻，都是最和谐的差度。</p><p>下面就请你写个程序，为任意一位用户计算他/她的情侣的最佳身高。</p><h2 id="输入格式-1">输入格式：</h2><p>输入第一行给出正整数 <span class="math inline">\(N（≤10）\)</span>，为前来查询的用户数。随后N行，每行按照“性别身高”的格式给出前来查询的用户的性别和身高，其中“性别”为“F”表示女性、“M”表示男性；“身高”为区间[1.0, 3.0] 之间的实数。</p><h2 id="输出格式-1">输出格式：</h2><p>对每一个查询，在一行中为该用户计算出其情侣的最佳身高，保留小数点后2位。</p><h2 id="输入样例-1">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2M 1.75F 1.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1.611.96<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="code-1">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> h<span class="token punctuation">;</span>        <span class="token keyword">char</span> gender<span class="token punctuation">;</span>        cin<span class="token operator">>></span>gender<span class="token operator">>></span>h<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>gender<span class="token operator">==</span><span class="token char">'M'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>h<span class="token operator">/</span><span class="token number">1.09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>gender<span class="token operator">==</span><span class="token char">'F'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>h<span class="token operator">*</span><span class="token number">1.09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="c-人以群分">C 人以群分</h1><p>社交网络中我们给每个人定义了一个“活跃度”，现希望根据这个指标把人群分为两大类，即<code>外向型（outgoing，即活跃度高的）</code>和<code>内向型（introverted，即活跃度低的）</code>。要求两类人群的规模尽可能接近，而他们的总活跃度差距尽可能拉开。</p><h2 id="输入格式-2">输入格式：</h2><p>输入第一行给出一个正整数 <spanclass="math inline">\(N（2≤N≤10^5）\)</span>。随后一行给出 <spanclass="math inline">\(N\)</span>个正整数，分别是每个人的活跃度，其间以空格分隔。题目保证这些数字以及它们的和都不会超过<span class="math inline">\(2^{31}\)</span> 。</p><h2 id="输出格式-2">输出格式：</h2><p>按下列格式输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Outgoing #: N1Introverted #: N2Diff &#x3D; N3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>其中<code>N1</code>是外向型人的个数；<code>N2</code>是内向型人的个数；<code>N3</code>是两群人总活跃度之差的绝对值。</p><h2 id="输入样例1">输入样例1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1023 8 10 99 46 2333 46 1 666 555<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例1">输出样例1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Outgoing #: 5Introverted #: 5Diff &#x3D; 3611<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例2">输入样例2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">13110 79 218 69 3721 100 29 135 2 6 13 5188 85<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例2">输出样例2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Outgoing #: 7Introverted #: 6Diff &#x3D; 9359<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-2">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ee<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ii<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>diff<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ii<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ee<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        diff<span class="token operator">=</span>ee<span class="token operator">-</span>ii<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Outgoing #: %d\nIntroverted #: %d\nDiff = %d\n"</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>diff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ii<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ee<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>ee<span class="token operator">-</span>ii<span class="token operator">+</span>a<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token function">abs</span><span class="token punctuation">(</span>ee<span class="token operator">-</span>ii<span class="token operator">-</span>a<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ee<span class="token operator">+=</span>a<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Outgoing #: %d\nIntroverted #: %d\nDiff = %d\n"</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>ee<span class="token operator">-</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            ii<span class="token operator">+=</span>a<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Outgoing #: %d\nIntroverted #: %d\nDiff = %d\n"</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ee<span class="token operator">-</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="d-悄悄关注">D 悄悄关注</h1><p>新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。</p><h2 id="输入格式-3">输入格式：</h2><p>输入首先在第一行给出某用户的关注列表，格式如下：</p><p><code>人数N 用户1 用户2 …… 用户N</code></p><p>其中N是不超过 <span class="math inline">\(5000\)</span>的正整数，每个用户 <span class="math inline">\(i（i=1, ..., N）\)</span>是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。</p><p>之后给出该用户点赞的信息：首先给出一个不超过10000的正整数M，随后M行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。</p><h2 id="输出格式-3">输出格式：</h2><p>我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出<code>“Bing Mei You”</code>。</p><h2 id="输入样例1-1">输入样例1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao8Magi 50Pota 30LLao 3Ammy 48Dave 15GAO3 31Zoro 1Cath 60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例1-1">输出样例1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">AmmyCathPota<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例2-1">输入样例2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota7Magi 50Pota 30LLao 48Ammy 3Dave 15GAO3 31Zoro 29<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例2-1">输出样例2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Bing Mei You<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-3">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>string<span class="token operator">*</span> array<span class="token punctuation">,</span> string target<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    string follow<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>follow<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> like<span class="token punctuation">;</span>    string t1<span class="token punctuation">;</span>    <span class="token keyword">int</span> t2<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>t1<span class="token operator">>></span>t2<span class="token punctuation">;</span>        like<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>t2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> ave<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>sum<span class="token operator">/</span>m<span class="token punctuation">;</span>    <span class="token comment">// cout&lt;&lt;ave&lt;&lt;endl;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>like<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">></span>ave <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>follow<span class="token punctuation">,</span>like<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>like<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Bing Mei You"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="e-功夫传人">E 功夫传人</h1><p>一门武功能否传承久远并被发扬光大，是要看缘分的。一般来说，师傅传授给徒弟的武功总要打个折扣，于是越往后传，弟子们的功夫就越弱……直到某一支的某一代突然出现一个天分特别高的弟子（或者是吃到了灵丹、挖到了特别的秘笈），会将功夫的威力一下子放大N倍—— 我们称这种弟子为“得道者”。</p><p>这里我们来考察某一位祖师爷门下的徒子徒孙家谱：假设家谱中的每个人只有<spanclass="math inline">\(1\)</span>位师傅（除了祖师爷没有师傅）；每位师傅可以带很多徒弟；并且假设辈分严格有序，即祖师爷这门武功的每个第<spanclass="math inline">\(i\)</span>代传人只能在第<spanclass="math inline">\(i-1\)</span>代传人中拜1个师傅。我们假设已知祖师爷的功力值为<span class="math inline">\(Z\)</span>，每向下传承一代，就会减弱<spanclass="math inline">\(r%\)</span>，除非某一代弟子得道。现给出师门谱系关系，要求你算出所有得道者的功力总值。</p><h2 id="输入格式-4">输入格式：</h2><p>输入在第一行给出3个正整数，分别是：<spanclass="math inline">\(N（≤10^5）\)</span>——整个师门的总人数（于是每个人从0到N−1编号，祖师爷的编号为0）；<spanclass="math inline">\(Z\)</span>——祖师爷的功力值（不一定是整数，但起码是正数）；<spanclass="math inline">\(r\)</span>——每传一代功夫所打的折扣百分比值（不超过<spanclass="math inline">\(100\)</span>的正数）。接下来有<spanclass="math inline">\(N\)</span>行，第<spanclass="math inline">\(i\)</span>行<spanclass="math inline">\(（i=0,⋯,N−1）\)</span>描述编号为i的人所传的徒弟，格式为：<spanclass="math inline">\(K_i ID[1] ID[2] ⋯ ID[K_i]\)</span>其中<spanclass="math inline">\(K_i\)</span>是徒弟的个数，后面跟的是各位徒弟的编号，数字间以空格间隔。<spanclass="math inline">\(K_i\)</span>为零表示这是一位得道者，这时后面跟的一个数字表示其武功被放大的倍数。</p><h2 id="输出格式-4">输出格式：</h2><p>在一行中输出所有得道者的功力总值，只保留其整数部分。题目保证输入和正确的输出都不超过<span class="math inline">\(10^{10}\)</span>。</p><h2 id="输入样例-2">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 18.0 1.003 2 3 51 91 41 70 72 6 11 80 90 40 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-2">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">404<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-4">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">double</span> z<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>z<span class="token operator">>></span>r<span class="token punctuation">;</span>    <span class="token keyword">double</span> power<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    power<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">,</span>stu<span class="token punctuation">;</span>    <span class="token keyword">double</span> sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> burst<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>stu<span class="token punctuation">;</span>            burst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cin<span class="token operator">>></span>stu<span class="token punctuation">;</span>                v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span>power<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">*</span>burst<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            power<span class="token punctuation">[</span>v<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>power<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int i=0;i&lt;n;i++)&#123;</span>    <span class="token comment">//     cin>>count;</span>    <span class="token comment">//     if(count==0)&#123;</span>    <span class="token comment">//         cin>>stu;</span>    <span class="token comment">//         sum+=power[i]*stu;</span>    <span class="token comment">//     &#125;else&#123;</span>    <span class="token comment">//         for(int j=0;j&lt;count;j++)&#123;</span>    <span class="token comment">//             cin>>stu;</span>    <span class="token comment">//             power[stu]=power[i]*(1-(r/100));</span>    <span class="token comment">//         &#125;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">// &#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | C文件操作相关题目</title>
    <link href="/2023/12/27/PTA-C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/"/>
    <url>/2023/12/27/PTA-C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="section">2-1</h1><p>在C语言中，读写操作时会进行自动转换的文件是</p><p>A.二进制文件和文本文件都不需要转换</p><p>B.二进制文件</p><p>C.文本文件</p><p>D.二进制文件和文本文件都需要转换</p><h2 id="gpt">GPT</h2><p>在C语言中，涉及到文件读写时的自动转换主要发生在操作文本文件时。当你在C语言中使用标准的文件操作函数（如<code>fopen</code>, <code>fread</code>, <code>fwrite</code>,<code>fprintf</code>, <code>fscanf</code>等）来操作文本文件时，会进行某些自动转换。最常见的是换行符的转换：在Windows系统中，文本模式下的换行符通常会从"" 转换为""，而在写入时则会发生相反的转换。这是为了适应不同操作系统中的换行符表示差异。</p><p>相比之下，二进制文件的读写不涉及这类自动转换，因为二进制文件中的数据被视为原始字节流。</p><p>所以，正确答案是 C. 文本文件。</p><h1 id="section-1">2-2</h1><p>下面说法正确的是（ ）。</p><p>A.若文件不存在，则无法将其打开</p><p>B.文件打开后，初始读写位置总是在文件开头处</p><p>C.必须有文件指针指向已打开的文件，否则，即使打开也无法对其操作</p><p>D.一个文件关闭后，不能再次将其打开</p><h2 id="gpt-1">GPT</h2><p>下面对各选项进行分析：</p><p>A. 若文件不存在，则无法将其打开 - 这个说法不完全正确。在C语言中，使用<code>fopen()</code> 函数打开文件时，如果文件不存在且模式是写入（例如"w", "w+", "a", "a+"），则会创建新文件。如果是读模式（例如 "r" 或"r+"），且文件不存在，则无法打开文件。</p><p>B. 文件打开后，初始读写位置总是在文件开头处 -这个说法通常是正确的。在标准的C文件操作中，当使用 <code>fopen()</code>函数打开文件时，初始的读写位置通常是在文件的开头，除非指定的模式会改变位置（例如追加模式"a" 或 "a+"，初始位置会设在文件末尾）。</p><p>C. 必须有文件指针指向已打开的文件，否则，即使打开也无法对其操作 -这个说法是正确的。在C语言中，操作文件都需要通过文件指针进行，无论是读取、写入还是其他操作。如果没有有效的文件指针，就无法对文件进行操作。</p><p>D. 一个文件关闭后，不能再次将其打开 -这个说法不正确。文件关闭后可以再次打开，只需再次使用<code>fopen()</code> 函数即可。</p><p>综上所述，正确答案是 C.必须有文件指针指向已打开的文件，否则，即使打开也无法对其操作。</p><h1 id="section-2">2-3</h1><p>如果要打开文件fileA: - （1）若fileA不存在，则创建一个新文件； -（2）若fileA存在，打开后将文件读写指针定位于文件尾； -（3）打开后，可以读也可以写。 则打开方式应为（ ）。</p><p>A."r+"</p><p>B."w+"</p><p>C."a+"</p><p>D."ab"</p><h2 id="gpt-2">GPT</h2><p>根据提供的条件，我们可以确定合适的文件打开模式：</p><ol type="1"><li>若 <code>fileA</code> 不存在，则创建一个新文件；</li><li>若 <code>fileA</code> 存在，打开后将文件读写指针定位于文件尾；</li><li>打开后，可以读也可以写。</li></ol><p>这些条件最符合 "a+" 模式。在 "a+"模式中，如果文件不存在，会创建一个新文件；如果文件已存在，打开文件并将读写指针定位在文件末尾。此外，"a+"模式支持读和写操作。</p><p>选项分析：</p><ul><li>A."r+"：打开用于更新的文件，文件必须存在。但它不满足条件（1），即不会创建不存在的文件。</li><li>B."w+"：打开用于读写的空文件，如果文件存在则长度截为零。这不满足条件（2），因为它会清空现有文件。</li><li>C. "a+"：满足上述所有条件。</li><li>D."ab"：以二进制追加模式打开文件，仅支持写操作，不满足条件（3），即不支持读操作。</li></ul><p>因此，正确答案是 C. "a+"。</p><h1 id="section-3">2-4</h1><p>若要打开C盘上user子目录下名为my. txt的文本文件进行读、写操作,下面符合此要求的函数调用是()。</p><p>A.fopen("c:/user/my.txt","r+")</p><p>B.fopen("c:.txt","r+")</p><p>C.fopen("c:\user\my.txt","r+")</p><p>D.fopen("c://user//my.txt","r+")</p><h2 id="gpt-3">GPT</h2><p>在C语言中，文件路径中的反斜杠（）是一个特殊字符，它被用作转义字符的前缀。因此，如果你想在字符串中使用反斜杠，你需要使用两个反斜杠（\）来表示一个普通的反斜杠字符。这是因为单个反斜杠开始的组合（比如或 可能被解释为特殊的转义序列。</p><p>根据这个规则，我们来分析给定的选项：</p><p>A. fopen("c:/user/my.txt","r+") -这个选项使用正斜杠（/），这在许多系统中是有效的，并且在Windows中通常也能正确工作。</p><p>B. fopen("c:.txt","r+") -这个路径使用了单个反斜杠，这可能会导致问题，因为 " 和 ""可能会被解释为特殊的转义字符。</p><p>C. fopen("c:\user\my.txt","r+") -这是正确的格式，在C语言中使用双反斜杠来表示文件路径。</p><p>D. fopen("c://user//my.txt","r+") -这个选项使用了两个正斜杠，虽然这可能在某些情况下工作，但它不是标准的路径表示方式。</p><p>综上所述，正确的函数调用是 C.fopen("c:\user\my.txt","r+")。这是因为它正确地使用了双反斜杠来避免转义字符的问题，并且"r+" 模式允许对文件进行读写操作。</p><h1 id="section-4">2-5</h1><p>在C语言中，下面关于文件操作正确的叙述是（ ）。</p><p>A.对文件操作时需要先关闭文件</p><p>B.对文件操作时打开和关闭文件的顺序没有要求</p><p>C.对文件操作时，必须先检查文件是否存在，然后再打开文件</p><p>D.对文件操作时需要先打开文件</p><h2 id="gpt-4">GPT</h2><p>在C语言中，文件操作的正确顺序和必要步骤是至关重要的。根据提供的选项，我们来分析哪个叙述是正确的：</p><p>A. 对文件操作时需要先关闭文件 -这个叙述是不正确的。实际上，你必须先打开文件，然后才能进行操作，最后才关闭文件。</p><p>B. 对文件操作时打开和关闭文件的顺序没有要求 -这个叙述也是错误的。有明确的顺序要求：首先打开文件，进行所需的操作，然后关闭文件。</p><p>C. 对文件操作时，必须先检查文件是否存在，然后再打开文件 -这个叙述不一定正确。虽然在某些情况下你可能想要先检查文件是否存在（例如，使用<code>fopen</code> 之前），但这不是必须的步骤。C语言的文件操作函数（如<code>fopen</code>）本身会处理文件不存在的情况。例如，如果以读模式打开一个不存在的文件，<code>fopen</code>将返回 <code>NULL</code>。</p><p>D. 对文件操作时需要先打开文件 -这个叙述是正确的。在C语言中，对文件进行任何操作之前，必须先使用诸如<code>fopen</code>之类的函数打开文件。打开文件后，你可以读取、写入或修改文件，然后必须关闭文件以释放资源。</p><p>因此，正确答案是 D. 对文件操作时需要先打开文件。</p><h1 id="section-5">2-6</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"my.txt"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>下面说法正确的是（ ）</p><p>A.<code>my.txt</code>保存的文件为文本文件，能够直接打开查看，文件内容为32。</p><p>B.<code>fwrite</code>是写文件，因此不用加&amp;</p><p>C.<code>my.txt</code>虽然是文件文件，但内容是以二进制形式存储，不能直接打开查看。</p><p>D.<code>fwrite</code>是用于二进制的写操作，因为存储为txt文本文件，因此会转换成文本"32"，作为文本文件存储。</p><h2 id="gpt-5">GPT</h2><p>根据提供的代码片段，我们可以分析每个选项的正确性：</p><p>A. my.txt保存的文件为文本文件，能够直接打开查看，文件内容为32。 -这个说法不正确。虽然文件扩展名是 <code>.txt</code>，但由于使用了"wb"（写入二进制）模式，文件内容是以二进制形式存储的。32这个整数被以二进制的形式写入，而不是以可读的文本形式。</p><p>B. fwrite是写文件，因此不用加&amp; -这个说法也不正确。<code>fwrite</code>函数需要一个指向数据的指针作为参数。在这个例子中，<code>&amp;x</code>表示取 <code>x</code> 的地址，即指向 <code>x</code> 的指针。</p><p>C. my.txt虽然是文件文件，但内容是以二进制形式存储，不能直接打开查看。- 这个说法是正确的。文件虽然有 <code>.txt</code>扩展名，但由于使用了二进制写入模式，其内容是二进制形式的，不是普通的文本格式，因此不能直接以文本编辑器打开查看。</p><p>D.fwrite是用于二进制的写操作，因为存储为txt文本文件，因此会转换成文本"32"，作为文本文件存储。- 这个说法不正确。<code>fwrite</code>在这里是以二进制模式写入数据，不会将整数32转换为文本形式。文件的扩展名（如<code>.txt</code>）对于文件内容的解释没有影响；它是以二进制格式存储的。</p><p>因此，正确答案是 C.my.txt虽然是文件文件，但内容是以二进制形式存储，不能直接打开查看。</p><h1 id="section-6">2-7</h1><p>下列语句中，把变量fp定义为一个文件指针的是__________。</p><p>A.<code>FILE *fp;</code></p><p>B.<code>FILE fp;</code></p><p>C.<code>file *fp;</code></p><p>D.<code>file fp;</code></p><h2 id="gpt-6">GPT</h2><p>在C语言中，文件指针是通过 <code>FILE</code>类型定义的，这是标准库中定义的用于文件操作的类型。文件指针用于存储与打开文件相关的信息，包括文件位置和状态信息。</p><p>根据这一点，我们来分析各个选项：</p><p>A. FILE *fp; - 这个选项正确地定义了一个类型为 <code>FILE</code>的指针。<code>FILE</code>是标准I/O库中定义的类型，用于文件操作，<code>*</code> 表明<code>fp</code> 是一个指针。</p><p>B. FILE fp; - 这个选项定义了一个 <code>FILE</code>类型的变量，而不是指针。它用于直接存储文件信息，而不是存储指向该信息的指针。</p><p>C. file *fp; - 这个选项使用了小写的<code>file</code>，而在C语言中，<code>FILE</code>是正确的类型名称，且是区分大小写的。因此，这不是一个正确的文件指针定义。</p><p>D. file fp; - 与选项C类似，这里使用了错误的类型名称（小写的<code>file</code>），而且没有使用指针。</p><p>因此，正确答案是 A. FILE *fp;，它正确地定义了一个文件指针。</p><h1 id="section-7">2-8</h1><p>进行文件操作时，“写文件”的一般含义是__________。</p><p>A.将磁盘中的信息存入计算机内存</p><p>B.将计算机内存中的信息存入磁盘</p><p>C.将计算机CPU中的信息存入磁盘</p><p>D.将磁盘中的信息存入计算机CPU</p><h2 id="gpt-7">GPT</h2><p>在计算机术语中，"写文件"通常指的是：</p><p>B. 将计算机内存中的信息存入磁盘</p><p>解释如下：</p><ul><li>当我们说"写文件"时，这通常意味着将数据从计算机的内存（也就是程序运行时使用的临时存储空间）转移到一个更永久的存储介质上，如硬盘或SSD等。这个过程涉及到将内存中的数据复制到文件系统中，创建或修改磁盘上的文件。</li></ul><p>其他选项的含义是：</p><p>A. 将磁盘中的信息存入计算机内存 -这实际上描述的是"读文件"的过程，即从磁盘读取数据到内存中。</p><p>C. 将计算机CPU中的信息存入磁盘 -这个描述不准确。CPU处理的信息通常是来自于或者存储在内存中，而不是直接与磁盘交互。</p><p>D. 将磁盘中的信息存入计算机CPU -这同样不是写文件的过程。这更像是读取数据的描述，且实际上数据是从磁盘读入内存，而不是直接进入CPU。</p><p>因此，"写文件"的一般含义是将内存中的数据写入（存储）到磁盘上。</p><h1 id="section-8">2-9</h1><p>以读方式打开一个已有的文本文件<code>“file1”</code>，以下<code>fopen()</code>函数正确的调用方式是__________。</p><p>A.<code>fp=fopen("file1","r");</code></p><p>B.<code>fp=fopen("file1","wb");</code></p><p>C.<code>fp=fopen("file1", "rb");</code></p><p>D.<code>fp=fopen("file1","w");</code></p><h2 id="gpt-8">GPT</h2><p>要以读方式打开一个已有的文本文件，需要使用正确的模式字符串作为<code>fopen</code> 函数的参数。下面是对各个选项的解释：</p><p>A. fp=fopen("file1","r"); - 这个选项是正确的。"r"模式用于以读方式打开一个文本文件。如果文件存在，它可以被打开用于读取。</p><p>B. fp=fopen("file1","wb"); - 这个选项不正确。"wb"模式用于以写方式打开一个二进制文件，并且如果文件存在，会将其内容清空。</p><p>C. fp=fopen("file1", "rb"); - 这个选项不正确。虽然 "rb"模式用于以读方式打开一个文件，但它是针对二进制文件，而不是文本文件。</p><p>D. fp=fopen("file1","w"); - 这个选项不正确。"w"模式用于以写方式打开一个文本文件，并且如果文件存在，也会将其内容清空。</p><p>因此，正确的调用方式，以读方式打开一个已有的文本文件“file1”，是 A.fp=fopen("file1","r");。</p><h1 id="section-9">2-10</h1><p>以下语句将输出 （）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  %d  %d"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>A.<code>0 0 1</code></p><p>B.<code>0 0 -1</code></p><p>C.<code>NULL EOF</code></p><p>D.<code>1 0 EOF</code></p><h2 id="gpt-9">GPT</h2><p>为了确定这段代码的输出，我们需要理解每个输出项的含义：</p><ol type="1"><li><p><code>NULL</code> 在C语言中通常被定义为指针常量，通常是<code>(void *)0</code>。在使用 <code>%d</code>格式化输出时，它通常会被视为整数 <code>0</code>。</p></li><li><p><code>'\0'</code> 是一个空字符，它在C语言中的数值也是<code>0</code>。</p></li><li><p><code>EOF</code>是一个在stdio.h中定义的宏，通常用于表示文件结束。它的具体值是<code>-1</code>。</p></li></ol><p>所以，这个printf语句的输出将是：</p><p><code>0  0  -1</code></p><p>因此，正确答案是 B. <code>0  0  -1</code>。</p><h1 id="section-10">4-1</h1><p>程序功能：先从键盘输入10个整数对a,b，并将其写到文本文件中；</p><p>然后，从文件中将其读出，显示在屏幕上。</p><p>存在文本文件中数据形式如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(2:3)(3:4)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>注意：在下面空中填写代码时，不允许出现空格字符</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> i<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file1.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"(%d:%d)\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file1.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    k <span class="token operator">=</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"(%d:%d)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"(%d:%d)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-11">4-2</h1><p>程序功能：从键盘依次输入学生的信息到结构体变量<code>s_data</code>中，再将<code>s_data</code>数据写到<code>"stu.dat"</code>文件中（<code>stu.dat</code>格式为二进制文件），</p><p>最后从<code>"stu.dat"</code>文件中读取所有学生的信息并显示。</p><p>注意：在下面空中填写代码时，不允许出现空格字符</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> s_data<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"stu.dat"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以二进制打开文件供写</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"File can not be opened \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %f"</span><span class="token punctuation">,</span> s_data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s_data<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"stu.dat"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 以只读的方式打开二进制文件</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 成功读取一个结构体变量的数据，则循环</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名：%s,成绩：%6.2f：\n"</span><span class="token punctuation">,</span> s_data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s_data<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结构体变量中的数据</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-12">4-3</h1><p>下面程序的功能是将一个磁盘中的二进制文件复制到另一个磁盘中，两个文件名随命令行一起输入，输入时原有文件的文件名在前，新复制文件的文件名在后。请填空补全。(注意：填写时不要加额外空格)<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You forgot to enter a filename\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>old <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cannot open infile\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>new <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cannot open outfile\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token function">fgetc</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> 因为题目是填空题，所以有一定限制。更优化的代码如下：<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> <span class="token comment">// 包含 exit 函数所需的头文件</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You forgot to enter filenames\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一般情况下，非零退出码表示错误</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>old <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Cannot open infile\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>new <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 应该使用 "wb" 模式</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Cannot open outfile\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭已经打开的文件</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 正确读取文件内容</span>        <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> 使用了 <code>feof(old)</code>来检查文件结束，会在某些情况下可能导致最后一个字符被错误地读取或写入两次。</p><p><code>feof()</code>函数只有在尝试读取超出文件末尾之后才会返回真（非零值）。这意味着，如果文件读取循环在到达文件末尾之前不退出，<code>feof()</code>在最后一个有效字符读取后将不会立即返回真。因此，循环可能会再执行一次，并且<code>fgetc(old)</code> 会返回 <code>EOF</code>，但因为<code>feof(old)</code> 还没有返回真，<code>EOF</code> 也会被写入<code>new</code> 文件。</p><p>更好的做法是直接在循环中检查 fgetc(old) 的返回值。</p><h1 id="section-13">4-4</h1><p>定义了一个存储课程信息的结构体数组，从键盘输入<spanclass="math inline">\(n(n≤10)\)</span>们课程信息，并将其逐个写到一个文件中去。阅读下面程序，在留空的地方填入合适的信息，使程序功能完整。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Course</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cNo<span class="token punctuation">;</span>    <span class="token keyword">char</span> cName<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> COURSE<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    COURSE cArr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"course.dat"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can not open the file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cNo<span class="token punctuation">,</span> cArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>COURSE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="显示汉字点阵图形高级">6-1 显示汉字点阵图形(高级)</h1><p>每个汉字的图形都由 16×16 的点阵组成，如汉字“福”的点阵图形如下：</p><p>题图.jpg</p><p>每个像素用 1 个二进制位来表示：1 表示像素是亮的，0表示像素是不亮的。每个汉字由 16×16 = 256 个二进制位，即 32个字节组成。</p><p>HZK16.DAT 是汉字点阵图形文件，其中包括 GB2312-80的全部汉字图形，按汉字的区位码顺序存储。</p><p>请点击链接 <ahref="https://pan.baidu.com/s/1sbn7SDwZJormPteZiObbbg">HZK16.DAT</a>下载该文件。</p><p>请编写函数，显示汉字的图形。</p><h2 id="函数原型">函数原型</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShowImage2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> high<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> low<span class="token punctuation">,</span> FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> bold<span class="token punctuation">,</span> <span class="token keyword">int</span> italic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>说明：参数 <code>high</code> 和 <code>low</code>分别为汉字内码的高字节和低字节，in 是指示汉字图形库文件的指针。若参数<code>bold</code> 为 1 (真)，则加粗，否则不加粗。若参数<code>italic</code> 为 1(真)，则倾斜，否则不倾斜。函数用<code>“■”</code>表示汉字点阵中点亮的像素，用<code>“□”</code>表示不亮的像素。</p><h2 id="裁判程序">裁判程序</h2><p>下面的程序输入汉字，输出该汉字的点阵图形。 <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">ShowImage2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> high<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> low<span class="token punctuation">,</span> FILE <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">int</span> bold<span class="token punctuation">,</span> <span class="token keyword">int</span> italic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> high<span class="token punctuation">,</span> low<span class="token punctuation">,</span> bold<span class="token punctuation">,</span> italic<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>in<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c%c %c %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>high<span class="token punctuation">,</span> <span class="token operator">&amp;</span>low<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bold<span class="token punctuation">,</span> <span class="token operator">&amp;</span>italic<span class="token punctuation">)</span><span class="token punctuation">;</span>    in <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"HZK16.DAT"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"File can not open!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ShowImage2</span><span class="token punctuation">(</span>high<span class="token punctuation">,</span> low<span class="token punctuation">,</span> f<span class="token punctuation">,</span> bold <span class="token operator">==</span> <span class="token char">'Y'</span><span class="token punctuation">,</span> italic <span class="token operator">==</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fclose</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"File can not close!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 你提交的代码将被嵌在这里 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="输入格式">输入格式</h2><p>汉字 粗体(Y/N) 斜体(Y/N)</p><h2 id="输出格式">输出格式</h2><p>指定格式的汉字</p><h2 id="输入样例1">输入样例1</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">福 N N<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例1">输出样例1</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">□□■□□□□□□□□□■□□□□□□■□■■■■■■■■■□□□□□■□□□□□□□□□□□□□□□□□□■■■■■■■□□□■■■■■□■□□□□□■□□□□□□□■□■□□□□□■□□□□□□■□□■■■■■■■□□□□□■■■□□□□□□□□■□□□■□■□■■■■■■■■■■□■□□■□■□□□■□□□■□□□□□■□■□□□■□□□■□□□□□■□■■■■■■■■■□□□□□■□■□□□■□□□■□□□□□■□■□□□■□□□■□□□□□■□■■■■■■■■■□□□□□■□■□□□□□□□■□□<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实际显示效果如下：</p><p>题图.jpg</p><h2 id="输入样例2">输入样例2</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">福 N Y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例2">输出样例2</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">               □□■□□□□□□□□□■□□□              □□□■□■■■■■■■■■□□             □□□■□□□□□□□□□□□□            □□□□□□■■■■■■■□□□           ■■■■■□■□□□□□■□□□          □□□□■□■□□□□□■□□□         □□□■□□■■■■■■■□□□        □□■■■□□□□□□□□■□□       □■□■□■■■■■■■■■■□      ■□□■□■□□□■□□□■□□     □□□■□■□□□■□□□■□□    □□□■□■■■■■■■■■□□   □□□■□■□□□■□□□■□□  □□□■□■□□□■□□□■□□ □□□■□■■■■■■■■■□□□□□■□■□□□□□□□■□□<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实际显示效果如下：</p><p>题图1.jpg</p><h2 id="输入样例3">输入样例3</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">福 Y N<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例3">输出样例3</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">□□□□■■□□□□□□□□□□□□□□□□□□■■□□□□□□□□□□□□■■□□■■■■■■■■■■■■■■■■■■□□□□□□□□□□■■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■■■■■■■■■■■■■■□□□□□□■■■■■■■■■■□□■■□□□□□□□□□□■■□□□□□□□□□□□□□□■■□□■■□□□□□□□□□□■■□□□□□□□□□□□□■■□□□□■■■■■■■■■■■■■■□□□□□□□□□□■■■■■■□□□□□□□□□□□□□□□□■■□□□□□□■■□□■■□□■■■■■■■■■■■■■■■■■■■■□□■■□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□□□□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□□□□□□□■■□□■■■■■■■■■■■■■■■■■■□□□□□□□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□□□□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□□□□□□□■■□□■■■■■■■■■■■■■■■■■■□□□□□□□□□□■■□□■■□□□□□□□□□□□□□□■■□□□□<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实际显示效果如下：</p><p>题图2.jpg</p><h2 id="输入样例4">输入样例4</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">福 Y Y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例4">输出样例4</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">               □□□□■■□□□□□□□□□□□□□□□□□□■■□□□□□□              □□□□□□■■□□■■■■■■■■■■■■■■■■■■□□□□             □□□□□□■■□□□□□□□□□□□□□□□□□□□□□□□□            □□□□□□□□□□□□■■■■■■■■■■■■■■□□□□□□           ■■■■■■■■■■□□■■□□□□□□□□□□■■□□□□□□          □□□□□□□□■■□□■■□□□□□□□□□□■■□□□□□□         □□□□□□■■□□□□■■■■■■■■■■■■■■□□□□□□        □□□□■■■■■■□□□□□□□□□□□□□□□□■■□□□□       □□■■□□■■□□■■■■■■■■■■■■■■■■■■■■□□      ■■□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□     □□□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□    □□□□□□■■□□■■■■■■■■■■■■■■■■■■□□□□   □□□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□  □□□□□□■■□□■■□□□□□□■■□□□□□□■■□□□□ □□□□□□■■□□■■■■■■■■■■■■■■■■■■□□□□□□□□□□■■□□■■□□□□□□□□□□□□□□■■□□□□<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实际显示效果如下：</p><p>题图3.jpg</p><p>注：本题无法自测，请直接提交。</p><h1 id="批量求和">6-2 批量求和(*)</h1><p>请编写函数，从一个文件中读取实数求和，并将结果写入另一个文件。</p><h2 id="函数原型-1">函数原型</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BatchAdd</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> FILE <span class="token operator">*</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>说明：参数 <code>in</code> 和 <code>out</code>为指示两个文件的指针。函数从 <code>in</code>所指文件中的读出数据，将结果写入 <code>out</code> 所指的文件中。</p><p>要求：<code>in</code>所指文件中有很多行，每行包含两个实数，以空格间隔。函数求出这两个实数的和，写入<code>out</code> 文件中，每行一个结果。</p><p>要求：输出结果保留 2 位小数。</p><h2 id="裁判程序-1">裁判程序</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">BatchAdd</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> FILE <span class="token operator">*</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">;</span>    in <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"Addition.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"Sum.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">&amp;&amp;</span> out<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">BatchAdd</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"文件无法打开!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>out<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"文件保存成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 你提交的代码将被嵌在这里 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在程序所在文件夹中创建文本文件<code>“Addition.txt”</code>，复制下面的内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Addition.txt25.9 8.7120.9 87.51812.8 65.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例">输入样例</h2><p>(无)</p><h2 id="输出样例">输出样例</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">文件保存成功!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>程序运行结束后，打开“Sum.txt”文件，查看文件内容。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">34.60208.4278.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BatchAdd</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> FILE <span class="token operator">*</span>out<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="有结构文件的读写1">6-3 有结构文件的读写1</h1><p>学生类型：ST的类型定义如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> gender<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">double</span> scored<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ST<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>编写函数，从指定的文件上读入若干字符串，每行字符串是一个学生的信息（姓名，学号，性别，年龄，分数）的字符串表示，数据间以空格分隔，将学生们的信息存储于一个结构体中，并利用<code>output()</code>函数输出到指定文件中。</p><h2 id="函数接口定义">函数接口定义：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fin<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>其中 <code>fin</code> 和 <code>fout</code> 都是用户传入的参数。前者是已正常打开的可读文件，而后者是已正常打开的可写文件。</p><h2 id="裁判测试程序样例">裁判测试程序样例：</h2><p>在这里给出函数被调用进行测试的例子。例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> gender<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">double</span> scored<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> ST<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>ST <span class="token operator">*</span>d<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//测试程序，输出到文件调用此函数完成</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"null\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span><span class="token string">"%s,%s,%d,%d,%4.2f\n"</span><span class="token punctuation">,</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span>d<span class="token operator">-></span>id<span class="token punctuation">,</span>d<span class="token operator">-></span>gender<span class="token punctuation">,</span>d<span class="token operator">-></span>age<span class="token punctuation">,</span>d<span class="token operator">-></span>scored<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fin<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&lt;--需要完成的函数（包括读入字符串，转换成对应的结构体，并利用函数（output（））输出到指定文件中，输入输出文件不用考虑</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例-1">输入样例：</h2><p>从固定文件中读取：文件内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">aaa   123   0 18 88.88bbb 456   1 19  99.99ccc 789 1 18 66.66ddd   356   0 18  67.89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例：</h2><p>输出到指定文件中，文件内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">aaa,123,0,18,88.88bbb,456,1,19,99.99ccc,789,1,18,66.66ddd,356,0,18,67.89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-1">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fin<span class="token punctuation">,</span>FILE <span class="token operator">*</span>fout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ST st<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span><span class="token string">"%s%s%d%d%lf"</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>name<span class="token punctuation">,</span>st<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>gender<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>scored<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">output</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span>fout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="统计成绩不及格学生信息">6-4 统计成绩不及格学生信息</h1><p>请编写函数，从文件中读取成绩不及格的学生信息，将结果写入另一个文件。</p><h2 id="函数接口定义-1">函数接口定义：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FailStudent</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> in<span class="token punctuation">,</span> FILE<span class="token operator">*</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>说明：</p><ul><li>（1）参数in和out为指示两个文件的指针。函数从in所指文件中读出数据，将结果写入out所指的文件中。</li><li>（2）in所指文件中有很多行(不超过100行)，每行对应一名学生的多个信息，以空格间隔，这些信息包括：学号（12位），姓名（不超过10个字符，且其中不含空格），三科成绩：数学，英语，C语言（均是&lt;=100的非负整数）。</li><li>（3）函数要求，某科成绩不及格（&lt;60）的学生，需要将其“学号 姓名该科课程名”三部分内容写入out文件中，每行一个结果。其中，三门课程的课程名分别为："Math"，"English"，"C"。</li></ul><h2 id="裁判测试程序样例-1">裁判测试程序样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">FailStudent</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> in<span class="token punctuation">,</span> FILE<span class="token operator">*</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">;</span>    in <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">&amp;&amp;</span> out<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">FailStudent</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"文件无法打开!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>out<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"文件保存成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例-2">输入样例：</h2><p>“in.txt”文件中保存的数据样例为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">202018010102 zhangsan 50 50 50202026070420 hanmeimei 90 90 90202116050331 lilei 50 90 100202128060211 wangmazi 70 70 59<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-2">输出样例：</h2><p>程序运行结束后，打开“out.txt”文件，查看文件内容。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">202018010102 zhangsan Math202018010102 zhangsan English202018010102 zhangsan C202116050331 lilei Math202128060211 wangmazi C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-2">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FailStudent</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> FILE <span class="token operator">*</span>out<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">student</span> stu<span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"Math"</span><span class="token punctuation">,</span><span class="token string">"English"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token string">"%lld%s%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">.</span>id<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>score<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>score<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token punctuation">.</span>score<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">fprintf</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span><span class="token string">"%lld %s %s\n"</span><span class="token punctuation">,</span>stu<span class="token punctuation">.</span>id<span class="token punctuation">,</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// if(stu.score[0]&lt;60 || stu.score[1]&lt;60 || stu.score[2]&lt;60)&#123;</span>        <span class="token comment">//     fprintf(out,"%lld %s",stu.id,stu.name);</span>        <span class="token comment">//     if(stu.score[0]&lt;60) fprintf(out," Math");</span>        <span class="token comment">//     if(stu.score[1]&lt;60) fprintf(out," English");</span>        <span class="token comment">//     if(stu.score[2]&lt;60) fprintf(out," C");</span>        <span class="token comment">//     fprintf(out,"\n");</span>        <span class="token comment">// &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Assignments 6</title>
    <link href="/2023/12/25/ACM-Assignments-6/"/>
    <url>/2023/12/25/ACM-Assignments-6/</url>
    
    <content type="html"><![CDATA[<h1 id="非常可乐">7-2 非常可乐</h1><p>大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求和seeyou一起分享这一瓶可乐，而且一定要喝的和seeyou一样多。但seeyou的手中只有两个杯子，它们的容量分别是N毫升和M 毫升 可乐的体积为S （S&lt;101）毫升　(正好装满一瓶)，它们三个之间可以相互倒可乐 (都是没有刻度的，且S==N+M，101＞S＞0，N＞0，M＞0)。聪明的ACMER你们说他们能平分吗？如果能请输出倒可乐的最少的次数，如果不能输出"NO"。</p><h2 id="输入格式">输入格式:</h2><p>三个整数 : S 可乐的体积 , N 和 M是两个杯子的容量，以"0 0 0"结束。</p><h2 id="输出格式">输出格式:</h2><p>如果能平分的话请输出最少要倒的次数，否则输出"NO"。</p><h2 id="输入样例">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 4 34 1 30 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">NO3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="code">Code</h2><p>WA代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">State</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>State<span class="token operator">></span> q<span class="token punctuation">;</span>    State now<span class="token punctuation">;</span>    now<span class="token punctuation">.</span>s<span class="token operator">=</span>s<span class="token punctuation">;</span>    now<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    now<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    now<span class="token punctuation">.</span>step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>now<span class="token punctuation">.</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now<span class="token punctuation">.</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now<span class="token punctuation">.</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now<span class="token punctuation">.</span>step<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">// if(used[now.s][now.a][now.b])</span>        <span class="token comment">//     continue;</span>        <span class="token comment">// if(now.a==s/2 || now.b==s/2 || now.s==s/2)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>a<span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>b<span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>a<span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>s<span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>s<span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>b<span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> now<span class="token punctuation">.</span>step<span class="token punctuation">;</span>                    used<span class="token punctuation">[</span>now<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        State newstate<span class="token punctuation">;</span>        newstate<span class="token punctuation">.</span>step<span class="token operator">=</span>now<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">//S->A</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>s<span class="token operator">>=</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token operator">-</span><span class="token punctuation">(</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//S->B</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>s<span class="token operator">>=</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//A->S</span>        <span class="token comment">// if(now.a&lt;s-now.s)</span>        <span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token operator">+</span>now<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//A->B</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>a<span class="token operator">&lt;</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token operator">+</span>now<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//B->S</span>        <span class="token comment">// if(now.b&lt;s-now.s)</span>        <span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token operator">+</span>now<span class="token punctuation">.</span>b<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//B->A</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>b<span class="token operator">&lt;</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token operator">+</span>now<span class="token punctuation">.</span>b<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token operator">-</span>now<span class="token punctuation">.</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            newstate<span class="token punctuation">.</span>s<span class="token operator">=</span>now<span class="token punctuation">.</span>s<span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>a<span class="token operator">=</span>now<span class="token punctuation">.</span>a<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            newstate<span class="token punctuation">.</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>b<span class="token operator">-</span><span class="token punctuation">(</span>a<span class="token operator">-</span>now<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>s<span class="token operator">>></span>n<span class="token operator">>></span>m <span class="token operator">&amp;&amp;</span> s<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>t<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code2">Code2</h2><p>AC代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">State</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>State <span class="token function">pour</span><span class="token punctuation">(</span>State s<span class="token punctuation">,</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    State res<span class="token operator">=</span>s<span class="token punctuation">;</span>    res<span class="token punctuation">.</span>step<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span>res<span class="token punctuation">.</span>v<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token operator">+</span>res<span class="token punctuation">.</span>v<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">></span>v<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span>v<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">-</span>v<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span>v<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span>v<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>        res<span class="token punctuation">.</span>v<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>˜    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>State<span class="token operator">></span> q<span class="token punctuation">;</span>    State now<span class="token punctuation">;</span>    <span class="token keyword">int</span> from<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> to<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">;</span>    now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    now<span class="token punctuation">.</span>step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    State newstate<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cout&lt;&lt;now.v[0]&lt;&lt;" "&lt;&lt;now.v[1]&lt;&lt;" "&lt;&lt;now.v[2]&lt;&lt;" "&lt;&lt;now.step&lt;&lt;endl;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> now<span class="token punctuation">.</span>step<span class="token punctuation">;</span>                    used<span class="token punctuation">[</span>now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newstate<span class="token operator">=</span><span class="token function">pour</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span>from<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>newstate<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>s<span class="token operator">>></span>n<span class="token operator">>></span>m <span class="token operator">&amp;&amp;</span> s<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   cout<span class="token operator">&lt;&lt;</span>t<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | 结构体链表相关题目</title>
    <link href="/2023/12/19/PTA-%E7%BB%93%E6%9E%84%E4%BD%93%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/"/>
    <url>/2023/12/19/PTA-%E7%BB%93%E6%9E%84%E4%BD%93%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="section">2-1</h1><p>对于以下结构定义，p-&gt;str++中的++加在（ ）。</p><p>struct { int len; char * str; } *p;</p><ol type="A"><li><p>指针<code>str</code>上</p></li><li><p>指针<code>p</code>上</p></li><li><p><code>str</code>指针指向的内容上</p></li><li><p>语法错误</p></li></ol><h2 id="gpt">GPT</h2><p>在这个结构体定义中，<code>p</code>是一个指向该结构体的指针。结构体包含一个整型成员 <code>len</code>和一个字符指针 <code>str</code>。当执行 <code>p-&gt;str++</code>时，这个操作会影响到：</p><p>C. str指针指向的内容上</p><p>解释如下：</p><p><code>p-&gt;str</code> 访问的是 p 所指向的结构体中的 <code>str</code>成员。</p><p><code>++</code> 操作符应用在 <code>p-&gt;str</code> 上，意味着增加<code>str</code> 指针的值。在这种情况下，<code>str</code>是一个字符指针，所以 <code>++</code>会使它前进到它当前指向的字符串中的下一个字符。</p><p>因此，<code>p-&gt;str++</code> 操作会改变 <code>str</code>指针的值，使其指向下一个字符。所以正确答案是<code>C. str指针指向的内容上</code>。</p><h1 id="section-1">2-2</h1><p>下面定义结构变量的语句中错误的是（ ）。</p><ol type="A"><li><p><code>struct student &#123; int num; char name[20]; &#125; s;</code></p></li><li><p><code>struct &#123; int num; char name[20]; &#125;s;</code></p></li><li><p><code>struct student &#123; int num; char name[20]; &#125;; struct student s;</code></p></li><li><p><code>struct student &#123;int num; char name[20]; &#125;; student s;</code></p></li></ol><h2 id="gpt-1">GPT</h2><p>在这些选项中，错误的定义语句是：</p><p><code>D. struct student &#123;int num; char name[20]; &#125;; student s;</code></p><p>这个选项中的错误在于，当在C语言中定义一个结构体变量时，需要在类型名前加上关键字<code>struct</code>，除非使用了 <code>typedef</code>创建了一个别名。在选项D中，<code>student</code> 后面没有<code>struct</code> 关键字，这在标准C语言中是不正确的。正确的声明应该是<code>struct student s;</code>。</p><p>其他选项的解释如下：</p><p>A. 正确地定义了一个名为 <code>s</code> 的 <code>struct student</code>类型的变量。</p><p>B. 正确地定义了一个匿名结构体，并创建了这个结构体类型的一个变量<code>s</code>。</p><p>C. 首先定义了一个名为 <code>struct student</code>的结构体类型，然后创建了这个类型的一个变量 <code>s</code>。</p><p>所以，错误的选项是 D。</p><h1 id="section-2">2-3</h1><p>下列关于<code>typedef</code> 的叙述错误的是()。</p><ol type="A"><li><p>用 <code>typedef</code>可以增加新类型</p></li><li><p><code>typedef</code>只是将已存在的类型用一个新的名字来代表</p></li><li><p>用<code>typedef</code>可以为各种类型说明一个新名,但不能用来为变量说明一个新名</p></li><li><p>用<code>typedef</code>为类型说明一个新名,通常可以增加程序的可读性</p></li></ol><h2 id="gpt-2">GPT</h2><p>在这些关于 <code>typedef</code> 的叙述中，错误的是：</p><p>A. 用 <code>typedef</code>可以增加新类型</p><p>解释如下：</p><p>A. <code>typedef</code>并不创建一个新的类型，它只是为已经存在的类型提供了一个新的名称。这是一种方便的别名机制，但并不引入新的数据类型。</p><p>B. 正确。这是 <code>typedef</code>的基本功能——为已经存在的类型定义一个新的名字。</p><p>C. 正确。<code>typedef</code>用于为类型定义新名字，而不是用于变量。例如，你不能用<code>typedef</code> 直接为一个特定的变量赋予别名。</p><p>D. 正确。<code>typedef</code>的一个主要用途是增加代码的可读性和可维护性，特别是对于复杂的类型定义，如函数指针或复杂的结构体。</p><p>因此，错误的叙述是 A.</p><h1 id="结构体数组中按关键字查找满足条件的数据节点">6-1结构体数组中按关键字查找满足条件的数据节点</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span> stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有上面面学生记录类型定义，定义函数在一组学生记录中找成绩最低的学生信息，最低分唯一</p><h2 id="函数接口定义">函数接口定义：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">stu <span class="token function">fun</span><span class="token punctuation">(</span> stu  a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>数组a里存储N个学生记录，返回值是最低分记录</p><h2 id="裁判测试程序样例">裁判测试程序样例：</h2><p>在这里给出函数被调用进行测试的例子。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span>  <span class="token expression"><span class="token number">10</span></span></span>stu <span class="token function">fun</span><span class="token punctuation">(</span> stu  a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>；<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stu a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    min<span class="token operator">=</span><span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %s %d"</span><span class="token punctuation">,</span>min<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token punctuation">,</span>min<span class="token punctuation">.</span>name<span class="token punctuation">,</span>min<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="输入样例">输入样例：</h2><p>在这里给出一组输入。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 a01 622 a02 563 a03 774 aaa 665 bbb 7811 a01 6212 a02 5713 a03 7714 aaa 9615 bbb 78<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="输出样例">输出样例：</h2><p>在这里给出相应的输出。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2 a02 56<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="code">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span> stu<span class="token punctuation">;</span>stu <span class="token function">fun</span><span class="token punctuation">(</span>stu a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stu a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    min <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %s %d"</span><span class="token punctuation">,</span> min<span class="token punctuation">.</span>num<span class="token punctuation">,</span> min<span class="token punctuation">.</span>name<span class="token punctuation">,</span> min<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu <span class="token function">fun</span><span class="token punctuation">(</span>stu a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stu min<span class="token punctuation">;</span>    min<span class="token punctuation">.</span>score<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">&lt;</span>min<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            min<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="学生成绩的统计">6-2 学生成绩的统计</h1><p>有N名学生，每个学生的数据包括学号、姓名、数学成绩、语文成绩，从键盘输入N名学生的数据，并计算出每个学生的平均成绩，最后显示最高平均分的学生的信息，包括学号，姓名，两门课的成绩，平均分数（保留小数点后一位）。需要完成两个函数；</p><h2 id="函数接口定义-1">函数接口定义：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InputData</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>STU <span class="token operator">*</span><span class="token function">FindMaxIndex</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="裁判测试程序样例-1">裁判测试程序样例：</h2><p>在这里给出函数被调用进行测试的例子。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> math<span class="token punctuation">;</span>    <span class="token keyword">int</span> chinese<span class="token punctuation">;</span>    <span class="token keyword">double</span> aver<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>STU<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InputData</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>STU <span class="token operator">*</span><span class="token function">FindMaxIndex</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    STU classone<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    STU <span class="token operator">*</span>pmax<span class="token punctuation">;</span>    <span class="token function">InputData</span><span class="token punctuation">(</span>classone<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    pmax<span class="token operator">=</span><span class="token function">FindMaxIndex</span><span class="token punctuation">(</span>classone<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"maxinfo:%d %s %d %d %.1f\n"</span><span class="token punctuation">,</span>pmax<span class="token operator">-></span>id<span class="token punctuation">,</span>pmax<span class="token operator">-></span>name<span class="token punctuation">,</span>pmax<span class="token operator">-></span>math<span class="token punctuation">,</span>pmax<span class="token operator">-></span>chinese<span class="token punctuation">,</span>pmax<span class="token operator">-></span>aver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="输入样例-1">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2 张 78 341 李 67 894 王 90 673 刘 85 955 赵 56 89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">maxinfo:3 刘 85 95 90.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-1">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> math<span class="token punctuation">;</span>    <span class="token keyword">int</span> chinese<span class="token punctuation">;</span>    <span class="token keyword">double</span> aver<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>STU<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InputData</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>STU <span class="token operator">*</span><span class="token function">FindMaxIndex</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    STU classone<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    STU <span class="token operator">*</span>pmax<span class="token punctuation">;</span>    <span class="token function">InputData</span><span class="token punctuation">(</span>classone<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    pmax<span class="token operator">=</span><span class="token function">FindMaxIndex</span><span class="token punctuation">(</span>classone<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"maxinfo:%d %s %d %d %.1f\n"</span><span class="token punctuation">,</span>pmax<span class="token operator">-></span>id<span class="token punctuation">,</span>pmax<span class="token operator">-></span>name<span class="token punctuation">,</span>pmax<span class="token operator">-></span>math<span class="token punctuation">,</span>pmax<span class="token operator">-></span>chinese<span class="token punctuation">,</span>pmax<span class="token operator">-></span>aver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InputData</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>i<span class="token operator">=</span>p<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">+</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token operator">-></span>id<span class="token punctuation">,</span>i<span class="token operator">-></span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token operator">-></span>math<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token operator">-></span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">-></span>aver<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-></span>chinese<span class="token operator">+</span>i<span class="token operator">-></span>math<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>STU <span class="token operator">*</span><span class="token function">FindMaxIndex</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    STU <span class="token operator">*</span>res<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>i<span class="token operator">=</span>p<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">+</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-></span>aver<span class="token operator">></span>res<span class="token operator">-></span>aver<span class="token punctuation">)</span> res<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="链表-创建链表">6-3 链表-创建链表</h1><p>本题要求实现一个函数，建立一个链表，返回头指针（即头节点地址）</p><p>head是链表的头指针,链表上节点的定义如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>链表上节点的数据成员ch按顺序赋值0，1，2，3......至n-1</p><h2 id="函数接口定义-2">函数接口定义：</h2><p>在这里描述函数接口。例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">setlink</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>n 是节点个数，返回值是头指针</p><h2 id="裁判测试程序样例-2">裁判测试程序样例：</h2><p>在这里给出函数被调用进行测试的例子。例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span>  <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ch<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">countnode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此函数功能遍历链表，已定义</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">setlink</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在代码区定义此函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>N<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span> head<span class="token operator">=</span><span class="token function">setlink</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">countnode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例-2">输入样例：</h2><p>在这里给出一组输入。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="输出样例-2">输出样例：</h2><p>在这里给出相应的输出。例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-2">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ch<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">countnode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此函数功能遍历链表，已定义</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">setlink</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在代码区定义此函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> N<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">setlink</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">countnode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">setlink</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>ch <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">setlink</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>ch <span class="token operator">=</span> n<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="删除链表中的重复数据">6-4 删除链表中的重复数据</h1><p>程序的功能是：逆序创建一个键值为整数的链表L，编程实现将其中绝对值重复的键值结点删掉。即对每个键值K，只有第一个绝对值等于 K的结点被保留。同时，所有被删除的结点须按照原来顺序保存在另一个链表中。例如给定链表L的各键值为 21→-15→-15→-7→15，则输出去重后的链表：21→-15→-7，以及被删除的结点链表： -15→15。</p><h2 id="函数接口定义-3">函数接口定义：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Createlist</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Del_absrepeat</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token operator">*</span>head <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Printlist</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>其中 <code>n</code> 和 <code>head</code> 都是用户传入的参数。<code>n</code> 的值不超过<code>int</code>的范围，表示创建的链表结点数；<code>head</code> 是链表的头指针。 输入时在第一行给出 <code>L</code>的结点总数<code>n</code>。随后输入<code>n</code>个整数值，链表按输入数据的逆序建立。</p><h2 id="裁判测试程序样例-3">裁判测试程序样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Createlist</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Del_absrepeat</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token operator">*</span>head <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Printlist</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>head2<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">Createlist</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始链表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Printlist</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>           head2<span class="token operator">=</span><span class="token function">Del_absrepeat</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>head <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除重复结点的链表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Printlist</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"被删除的结点组成的链表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Printlist</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Printlist</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例-3">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">521 -15 -15 -7 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-3">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">原始链表：15 -7 -15 -15 21 删除重复结点的链表：15 -7 21 被删除的结点组成的链表：-15 -15 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例-4">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">715 -15 -15 -15 15 -15 15 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-4">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">原始链表：15 -15 15 -15 -15 -15 15 删除重复结点的链表：15 被删除的结点组成的链表：-15 15 -15 -15 -15 15 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-3">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Createlist</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Del_absrepeat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Printlist</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>head2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token function">Createlist</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始链表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Printlist</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    head2 <span class="token operator">=</span> <span class="token function">Del_absrepeat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除重复结点的链表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Printlist</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"被删除的结点组成的链表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Printlist</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Printlist</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Createlist</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>later<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>later<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    later<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>node<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>next<span class="token operator">=</span>later<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        later<span class="token operator">=</span>node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> later<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">Del_absrepeat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> repeated<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>res<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>cur<span class="token operator">=</span><span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">==</span>repeated<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//删除节点</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pre<span class="token operator">-></span>next<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment">//删除该节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>temp<span class="token operator">=</span>res<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp<span class="token operator">=</span>temp<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                temp<span class="token operator">-></span>next<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            repeated<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="学车费用">7-1 学车费用</h1><p>小明学开车后，才发现他的教练对不同的学员收取不同的费用。</p><p>小明想分别对他所了解到的学车同学的各项费用进行累加求出总费用，然后按下面的排序规则排序并输出，以便了解教练的收费情况。排序规则：</p><ul><li>先按总费用从多到少排序，若总费用相同则按姓名的ASCII码序从小到大排序，若总费用相同而且姓名也相同则按编号（即输入时的顺序号，从1开始编）从小到大排序。</li></ul><h2 id="输入格式">输入格式:</h2><p>测试数据有多组，处理到文件尾。每组测试数据先输入一个正整数<spanclass="math inline">\(n（n≤20）\)</span>，然后是<spanclass="math inline">\(n\)</span>行输入，第<spanclass="math inline">\(i\)</span>行先输入第<spanclass="math inline">\(i\)</span>个人的姓名（长度不超过10个字符，且只包含大小写英文字母），然后再输入若干个整数（不超过10个），表示第i个人的各项费用（都不超过13000），数据之间都以一个空格分隔，第i行输入的编号为<spanclass="math inline">\(i\)</span>。</p><h2 id="输出格式">输出格式:</h2><p>对于每组测试，在按描述中要求的排序规则进行排序后，按顺序逐行输出每个人费用情况，包括：费用排名（从1开始，若费用相同则排名也相同，否则排名为排序后的序号）、编号、姓名、总费用。每行输出的数据之间留1个空格。</p><h2 id="输入样例-5">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">3Tom 2800 900 2000 500 600Jack 3800 400 1500 300Tom 6700 1003Tom 2800 400 100Jack 3800 800mary 3300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-5">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 1 Tom 68001 3 Tom 68003 2 Jack 60001 2 Jack 46002 1 Tom 33002 3 mary 3300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-4">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>aa<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>bb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token operator">*</span><span class="token punctuation">)</span>aa<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token operator">*</span><span class="token punctuation">)</span>bb<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">-></span>cost <span class="token operator">==</span> b<span class="token operator">-></span>cost<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token operator">-></span>name<span class="token punctuation">,</span>b<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token operator">-></span>cost <span class="token operator">&lt;</span> b<span class="token operator">-></span>cost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> line<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token function">fgets</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">strtok</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> <span class="token operator">*</span>token<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>token<span class="token operator">=</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">" \n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum<span class="token operator">+=</span><span class="token function">atoi</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token operator">=</span>sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> pre_cost<span class="token operator">=</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">,</span>pre_rank<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>rank<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pre_cost<span class="token operator">==</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    rank<span class="token operator">=</span>pre_rank<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    rank<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    pre_rank<span class="token operator">=</span>rank<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %s %d\n"</span><span class="token punctuation">,</span>rank<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span>                pre_cost<span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="学生成绩录入及查询">7-2 学生成绩录入及查询</h1><p>学生成绩表中，一名学生的信息包含如下信息：</p><p><code>学号(11位)、姓名、数学成绩、英语成绩、程序设计成绩、物理成绩。</code></p><p>本题要求编写程序，录入N条学生的信息，并且按查询要求显示学生成绩等信息。</p><h2 id="输入格式-1">输入格式:</h2><p>输入在第一行给出正整数N(N&lt;=10)；随后N行，每行按格式：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">学号 姓名 数学成绩 英语成绩 程序设计成绩 物理成绩<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>给出一名学生的信息。</p><p>其中学号是11位数字；姓名是不超过10个字符、不包含空格的非空字符串；成绩是&lt;=100的非负整数；</p><p>在学生信息输入完成后，给出要查询的姓名。</p><h2 id="输出格式-1">输出格式:</h2><p>对查询的姓名的每一名学生，在一行中按照如下格式输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">学号  姓名 数学成绩 英语成绩 程序设计成绩 物理成绩<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果有相同姓名的同学，输出全部同学的信息，每名同学一行；如果要查询的学生不存在，则输出：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Not Found!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输入样例-6">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">420201003012 LiWen 68 90 78 8620201003012 HeHua 91 88 80 8220201002121 WangFang 78 78 82 9020201002112 ZhengYi 56 83 77 80ZhengYi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-6">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">20201002112 ZhengYi 56 83 77 80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-5">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> num<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>s3<span class="token punctuation">,</span>s4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s%d%d%d%d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s3<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s %d %d %d %d\n"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s1<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s2<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s3<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not Found!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="座位安排">7-3 座位安排</h1><p>在某次上机考试时，座位安排规则如下：</p><ul><li>先按考生姓名的字典序排列，若姓名相同则再按学号升序排序；在排好序之后依次从1号机位开始安排座位；</li><li>若某个机位的电脑损坏了，则原来安排在该位置上的考生从当前最后一位考生之后的机位开始重新安排。</li></ul><p>请根据输入的学生信息及电脑损坏的机位，安排好该次考试的学生座位。</p><h2 id="输入格式-2">输入格式:</h2><p>首先输入一个正整数T，表示测试数据的组数。对于每组测试数据，首先输入一个整数<span class="math inline">\(n(1&lt;n&lt;=80)\)</span>，表示考生数；然后输入<spanclass="math inline">\(n\)</span>行，每行包含2个以一个空格间隔的字符串，分别表示一个考生的学号（长度不超过10，且仅包含数字字符，可能以0开头）和姓名（长度不超过15，且仅包含英文字母）；最后输入一行整数，其中第一个整数<spanclass="math inline">\(m(1&lt;=m&lt;=20)\)</span>表示损坏电脑的数量，接着是<spanclass="math inline">\(m\)</span>个电脑损坏的机位（不超过<spanclass="math inline">\(n\)</span>）。</p><h2 id="输出格式-2">输出格式:</h2><p>对于每组测试，输出<spanclass="math inline">\(n+1\)</span>行，第1行是“Casei:”，其中i是该组测试的序号（从1开始），接着输出<spanclass="math inline">\(n\)</span>个座位安排信息“xxx:snosname”，其中xxx表示以3位整数表示的座位号（不足3位则左补0），sno、sname分别表示该座位上考生的学号和姓名。另外，要求每两组测试之间留一个空行。</p><h2 id="输入样例-7">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2501004 Zhangsan01002 Lisi01003 Wangwu01005 Zhaoliu01001 Lisi3 5 1 351004 Zhangsan1002 Lisi1003 Wangwu1005 Zhaoliu1001 Lisi1 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-7">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Case 1:002:01002 Lisi004:01004 Zhangsan006:01001 Lisi007:01003 Wangwu008:01005 ZhaoliuCase 2:001:1001 Lisi002:1002 Lisi003:1003 Wangwu004:1004 Zhangsan006:1005 Zhaoliu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="提示">提示:</h2><p>对于样例1</p><p>初始安排：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1号位：01001 Lisi2号位：01002 Lisi3号位：01003 Wangwu4号位：01004 Zhangsan5号位：01005 Zhaoliu损坏的电脑编号：1 3 5因1号电脑损坏，01001 Lisi排6号位因3号电脑损坏，01003 Wangwu排7号位因5号电脑损坏，01005 Zhaoliu排8号位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最终安排： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2号位：01002 Lisi4号位：01004 Zhangsan6号位：01001 Lisi7号位：01003 Wangwu8号位：01005 Zhaoliu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-6">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> num<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>aa<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>bb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span><span class="token punctuation">)</span>aa<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span><span class="token punctuation">)</span>bb<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token operator">-></span>name<span class="token punctuation">,</span>b<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token operator">-></span>num<span class="token punctuation">,</span>b<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token operator">-></span>name<span class="token punctuation">,</span>b<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>aa<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>bb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>aa<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>bb<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>a <span class="token operator">></span> <span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">,</span><span class="token keyword">int</span> b_size<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>seat<span class="token punctuation">,</span><span class="token keyword">int</span> seat_size<span class="token punctuation">,</span><span class="token keyword">int</span> stu_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>seat<span class="token operator">+</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>seat<span class="token operator">+</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// for(int i=0;i&lt;n;i++)&#123;</span>        <span class="token comment">//     printf("%s %s\n",stu[i].num,stu[i].name);</span>        <span class="token comment">// &#125;</span>        <span class="token keyword">int</span> m<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// for(int i=0;i&lt;m;i++)&#123;</span>        <span class="token comment">//     printf("%d ",b[i]);</span>        <span class="token comment">// &#125;</span>        <span class="token keyword">int</span> seat<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>seat<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>seat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            seat<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// int temp;</span>        <span class="token comment">// while((temp=check(b,m,seat,200,n))!=-1)&#123;</span>        <span class="token comment">//     seat[index++]=temp;</span>        <span class="token comment">// &#125;</span>        <span class="token keyword">int</span> tomove<span class="token punctuation">;</span>        tomove<span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>seat<span class="token punctuation">[</span>tomove<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            seat<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>seat<span class="token punctuation">[</span>tomove<span class="token punctuation">]</span><span class="token punctuation">;</span>            seat<span class="token punctuation">[</span>tomove<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>seat<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tomove<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tomove<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d:\n"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>seat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%03d:%s %s\n"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>seat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>seat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>T<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="单链表基本操作">7-4 单链表基本操作</h1><p>请编写程序实现单链表插入、删除结点等基本算法。给定一个单链表和一系列插入、删除结点的操作序列，输出实施上述操作后的链表。单链表数据域值为整数。</p><h2 id="输入格式-3">输入格式:</h2><p>输入第1行为1个正整数n，表示当前单链表长度；第2行为n个空格间隔的整数，为该链表n个元素的数据域值。第3行为1个正整数m，表示对该链表施加的操作数量；接下来m行，每行表示一个操作，为2个或3个整数，格式为0k d或1 k。0 kd表示在链表第k个结点后插入一个数据域值为d的结点，若k=0则表示表头插入。1k表示删除链表中第k个结点，此时k不能为0。注：操作序列中若含有不合法的操作（如在长度为5的链表中删除第8个结点、删除第0个结点等），则忽略该操作。n和m不超过100000。</p><h2 id="输出格式-3">输出格式:</h2><p>输出为一行整数，表示实施上述m个操作后的链表，每个整数后一个空格。输入数据保证结果链表不空。</p><h2 id="输入样例-8">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">51 2 3 4 550 2 80 9 60 0 71 0 1 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-8">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 1 2 8 3 5 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-7">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NL</span> <span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">Nodelist</span></span></span>NL<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    NL <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>op<span class="token punctuation">,</span>k<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    NL <span class="token operator">*</span>head<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head<span class="token operator">=</span><span class="token punctuation">(</span>NL<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        NL <span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">-></span>next<span class="token operator">=</span><span class="token punctuation">(</span>NL<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>cur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                NL <span class="token operator">*</span>node<span class="token operator">=</span><span class="token punctuation">(</span>NL<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-></span>data<span class="token operator">=</span>d<span class="token punctuation">;</span>                node<span class="token operator">-></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                head<span class="token operator">=</span>node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                NL <span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token punctuation">;</span>                <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    NL <span class="token operator">*</span>node<span class="token operator">=</span><span class="token punctuation">(</span>NL<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    node<span class="token operator">-></span>data<span class="token operator">=</span>d<span class="token punctuation">;</span>                    node<span class="token operator">-></span>next<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>                    cur<span class="token operator">-></span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                head<span class="token operator">=</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                NL <span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token punctuation">;</span>                <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur<span class="token operator">-></span>next<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    NL <span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>cur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="单链表基础应用4--单链表逆置">7-5单链表基础应用(4)--单链表逆置</h1><p>编程实现一个简易学生信息管理系统，按如下步骤分别用自定义函数实现：</p><ul><li><ol type="1"><li>根据输入信息创建单链表并输出所有结点信息。每个学生的信息包括姓名和成绩；</li></ol></li><li><ol start="2" type="1"><li>将上一步创建的单链表逆置后并输出所有结点信息。</li></ol></li></ul><h2 id="输入格式-4">输入格式:</h2><p>根据输入的若干个学生信息创建单链表。每一行代表一个学生信息，以成绩-1作为输入的结束。</p><h2 id="输出格式-4">输出格式:</h2><p>每个学生信息占一行，姓名和成绩之间以空格分隔，成绩保留一位小数。创建链表输出加提示信息：Original 逆置后输出加提示信息：Reversed</p><h2 id="输入样例-9">输入样例:</h2><p>在这里给出一组输入。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Wang 87.3Wang 60.1Wang 89.5Li 93.2Fu 87.5Wang 78.6Cheng 89.1Tang 71.9Wang 63.1Fang 81.9tt -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="输出样例-9">输出样例:</h2><p>在这里给出相应的输出。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Original:Wang 87.3Wang 60.1Wang 89.5Li 93.2Fu 87.5Wang 78.6Cheng 89.1Tang 71.9Wang 63.1Fang 81.9Reversed:Fang 81.9Wang 63.1Tang 71.9Cheng 89.1Wang 78.6Fu 87.5Li 93.2Wang 89.5Wang 60.1Wang 87.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-8">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> score<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">,</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Original:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nReversed:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | 指针相关题目及解析2</title>
    <link href="/2023/12/18/PTA-%E6%8C%87%E9%92%88%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%A7%A3%E6%9E%902/"/>
    <url>/2023/12/18/PTA-%E6%8C%87%E9%92%88%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%A7%A3%E6%9E%902/</url>
    
    <content type="html"><![CDATA[<h1 id="section">1-1</h1><p>设有下列语句，则（）是对a数组元素的不正确引用，其中<code>0≤i&lt;10</code>,<code>int a[10]=&#123;0,1,2,3,4,5,6,7,8,9&#125;, * p=a</code>;</p><p>A.<code>p[i]</code></p><p>B.<code>p=a[2]</code></p><p>C.<code>*(p+3)</code></p><p>D.<code>*(a+i)</code></p><h2 id="chatgpt">ChatGPT</h2><p>在这个问题中，我们需要识别哪个选项是对数组 <code>a</code>的元素进行了不正确的引用。首先，让我们逐一分析每个选项：</p><p>A. <code>p[i]</code> - 这是正确的。因为 <code>p</code> 是指向<code>a</code> 的指针，<code>p[i]</code> 相当于 <code>a[i]</code>。</p><p>B. <code>p = a[2]</code> - 这是不正确的。这里尝试将 <code>p</code>赋值为 <code>a[2]</code> 的值，而不是 <code>a[2]</code>的地址。<code>p</code> 应该指向数组中的一个地址，而 <code>a[2]</code>是一个 <code>int</code> 值。</p><p>C. <code>*(p+3)</code> - 这是正确的。<code>p+3</code> 是指向<code>a[3]</code> 的指针，<code>*(p+3)</code> 是访问该位置的值，即<code>a[3]</code>。</p><p>D. <code>*(a+i)</code> - 这也是正确的。这是数组 <code>a</code>的另一种标准引用方式，等价于 <code>a[i]</code>。</p><p>因此，选项（B）是对 <code>a</code> 数组元素的不正确引用。</p><h1 id="section-1">1-2</h1><p>若有说明：<code>int n=2,*p=&amp;n,*q=p</code>,则以下非法的赋值语句是:（ ）。</p><ol type="A"><li><p><code>p=q</code></p></li><li><p><code>*p=*q</code></p></li><li><p><code>n=*q</code></p></li><li><p><code>p=n</code></p></li></ol><h2 id="chatgpt-1">ChatGPT</h2><p>在这个问题中，我们需要找出哪个赋值语句是非法的。首先，让我们分析每个选项：</p><p>A. <code>p=q</code> - 这是合法的。因为 <code>p</code> 和<code>q</code> 都是指向 <code>int</code> 类型的指针，所以可以把<code>q</code> 的值（即指向的地址）赋给 <code>p</code>。</p><p>B. <code>*p=*q</code> - 这也是合法的。<code>*p</code> 和<code>*q</code> 都解引用为 <code>n</code> 的值，这个语句相当于将<code>n</code> 的值赋给自己。</p><p>C. <code>n=*q</code> - 这是合法的。<code>*q</code> 解引用为<code>n</code> 的值，这个语句是将 <code>n</code> 的值赋给 <code>n</code>自己。</p><p>D. <code>p=n</code> - 这是非法的。这里尝试将<code>n</code>（一个整数值）赋给<code>p</code>（一个指向整数的指针）。整数值不能直接赋给指针，因为它们是不兼容的类型。</p><p>因此，选项（D）是非法的赋值语句。</p><h1 id="section-2">1-3</h1><p>若有语句<code>int a[3][4];</code>，则与<code>*(a+1)+2</code>等价的是( )。</p><ol type="A"><li><p><code>a[1][2]</code></p></li><li><p><code>*a+3</code></p></li><li><p><code>&amp;a[1][2]</code></p></li><li><p><code>&amp;a[1]+2</code></p></li></ol><h2 id="chatgpt-2">ChatGPT</h2><p>为了理解这个问题，我们需要分析表达式 <code>*(a+1)+2</code>并找出与之等价的表达式。<code>a</code> 是一个 3x4的二维数组，<code>int a[3][4]</code>。</p><ul><li><code>*(a+1)</code>:<ul><li><code>a</code>是一个指向数组首元素的指针，在这里，数组的首元素是一个含有4个整数的一维数组。因此，<code>a</code>可以被视作指向 <code>int[4]</code> 类型的指针。</li><li><code>a+1</code> 移动到下一个 <code>int[4]</code> 数组，即<code>a</code> 数组的第二行。</li><li><code>*(a+1)</code> 解引用这个指针，得到第二行的首地址。</li></ul></li><li><code>*(a+1)+2</code>:<ul><li>加2意味着从第二行的首地址向前移动2个 <code>int</code> 元素。</li><li>因此，这个表达式指的是第二行（即<code>a[1]</code>）中的第三个元素（即 <code>[2]</code>）。</li></ul></li></ul><p>所以，<code>*(a+1)+2</code> 等价于访问<code>a[1][2]</code>。这是因为二维数组在内存中是连续存放的，且<code>a[1][2]</code> 正是第二行第三个元素的位置。</p><p>因此，答案是：</p><p>A. <code>a[1][2]</code></p><h1 id="section-3">1-4</h1><p>若有定义<code>int (*p)[4]</code>; 则标识符<code>p（ ）</code>。</p><ol type="A"><li><p>是一个指向整型变量的指针</p></li><li><p>是一个指针数组名</p></li><li><p>是一个指针，它指向一个含有四个整型元素的一维数组</p></li><li><p>定义不合法</p></li></ol><h2 id="chatgpt-3">ChatGPT</h2><p>在这个问题中，我们要分析 <code>int (*p)[4];</code>这个声明的含义。让我们来逐一解读每个选项：</p><ul><li>A. 是一个指向整型变量的指针<ul><li>这不正确。虽然 <code>p</code>是一个指针，但它不是指向单个整型变量的。而是指向一个整型数组的。</li></ul></li><li>B. 是一个指针数组名<ul><li>这也不正确。<code>p</code>不是一个指针数组，而是单个指针。指针数组会有形式如<code>int* arr[10];</code>，表明 <code>arr</code> 是一个包含10个指向<code>int</code> 的指针的数组。</li></ul></li><li>C. 是一个指针，它指向一个含有四个整型元素的一维数组<ul><li>这是正确的。<code>int (*p)[4];</code> 表示 <code>p</code>是一个指针，指向一个具有四个整数的数组。这里的括号非常重要，它指出<code>p</code>是指向一个整个数组的指针，而不是指向一个单独整数的指针。</li></ul></li><li>D. 定义不合法<ul><li>这不正确。<code>int (*p)[4];</code> 是完全合法且有意义的声明。</li></ul></li></ul><p>因此，正确答案是 C.是一个指针，它指向一个含有四个整型元素的一维数组。</p><h1 id="section-4">1-5</h1><p>若有定义<code>int n=0,*p=&amp;n,**q=&amp;p;</code>则以下选项中，正确的赋值语句是（）。</p><ol type="A"><li><p><code>p=1;</code></p></li><li><p><code>*q=2;</code></p></li><li><p><code>q=p;</code></p></li><li><p><code>*p=5;</code></p></li></ol><h2 id="chatgpt-4">ChatGPT</h2><p>为了找出正确的赋值语句，我们首先需要理解变量<code>n</code>、<code>p</code> 和 <code>q</code> 的定义。</p><ul><li><code>n</code> 是一个整型变量，初始化为 <code>0</code>。</li><li><code>p</code> 是一个指向整型的指针，初始化为指向<code>n</code>。</li><li><code>q</code> 是一个指向指针的指针（双重指针），初始化为指向<code>p</code>。</li></ul><p>现在，让我们逐个分析每个选项：</p><p>A. <code>p=1;</code> - 这是不正确的。<code>p</code>是一个指针，不能直接赋值为整数。应该赋值为指向整型的地址。</p><p>B. <code>*q=2;</code> - 这也是不正确的。<code>q</code> 是指向<code>p</code> 的指针，所以 <code>*q</code> 是<code>p</code>。<code>p</code> 作为一个指针不能直接赋值为整数<code>2</code>。如果是 <code>**q = 2;</code> 则是正确的，因为它相当于<code>*p = 2;</code>，即改变 <code>n</code> 的值。</p><p>C. <code>q=p;</code> - 这也是不正确的。<code>q</code>是一个指向指针的指针，而 <code>p</code>是一个指向整数的指针。二者类型不匹配，不能直接赋值。</p><p>D. <code>*p=5;</code> - 这是正确的。<code>*p</code> 是解引用<code>p</code>，也就是 <code>n</code> 的别名。这个语句将 <code>5</code>赋值给 <code>n</code>。</p><p>因此，正确的赋值语句是 D. <code>*p=5;</code>。</p><h1 id="section-5">1-6</h1><p>设有如下定义<code>char * aa[2]=&#123;"abcd", "ABCD"&#125;;</code>,则以下说法中正确的是()。</p><ol type="A"><li><p>aa数组的元素的值分别是字符串" abcd"和"ABCD"的内容</p></li><li><p>aa是指针变量, 它指向含有两个数组元素的字符型一维数组</p></li><li><p>aa数组的两个元素分别存放的是字符串的首地址</p></li><li><p>aa数组的两个元素中各自存放了字符"a"和"A"</p></li></ol><h2 id="chatgpt-5">ChatGPT</h2><p>为了理解这个声明<code>char * aa[2] = &#123;"abcd", "ABCD"&#125;;</code>，我们需要分析每个选项：</p><p>A. aa数组的元素的值分别是字符串 "abcd" 和 "ABCD" 的内容 -这是不正确的。<code>aa</code> 数组的元素实际上是指针，它们指向字符串常量"abcd" 和 "ABCD" 的首地址，而不是直接存储这些字符串的内容。</p><p>B. aa是指针变量，它指向含有两个数组元素的字符型一维数组 -这也是不正确的。<code>aa</code>不是单个指针变量，而是一个数组，它包含了两个指针。每个指针分别指向一个字符数组（字符串）。</p><p>C. aa数组的两个元素分别存放的是字符串的首地址 -这是正确的。<code>aa</code> 是一个指针数组，其两个元素<code>aa[0]</code> 和 <code>aa[1]</code> 分别存储了两个字符串 "abcd" 和"ABCD" 的首地址。</p><p>D. aa数组的两个元素中各自存放了字符 "a" 和 "A" -这是不正确的。如前所述，<code>aa</code>数组存放的是指向字符串的指针，而不是单个字符。</p><p>因此，正确的答案是 C.aa数组的两个元素分别存放的是字符串的首地址。</p><h1 id="section-6">1-7</h1><p>若有下面的程序片段, 则以下选项中对数组元素的错误引用的是()。<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">*</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span> pp<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> pp <span class="token operator">=</span>p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></p><ol type="A"><li><p><code>pp[0][1]</code></p></li><li><p><code>a[10]</code></p></li><li><p><code>p[3][1]</code></p></li><li><p><code>((p+2)+2)</code></p></li></ol><h2 id="chatgpt-6">ChatGPT</h2><p>为了找出对数组元素的错误引用，我们需要先理解这段代码的含义和各个变量的作用。</p><ol type="1"><li><code>int a[12] =&#123;0&#125;</code>:这是一个大小为12的整型数组，所有元素初始化为0。</li><li><code>*p[3]</code>: 这是一个大小为3的指针数组，每个元素是指向<code>int</code> 的指针。</li><li><code>**pp</code>: 这是一个指向指针的指针。</li><li><code>for(i = 0; i &lt; 3; i++) p[i] = &amp;a[i*4];</code>:这个循环将 <code>p</code> 数组的每个元素指向 <code>a</code>数组中每4个元素的起始地址。即 <code>p[0]</code> 指向<code>a[0]</code>，<code>p[1]</code> 指向<code>a[4]</code>，<code>p[2]</code> 指向 <code>a[8]</code>。</li><li><code>pp = p;</code>: 这将 <code>pp</code> 指向 <code>p</code>数组的首地址。</li></ol><p>现在，让我们检查每个选项：</p><p>A. <code>pp[0][1]</code> - 这是合法的。<code>pp[0]</code> 相当于<code>p[0]</code>，指向 <code>a[0]</code>。<code>pp[0][1]</code> 相当于<code>a[1]</code>。</p><p>B. <code>a[10]</code> - 这是合法的。<code>a</code>是一个有12个元素的数组，<code>a[10]</code> 是第11个元素。</p><p>C. <code>p[3][1]</code> - 这是非法的。<code>p</code>是一个有3个元素的指针数组，有效索引范围是0到2。<code>p[3]</code>超出了其界限，是未定义的。</p><p>D. <code>((p+2)+2)</code> - 这是不合法的。首先，<code>p+2</code>是合法的，指向 <code>p[2]</code>。但 <code>((p+2)+2)</code>试图再次偏移这个指针，结果是一个指向 <code>p</code>数组之外的位置，这在这个上下文中没有意义。</p><p>因此，正确答案是 C. <code>p[3][1]</code>。</p><h1 id="section-7">1-8</h1><p>下列程序段的输出是____。 <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>k<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></p><ol type="A"><li><p>3</p></li><li><p>4</p></li><li><p>5</p></li><li><p>6</p></li></ol><h1 id="section-8">1-9</h1><p>对于如下说明，语法和语义都正确的赋值是_____。</p><p><code>int c, *s, a[]=&#123;1, 3, 5&#125;;</code></p><ol type="A"><li><p><code>c=*s;</code></p></li><li><p><code>s[0]=a[0];</code></p></li><li><p><code>s=&amp;a[1];</code></p></li><li><p><code>c=a;</code></p></li></ol><h2 id="chatgpt-7">ChatGPT</h2><p>为了确定哪个赋值语句是在给定的上下文中既语法上正确又语义上正确，我们需要分析每个选项：</p><ol type="1"><li><code>c=*s;</code><ul><li>这个语句在语法上是正确的，但在语义上可能不正确。因为 <code>s</code>是一个指针，但在这个代码片段中，我们没有看到 <code>s</code>被初始化或指向某个具体的地址。如果 <code>s</code>没有初始化，那么尝试解引用它 (<code>*s</code>) 将导致未定义的行为。</li></ul></li><li><code>s[0]=a[0];</code><ul><li>这个语句在语法上是正确的，但在语义上同样可能不正确。这里假设<code>s</code> 是指向某个整数的指针，因此 <code>s[0]</code>是合法的。但是，因为 <code>s</code>没有被初始化指向一个具体的地址，这可能导致错误。</li></ul></li><li><code>s=&amp;a[1];</code><ul><li>这是语法和语义上都正确的。这里 <code>s</code> 被赋值为指向数组<code>a</code> 的第二个元素的地址。在 C语言中，数组元素的地址可以赋给指针，所以这个语句是有效的。</li></ul></li><li><code>c=a;</code><ul><li>这在语法上是错误的。<code>a</code>是一个数组名，它在大多数上下文中表示数组的首地址，而 <code>c</code>是一个整数。不能将数组地址赋值给一个整数变量。</li></ul></li></ol><p>综上所述，正确的选项是 C.<code>s=&amp;a[1];</code>。这是唯一一个在给定上下文中既语法上正确又语义上正确的赋值语句。</p><h1 id="section-9">1-10</h1><p>函数调用程序如下： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>相关说法错误的是：</p><ol type="A"><li><p>f函数头改为<code>int f(int *a, int n)</code>，无需其它改变，效果完全一样。</p></li><li><p>main函数中增加 <code>int *p=a;</code> 将<code>f(a,n);改为f(p,n);</code>，效果完全一样。</p></li><li><p>用数组名作f()的参数，则main()中的数组与f()中的数组是同一数组。</p></li><li><p>用数组名作f()的参数，实现了实参与形参双向的值传递。</p></li></ol><h2 id="chatgpt-8">ChatGPT</h2><p>为了评估这些关于函数调用的说法，我们需要仔细分析每一个选项：</p><p>A. f函数头改为int f(int *a, int n)，无需其它改变，效果完全一样。 -这是正确的。在 C语言中，当数组作为参数传递给函数时，它实际上是以指针的形式传递的。因此，不管是使用<code>int a[]</code> 还是<code>int *a</code>，效果是一样的，因为在这个上下文中，它们都是指向数组首元素的指针。</p><p>B. main函数中增加 int *p=a; 将 f(a,n); 改为 f(p,n);，效果完全一样。 -这也是正确的。由于 <code>p</code> 是指向 <code>a</code>的首元素的指针，传递 <code>p</code> 给 <code>f</code> 函数与直接传递数组<code>a</code> 是等效的。</p><p>C. 用数组名作 f() 的参数，则 main() 中的数组与 f()中的数组是同一数组。 - 这是正确的。在 C语言中，数组参数是通过指针传递的，所以在 <code>f</code>函数中对数组的修改会反映在 <code>main</code> 函数中的同一个数组上。</p><p>D. 用数组名作 f() 的参数，实现了实参与形参双向的值传递。 -这是错误的。虽然数组的修改在函数间是可见的，这是由于数组名作为参数传递的是地址，而不是值的副本。因此，这不是双向的值传递。实际上，这是通过引用（或地址）传递实现的，其中形参指向实参的同一内存地址。</p><p>因此，错误的说法是 D. 用数组名作 f()的参数，实现了实参与形参双向的值传递。</p><h1 id="section-10">2-1</h1><p>在主函数中输入N个字符串，调用func()函数用选择排序算法对他们进行升序排序，然后输出已经排好序的字符串。要求使用指针数组进行处理。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>pStr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">func</span><span class="token punctuation">(</span>pStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出排序后的结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span>pStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">char</span> <span class="token operator">*</span>temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>min<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>           min<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>              min<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">!=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             temp<span class="token operator">=</span>str<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            str<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="求定积分通用函数">2-2 求定积分通用函数</h1><p>下述程序用于求解上述定积分。 【问题分析】根据数学知识，求定积分的问题实际上就是求函数f(x)当x在区间[a,b]时由x=a、x=b、y=0和y=f(x)围成的曲边四边形的面积。使用计算机解决这类问题的常用方法有矩形法、梯形法、辛普生法等。以梯形法为例，求定积分有如下几个步骤，如图1所示。</p><ul><li><ol type="1"><li>将区间[a,b]划分为若干等分，等分数取决于要求的精度；</li></ol></li><li><ol start="2" type="1"><li>计算出所有等分点的函数值f(xi)；</li></ol></li><li><ol start="3" type="1"><li>连接相邻两个等分点的函数值，将所求曲边四边形区域用若干个小的梯形代替。此时相邻两等分点函数值之间的曲线和连接的直线之间的区域即为误差；</li></ol></li><li><ol start="4" type="1"><li>按平面几何公式求出所有小梯形的面积，然后求和得到曲边四边形面积的近似值。当积分区间的等分数趋近于无穷等分时，梯形面积之和无限趋近于真实的积分值。注意用计算机求解时只能求出满足精度要求的近似值。</li></ol></li></ul><p>请将下述程序补充完整，使其可以正常运行。提示：<code>integrate()</code>的第1个参数应为函数指针，代表了被积分的函数；<code>a,b</code>分别为积分下界及上界，<code>N</code>为细分数。<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">integrate</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> h <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">/</span>N<span class="token punctuation">;</span>    <span class="token keyword">double</span> area <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        area <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> area<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"integrate(f1,0,2,100)=%.2f\n"</span><span class="token punctuation">,</span><span class="token function">integrate</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"integrate(f2,-1,1,100)=%.2f\n"</span><span class="token punctuation">,</span><span class="token function">integrate</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>【提示】 程序的执行结果应为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">integrate(f1,0,2,100)&#x3D;4.00integrate(f2,-1,1,100)&#x3D;1.11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Inner PK 7</title>
    <link href="/2023/12/17/ACM-Inner-PK-7/"/>
    <url>/2023/12/17/ACM-Inner-PK-7/</url>
    
    <content type="html"><![CDATA[<h1 id="l1-1-最好的文档">L1-1 最好的文档</h1><p>有一位软件工程师说过一句很有道理的话：“Good code is its own bestdocumentation.”（好代码本身就是最好的文档）。本题就请你直接在屏幕上输出这句话。</p><h2 id="输入格式">输入格式：</h2><p>本题没有输入。</p><h2 id="输出格式">输出格式：</h2><p>在一行中输出 Good code is its own best documentation.。</p><h2 id="输入样例">输入样例：</h2><p>无 ## 输出样例： Good code is its own best documentation.</p><h2 id="code">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Good code is its own best documentation."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-2-什么是机器学习">L1-2 什么是机器学习</h1><p>什么是机器学习？上图展示了一段面试官与“机器学习程序”的对话：</p><blockquote><p>面试官：9 + 10 等于多少？</p><p>答：3</p><p>面试官：差远了，是19。</p><p>答：16</p><p>面试官：错了，是19。</p><p>答：18</p><p>面试官：不，是19。</p><p>答：19</p></blockquote><p>本题就请你模仿这个“机器学习程序”的行为。</p><h2 id="输入格式-1">输入格式：</h2><p>输入在一行中给出两个整数，绝对值都不超过100，中间用一个空格分开，分别表示面试官给出的两个数字 A 和 B。</p><h2 id="输出格式-1">输出格式：</h2><p>要求你输出 4 行，每行一个数字。第 1 行比正确结果少 16，第 2 行少3，第 3 行少 1，最后一行才输出 A+B 的正确结果。</p><h2 id="输入样例-1">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">9 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">3161819<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-1">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">+</span>b<span class="token operator">-</span><span class="token number">16</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">+</span>b<span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">+</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">+</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-3-程序员买包子">L1-3 程序员买包子</h1><p>这是一条检测真正程序员的段子：假如你被家人要求下班顺路买十只包子，如果看到卖西瓜的，买一只。那么你会在什么情况下只买一只包子回家？本题要求你考虑这个段子的通用版：假如你被要求下班顺路买 <spanclass="math inline">\(N\)</span> 只包子，如果看到卖 <spanclass="math inline">\(X\)</span> 的，买 <spanclass="math inline">\(M\)</span> 只。那么如果你最后买了 <spanclass="math inline">\(K\)</span> 只包子回家，说明你看到卖 <spanclass="math inline">\(X\)</span> 的没有呢？</p><h2 id="输入格式-2">输入格式：</h2><p>输入在一行中顺序给出题面中的 <spanclass="math inline">\(N、X、M、K\)</span>，以空格分隔。其中 <spanclass="math inline">\(N、M\)</span> 和 <spanclass="math inline">\(K\)</span> 为不超过 1000 的正整数，<spanclass="math inline">\(X\)</span> 是一个长度不超过 10的、仅由小写英文字母组成的字符串。题目保证 <spanclass="math inline">\(N!=M\)</span>。</p><h2 id="输出格式-2">输出格式：</h2><p>在一行中输出结论，格式为：</p><ul><li>如果 <span class="math inline">\(K=N\)</span>，输出<code>mei you mai X de</code>；</li><li>如果 <span class="math inline">\(K=M\)</span>，输出<code>kan dao le mai X de</code>；</li><li>否则输出 <code>wang le zhao mai X de</code>.其中 <code>X</code>是输入中给定的字符串 <span class="math inline">\(X\)</span>。</li></ul><h2 id="输入样例-1-1">输入样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 xigua 1 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mei you mai xigua de<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输入样例-2">输入样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 huanggua 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例-2">输出样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">kan dao le mai huanggua de<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输入样例-3">输入样例 3：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 shagua 1 250<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例-3">输出样例 3：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">wang le zhao mai shagua de<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-2">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    string x<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>x<span class="token operator">>></span>m<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"mei you mai "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" de"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"kan dao le mai "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" de"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"wang le zhao mai "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" de"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-4-进化论">L1-4 进化论</h1><p>在“一年一度喜剧大赛”上有一部作品《进化论》，讲的是动物园两只猩猩进化的故事。猩猩吕严说自己已经进化了9 年了，因为“三年又三年”。猩猩土豆指出“三年又三年是六年呐”……本题给定两个数字，以及用这两个数字计算的结果，要求你根据结果判断，这是吕严算出来的，还是土豆算出来的。</p><h2 id="输入格式-3">输入格式：</h2><p>输入第一行给出一个正整数 <span class="math inline">\(N\)</span>，随后<span class="math inline">\(N\)</span> 行，每行给出三个正整数 <spanclass="math inline">\(A、B\)</span> 和 <spanclass="math inline">\(C\)</span>。其中 <spanclass="math inline">\(C\)</span> 不超过 <spanclass="math inline">\(10000\)</span>，其他三个数字都不超过 <spanclass="math inline">\(100\)</span>。</p><h2 id="输出格式-3">输出格式：</h2><p>对每一行给出的三个数，如果 <span class="math inline">\(C\)</span> 是<span class="math inline">\(A×B\)</span>，就在一行中输出<code>Lv Yan</code>；如果是 <spanclass="math inline">\(A+B\)</span>，就在一行中输出<code>Tu Dou</code>；如果都不是，就在一行中输出<code>zhe du shi sha ya!</code>。</p><h2 id="输入样例-4">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">33 3 93 3 63 3 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-4">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Lv YanTu Douzhe du shi sha ya!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-3">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Lv Yan"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Tu Dou"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"zhe du shi sha ya!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-5-猜帽子游戏">L1-5 猜帽子游戏</h1><p>宝宝们在一起玩一个猜帽子游戏。每人头上被扣了一顶帽子，有的是黑色的，有的是黄色的。每个人可以看到别人头上的帽子，但是看不到自己的。游戏开始后，每个人可以猜自己头上的帽子是什么颜色，或者可以弃权不猜。如果没有一个人猜错、并且至少有一个人猜对了，那么所有的宝宝共同获得一个大奖。如果所有人都不猜，或者只要有一个人猜错了，所有宝宝就都没有奖。下面顺序给出一排帽子的颜色，假设每一群宝宝来玩的时候，都是按照这个顺序发帽子的。然后给出每一群宝宝们猜的结果，请你判断他们能不能得大奖。</p><h2 id="输入格式-4">输入格式：</h2><p>输入首先在一行中给出一个正整数 <spanclass="math inline">\(N（2&lt;N≤100）\)</span>，是帽子的个数。第二行给出<span class="math inline">\(N\)</span> 顶帽子的颜色，数字 <code>1</code>表示黑色，<code>2</code> 表示黄色。 再下面给出一个正整数 <spanclass="math inline">\(K（≤10）\)</span>，随后 <spanclass="math inline">\(K\)</span>行，每行给出一群宝宝们猜的结果，除了仍然用数字 <code>1</code>表示黑色、<code>2</code> 表示黄色之外，<code>0</code>表示这个宝宝弃权不猜。 同一行中的数字用空格分隔。</p><h2 id="输出格式-4">输出格式：</h2><p>对于每一群玩游戏的宝宝，如果他们能获得大奖，就在一行中输出<code>Da Jiang!!!</code>，否则输出 <code>Ai Ya</code>。</p><h2 id="输入样例-5">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">51 1 2 1 230 1 2 0 00 0 0 0 01 2 2 0 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-5">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Da Jiang!!!Ai YaAi Ya<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-4">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> hat<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">int</span> test<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Ai Ya"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Ai Ya\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Da Jiang!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-6-剪切粘贴">L1-6 剪切粘贴</h1><p>分数 15 作者 DAI, Longao 单位 杭州百腾教育科技有限公司使用计算机进行文本编辑时常见的功能是剪切功能（快捷键：Ctrl +X）。请实现一个简单的具有剪切和粘贴功能的文本编辑工具。</p><p>工具需要完成一系列剪切后粘贴的操作，每次操作分为两步：</p><ul><li>剪切：给定需操作的起始位置和结束位置，将当前字符串中起始位置到结束位置部分的字符串放入剪贴板中，并删除当前字符串对应位置的内容。例如，当前字符串为<code>abcdefg</code>，起始位置为 <code>3</code>，结束位置为<code>5</code>，则剪贴操作后， 剪贴板内容为<code>cde</code>，操作后字符串变为 <code>abfg</code>。字符串位置从<code>1</code> 开始编号。</li><li>粘贴：给定插入位置的前后字符串，寻找到插入位置，将剪贴板内容插入到位置中，并清除剪贴板内容。例如，对于上面操作后的结果，给定插入位置前为<code>bf</code>，插入位置后为 <code>g</code>，则插入后变为<code>abfcdeg</code>。如找不到应该插入的位置，则直接将插入位置设置为字符串最后，仍然完成插入操作。查找字符串时区分大小写。每次操作后的字符串即为新的当前字符串。在若干次操作后，请给出最后的编辑结果。</li></ul><h2 id="输入格式-5">输入格式:</h2><p>输入第一行是一个长度小于等于 200 的字符串 <spanclass="math inline">\(S\)</span>，表示原始字符串。字符串只包含所有可见ASCII 字符，不包含回车与空格。</p><p>第二行是一个正整数 <span class="math inline">\(N(1≤N≤100)\)</span>，表示要进行的操作次数。</p><p>接下来的 <span class="math inline">\(N\)</span>行，每行是两个数字和两个 <strong>长度不大于 5 </strong>的不包含空格的非空字符串，前两个数字表示需要剪切的位置，后两个字符串表示插入位置前和后的字符串，用一个空格隔开。如果有多个可插入的位置，选择最靠近当前操作字符串开头的一个。</p><p>剪切的位置保证总是合法的。</p><h2 id="输出格式-5">输出格式:</h2><p>输出一行，表示操作后的字符串。</p><h2 id="输入样例-6">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">AcrosstheGreatWall,wecanreacheverycornerintheworld510 18 ery cor32 40 , we1 6 tW all14 18 rnerr eache1 1 e r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-6">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">he,allcornetrrwecaneacheveryGreatWintheworldAcross<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-5">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cutAndPaste</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> cutStart<span class="token punctuation">,</span><span class="token keyword">int</span> cutEnd<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> before<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> after<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string clipboard<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>cutStart<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>cutEnd<span class="token operator">-</span>cutStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>cutStart<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>cutEnd<span class="token operator">-</span>cutStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t pos<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>before<span class="token operator">+</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">!=</span>string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token operator">+</span>before<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>clipboard<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        str<span class="token operator">+=</span>clipboard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start<span class="token punctuation">,</span>end<span class="token punctuation">;</span>        string before<span class="token punctuation">,</span>after<span class="token punctuation">;</span>        cin<span class="token operator">>></span>start<span class="token operator">>></span>end<span class="token operator">>></span>before<span class="token operator">>></span>after<span class="token punctuation">;</span>        <span class="token function">cutAndPaste</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">,</span>before<span class="token punctuation">,</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-7-分寝室">L1-7 分寝室</h1><p>学校新建了宿舍楼，共有 <span class="math inline">\(n\)</span>间寝室。等待分配的学生中，有女生 <spanclass="math inline">\(n_0\)</span> 位、男生 <spanclass="math inline">\(n_1\)</span>位。所有待分配的学生都必须分到一间寝室。所有的寝室都要分出去，最后不能有寝室留空。现请你写程序完成寝室的自动分配。分配规则如下：</p><ul><li>男女生不能混住；</li><li>不允许单人住一间寝室；</li><li>对每种性别的学生，每间寝室入住的人数都必须相同；例如不能出现一部分寝室住2 位女生，一部分寝室住 3 位女生的情况。但女生寝室都是 2人一间，男生寝室都是 3 人一间，则是允许的；</li><li>在有多种分配方案满足前面三项要求的情况下，要求两种性别每间寝室入住的人数差最小。</li></ul><h2 id="输入格式-6">输入格式：</h2><p>输入在一行中给出 3 个正整数 <spanclass="math inline">\(n_0、n_1、n\)</span>，分别对应女生人数、男生人数、寝室数。数字间以空格分隔，均不超过<span class="math inline">\(10^5\)</span>。</p><h2 id="输出格式-6">输出格式：</h2><p>在一行中顺序输出女生和男生被分配的寝室数量，其间以 1个空格分隔。行首尾不得有多余空格。</p><p>如果有解，题目保证解是唯一的。如果无解，则在一行中输出<code>No Solution</code>。</p><h2 id="输入样例-1-2">输入样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">24 60 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例-1-1">输出样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意：输出的方案对应女生都是 24/4=6 人间、男生都是 60/6=10人间，人数差为 4。满足前三项要求的分配方案还有两种，即女生 6 间（都是 4人间）、男生 4 间（都是 15 人间）；或女生 8 间（都是 3 人间）、男生 2间（都是 30 人间）。但因为人数差都大于 4 而不被采用。</p><h2 id="输入样例-2-1">输入样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">29 30 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例-2-1">输出样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">No Solution<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-6">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">>></span>g<span class="token operator">>></span>b<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans1<span class="token punctuation">,</span>ans2<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">%</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>g<span class="token operator">/</span>i <span class="token operator">-</span> b<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>max <span class="token operator">&amp;&amp;</span> g<span class="token operator">!=</span>i <span class="token operator">&amp;&amp;</span> b<span class="token operator">!=</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                ans1<span class="token operator">=</span>i<span class="token punctuation">;</span>                ans2<span class="token operator">=</span>n<span class="token operator">-</span>i<span class="token punctuation">;</span>                max<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>g<span class="token operator">/</span>i <span class="token operator">-</span> b<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>ans1<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"No Solution"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-8-谁管谁叫爹">L1-8 谁管谁叫爹</h1><p>《咱俩谁管谁叫爹》是网上一首搞笑饶舌歌曲，来源于东北酒桌上的助兴游戏。现在我们把这个游戏的难度拔高一点，多耗一些智商。不妨设游戏中的两个人为 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span>。游戏开始后，两人同时报出两个整数 <spanclass="math inline">\(N_A\)</span>和 <spanclass="math inline">\(N_B\)</span>。判断谁是爹的标准如下：</p><p>将两个整数的各位数字分别相加，得到两个和 <spanclass="math inline">\(S_A\)</span> 和 <spanclass="math inline">\(S_B\)</span> 。如果 <spanclass="math inline">\(N_A\)</span> 正好是 <spanclass="math inline">\(S_B\)</span> 的整数倍，则 <spanclass="math inline">\(A\)</span> 是爹；如果 <spanclass="math inline">\(N_B\)</span> 正好是 <spanclass="math inline">\(S_A\)</span>的整数倍，则 <spanclass="math inline">\(B\)</span> 是爹；如果两人同时满足、或同时不满足上述判定条件，则原始数字大的那个是爹。本题就请你写一个自动裁判程序，判定谁是爹。</p><h2 id="输入格式-7">输入格式：</h2><p>输入第一行给出一个正整数 <spanclass="math inline">\(N（≤100）\)</span>，为游戏的次数。以下 <spanclass="math inline">\(N\)</span> 行，每行给出一对不超过 9位数的正整数，对应 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span>给出的原始数字。题目保证两个数字不相等。</p><h2 id="输出格式-7">输出格式：</h2><p>对每一轮游戏，在一行中给出赢得“爹”称号的玩家（<spanclass="math inline">\(A\)</span>或 <spanclass="math inline">\(B\)</span> ）。</p><h2 id="输入样例-7">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4999999999 89178250 3859267537 526542996666 120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-7">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">BABA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-7">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> na<span class="token punctuation">,</span>nb<span class="token punctuation">;</span>        cin<span class="token operator">>></span>na<span class="token operator">>></span>nb<span class="token punctuation">;</span>        <span class="token keyword">int</span> t1<span class="token operator">=</span>na<span class="token punctuation">,</span>t2<span class="token operator">=</span>nb<span class="token punctuation">;</span>        <span class="token keyword">int</span> sa<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sb<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t1<span class="token operator">></span><span class="token number">0</span> <span class="token operator">||</span> t2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sa<span class="token operator">+=</span>t1<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            t1<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>            sb<span class="token operator">+=</span>t2<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            t2<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>na<span class="token operator">%</span>sb<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nb<span class="token operator">%</span>sa<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>na<span class="token operator">%</span>sb<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nb<span class="token operator">%</span>sa<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>na<span class="token operator">></span>nb<span class="token punctuation">)</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">"A"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"B"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>na<span class="token operator">%</span>sb<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"A"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"B"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-1-堆宝塔">L2-1 堆宝塔</h1><p>堆宝塔游戏是让小朋友根据抓到的彩虹圈的直径大小，按照从大到小的顺序堆起宝塔。但彩虹圈不一定是按照直径的大小顺序抓到的。聪明宝宝采取的策略如下：</p><ul><li>首先准备两根柱子，一根 A 柱串宝塔，一根 B 柱用于临时叠放。</li><li>把第 1 块彩虹圈作为第 1 座宝塔的基座，在 A 柱放好。</li><li>将抓到的下一块彩虹圈 C 跟当前 A柱宝塔最上面的彩虹圈比一下，如果比最上面的小，就直接放上去；否则把 C 跟B 柱最上面的彩虹圈比一下：</li><li><ul><li>如果 B 柱是空的、或者 C 大，就在 B 柱上放好；</li></ul></li><li><ul><li>否则把 A 柱上串好的宝塔取下来作为一件成品；然后把 B 柱上所有比 C大的彩虹圈逐一取下放到 A 柱上，最后把 C 也放到 A 柱上。重复此步骤，直到所有的彩虹圈都被抓完。最后 A柱上剩下的宝塔作为一件成品，B柱上剩下的彩虹圈被逐一取下，堆成另一座宝塔。问：宝宝一共堆出了几个宝塔？最高的宝塔有多少层？</li></ul></li></ul><h2 id="输入格式-8">输入格式：</h2><p>输入第一行给出一个正整数 <spanclass="math inline">\(N（≤10^3）\)</span>，为彩虹圈的个数。第二行按照宝宝抓取的顺序给出<span class="math inline">\(N\)</span> 个不超过 100的正整数，对应每个彩虹圈的直径。</p><h2 id="输出格式-8">输出格式：</h2><p>在一行中输出宝宝堆出的宝塔个数，和最高的宝塔的层数。数字间以 1个空格分隔，行首尾不得有多余空格。</p><h2 id="输入样例-8">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1110 8 9 5 12 11 4 3 1 9 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-8">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="样例解释">样例解释：</h2><p>宝宝堆成的宝塔顺次为： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10、8、512、11、4、3、1915、9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-8">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> tower<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sta1<span class="token punctuation">,</span>sta2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sta1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//可以放A柱</span>            sta1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>sta1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//可以放A柱</span>            sta1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sta2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//可以放B柱</span>            sta2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sta2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sta2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#123;</span><span class="token comment">//把A柱清空</span>            tower<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sta1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                high<span class="token operator">=</span>sta1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sta1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>sta2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    sta1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sta2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sta2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//剩余的两个柱子</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sta1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        high<span class="token operator">=</span>sta1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sta2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        high<span class="token operator">=</span>sta2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>tower<span class="token operator">+</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>high<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-3-锦标赛">L2-3 锦标赛</h1><p>有 <span class="math inline">\(2^k\)</span>名选手将要参加一场锦标赛。锦标赛共有 k 轮，其中第 i 轮的比赛共有 <spanclass="math inline">\(2^{k−i}\)</span>场，每场比赛恰有两名选手参加并从中产生一名胜者。每场比赛的安排如下：</p><ul><li>对于第 <span class="math inline">\(1\)</span> 轮的第 <spanclass="math inline">\(j\)</span> 场比赛，由第 <spanclass="math inline">\((2j−1)\)</span> 名选手对抗第 <spanclass="math inline">\(2j\)</span> 名选手。</li><li>对于第 <span class="math inline">\(i\)</span> 轮的第 <spanclass="math inline">\(j\)</span> 场比赛 <spanclass="math inline">\(（i&gt;1）\)</span>，由第 <spanclass="math inline">\((i−1)\)</span> 轮第 <spanclass="math inline">\((2j−1)\)</span> 场比赛的胜者对抗第 <spanclass="math inline">\((i−1)\)</span> 轮第 <spanclass="math inline">\(2j\)</span> 场比赛的胜者。</li><li>第 <span class="math inline">\(k\)</span>轮唯一一场比赛的胜者就是整个锦标赛的最终胜者。</li></ul><p>举个例子，假如共有 <span class="math inline">\(8\)</span>名选手参加锦标赛，则比赛的安排如下：</p><ul><li>第 1 轮共 4 场比赛：选手 1 vs 选手 2，选手 3 vs 选手 4，选手 5 vs选手 6，选手 7 vs 选手 8。</li><li>第 2 轮共 2 场比赛：第 1 轮第 1 场的胜者 vs 第 1 轮第 2 场的胜者，第1 轮第 3 场的胜者 vs 第 1 轮第 4 场的胜者。</li><li>第 3 轮共 1 场比赛：第 2 轮第 1 场的胜者 vs 第 2 轮第 2场的胜者。</li></ul><p>已知每一名选手都有一个能力值，其中第 <spanclass="math inline">\(i\)</span> 名选手的能力值为 <spanclass="math inline">\(a_i\)</span>。在一场比赛中，若两名选手的能力值不同，则能力值较大的选手一定会打败能力值较小的选手；若两名选手的能力值相同，则两名选手都有可能成为胜者。</p><p>令 <span class="math inline">\(l_{i,j}\)</span> 表示第 <spanclass="math inline">\(i\)</span> 轮第 <spanclass="math inline">\(j\)</span> 场比赛 败者 的能力值，令 <spanclass="math inline">\(w\)</span>表示整个锦标赛最终胜者的能力值。给定所有满足 <spanclass="math inline">\(1≤i≤k\)</span> 且 <spanclass="math inline">\(1≤j≤2^{k−i}\)</span> 的 <spanclass="math inline">\(l_{i,j}\)</span> 以及 <spanclass="math inline">\(w\)</span> ，请还原出 <spanclass="math inline">\(a_1, a_2, ⋯, a_n\)</span>。</p><h2 id="输入格式-9">输入格式:</h2><p>第一行输入一个整数 <spanclass="math inline">\(k（1≤k≤18）\)</span>表示锦标赛的轮数。</p><p>对于接下来 <span class="math inline">\(k\)</span> 行，第 <spanclass="math inline">\(i\)</span> 行输入 <spanclass="math inline">\(2_{k−i}\)</span> 个整数 <spanclass="math inline">\(l_{i,1},l_{i,2},⋯,l_{i,2^{k−i}}（1≤l_{i,j}≤10^9）\)</span>，其中 <spanclass="math inline">\(l_{i,j}\)</span> 表示第 <spanclass="math inline">\(i\)</span> 轮第 <spanclass="math inline">\(j\)</span> 场比赛 败者 的能力值。</p><p>接下来一行输入一个整数 <spanclass="math inline">\(w（1≤w≤10^9）\)</span>表示锦标赛最终胜者的能力值。</p><h2 id="输出格式-9">输出格式:</h2><p>输出一行 <span class="math inline">\(n\)</span>个由单个空格分隔的整数 <spanclass="math inline">\(a_1,a_2,⋯,a_n\)</span> ，其中 <spanclass="math inline">\(a_i\)</span> 表示第 <spanclass="math inline">\(i\)</span>名选手的能力值。如果有多种合法答案，请输出任意一种。如果无法还原出能够满足输入数据的答案，输出一行<code>No Solution</code>。</p><p>请勿在行末输出多余空格。</p><h2 id="输入样例1">输入样例1:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">34 5 8 57 689<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例1">输出样例1:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 4 8 5 9 8 6 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输入样例2">输入样例2:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">25 839<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例2">输出样例2:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">No Solution<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="l2-4-寻宝图">L2-4 寻宝图</h1><p>给定一幅地图，其中有水域，有陆地。被水域完全环绕的陆地是岛屿。有些岛屿上埋藏有宝藏，这些有宝藏的点也被标记出来了。本题就请你统计一下，给定的地图上一共有多少岛屿，其中有多少是有宝藏的岛屿。</p><h2 id="输入格式-10">输入格式：</h2><p>输入第一行给出 2 个正整数 <span class="math inline">\(N\)</span> 和<spanclass="math inline">\(M（1&lt;N×M≤10^5）\)</span>，是地图的尺寸，表示地图由<span class="math inline">\(N\)</span> 行 <spanclass="math inline">\(M\)</span> 列格子构成。随后 <spanclass="math inline">\(N\)</span> 行，每行给出 <spanclass="math inline">\(M\)</span> 位个位数，其中 0 表示水域，1表示陆地，2-9 表示宝藏。注意：两个格子共享一条边时，才是“相邻”的。宝藏都埋在陆地上。默认地图外围全是水域。</p><h2 id="输出格式-10">输出格式：</h2><p>在一行中输出 2 个整数，分别是岛屿的总数量和有宝藏的岛屿的数量。</p><h2 id="输入样例-9">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 1101000000151110000001110011000081100110100010000000000000000011100000114111000001100100000001900001000120000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-9">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code1">Code1</h2><p>1Runtime Error(ACCESS_VIOLATION) + 1WA <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//Directions</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cout&lt;&lt;endl;</span>    <span class="token comment">// for(int i=0;i&lt;=n+1;i++)&#123;</span>    <span class="token comment">//     for(int j=0;j&lt;=m+1;j++)&#123;</span>    <span class="token comment">//         cout&lt;&lt;map[i][j];</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cout&lt;&lt;endl;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">int</span> island<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>treasure<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                island<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    treasure<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>island<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>treasure<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> ## Code21Runtime Error(ACCESS_VIOLATION) + 1WA <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//Directions</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cout&lt;&lt;endl;</span>    <span class="token comment">// for(int i=0;i&lt;=n+1;i++)&#123;</span>    <span class="token comment">//     for(int j=0;j&lt;=m+1;j++)&#123;</span>    <span class="token comment">//         cout&lt;&lt;map[i][j];</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cout&lt;&lt;endl;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">int</span> island<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>treasure<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                island<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    treasure<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>island<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>treasure<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="code3">Code3</h2><p>1Runtime Error(ACCESS_VIOLATION) + 3WA 第一次BFS</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//Directions</span><span class="token comment">//之前把广搜写成深搜了</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//BFS</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>now<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>now<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> a<span class="token operator">=</span>now<span class="token punctuation">.</span>first<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>second<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>now<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        used<span class="token punctuation">[</span>now<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// cout&lt;&lt;"*"&lt;&lt;endl;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cout&lt;&lt;endl;</span>    <span class="token comment">// for(int i=0;i&lt;=n+1;i++)&#123;</span>    <span class="token comment">//     for(int j=0;j&lt;=m+1;j++)&#123;</span>    <span class="token comment">//         cout&lt;&lt;map[i][j];</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cout&lt;&lt;endl;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">int</span> island<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>treasure<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                island<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    treasure<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>island<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>treasure<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code4">Code4</h2><p>1Runtime Error(ACCESS_VIOLATION) + 1WA</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//Directions</span><span class="token comment">//之前把广搜写成深搜了</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//BFS</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>now<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>    treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>now<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>now<span class="token punctuation">.</span>first<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>second<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                used<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// if(map[now.first][now.second] &amp;&amp; used[now.first][now.second]==false)&#123;</span>        <span class="token comment">//     for(int i=0;i&lt;4;i++)&#123;</span>        <span class="token comment">//         int a=now.first+dir[i][0],b=now.second+dir[i][1];</span>        <span class="token comment">//         q.push(make_pair(a,b));</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     if(map[now.first][now.second]>1)&#123;</span>        <span class="token comment">//         treasure=true;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// used[now.first][now.second]=true;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cout&lt;&lt;endl;</span>    <span class="token comment">// for(int i=0;i&lt;=n+1;i++)&#123;</span>    <span class="token comment">//     for(int j=0;j&lt;=m+1;j++)&#123;</span>    <span class="token comment">//         cout&lt;&lt;map[i][j];</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cout&lt;&lt;endl;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">int</span> island<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>treasure<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                island<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    treasure<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>island<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>treasure<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code5">Code5</h2><p>24分！只剩段错误了！！！ 还不知道问题出在哪里</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//Directions</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>now<span class="token punctuation">.</span>first<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>second<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> b<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                used<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// memset(map,0,sizeof(map));</span>    <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> island<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>treasure<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                island<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    treasure<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>island<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>treasure<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code6">Code6</h2><p>最后发现改成vector就能过了。？？？ NICE</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> islandmap<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//FourDirections</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">bool</span> treasure<span class="token operator">=</span>islandmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    islandmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>now<span class="token punctuation">.</span>first<span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>now<span class="token punctuation">.</span>second<span class="token operator">+</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> b<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> islandmap<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>islandmap<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> treasure<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                islandmap<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> treasure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        islandmap<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            islandmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> island<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>treasure<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>islandmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                island<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    treasure<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>island<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>treasure<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HDUOJ | 1023 Train Problem II</title>
    <link href="/2023/12/16/HDUOJ-1023-Train-Problem-II/"/>
    <url>/2023/12/16/HDUOJ-1023-Train-Problem-II/</url>
    
    <content type="html"><![CDATA[<h2 id="train-problem-ii">Train Problem II</h2><h2 id="problem-description">Problem Description</h2><p>As we all know the Train Problem I, the boss of the Ignatius TrainStation want to know if all the trains come in strict-increasing order,how many orders that all the trains can get out of the railway.</p><h2 id="input">Input</h2><p>The input contains several test cases. Each test cases consists of anumber N(1&lt;=N&lt;=100). The input is terminated by the end offile.</p><h2 id="output">Output</h2><p>For each test case, you should output how many ways that all thetrains can get out of the railway.</p><h2 id="sample-input">Sample Input</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">12310<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="sample-output">Sample Output</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">12516796<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="hint">Hint</h2><p>The result will be very large, so you may not process it by 32-bitintegers.</p><h2 id="code">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HDUOJ | 1022 Train Problem I</title>
    <link href="/2023/12/16/HDUOJ-1022-Train-Problem-I/"/>
    <url>/2023/12/16/HDUOJ-1022-Train-Problem-I/</url>
    
    <content type="html"><![CDATA[<h1 id="train-problem-i">Train Problem I</h1><h2 id="problem-description">Problem Description</h2><p>As the new term comes, the Ignatius Train Station is very busynowadays. A lot of student want to get back to school by train(becausethe trains in the Ignatius Train Station is the fastest all over theworld <sup>v</sup>). But here comes a problem, there is only one railwaywhere all the trains stop. So all the trains come in from one side andget out from the other side. For this problem, if train A gets into therailway first, and then train B gets into the railway before train Aleaves, train A can't leave until train B leaves. The pictures belowfigure out the problem. Now the problem for you is, there are at most 9trains in the station, all the trains has an ID(numbered from 1 to n),the trains get into the railway in an order O1, your task is todetermine whether the trains can get out in an order O2.</p><h2 id="input">Input</h2><p>The input contains several test cases. Each test case consists of aninteger, the number of trains, and two strings, the order of the trainscome in:O1, and the order of the trains leave:O2. The input isterminated by the end of file. More details in the Sample Input.</p><h2 id="output">Output</h2><p>The output contains a string "No." if you can't exchange O2 to O1, oryou should output a line contains "Yes.", and then output your way inexchanging the order(you should output "in" for a train getting into therailway, and "out" for a train getting out of the railway). Print a linecontains "FINISH" after each test case. More details in the SampleOutput.</p><h2 id="sample-input">Sample Input</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">3 123 3213 123 312<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="sample-output">Sample Output</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Yes.inininoutoutoutFINISHNo.FINISH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="hint">Hint</h2><p>For the first Sample Input, we let train 1 get in, then train 2 andtrain 3. So now train 3 is at the top of the railway, so train 3 canleave first, then train 2 and train 1. In the second Sample input, weshould let train 3 leave first, so we have to let train 1 get in, thentrain 2 and train 3. Now we can let train 3 leave. But after that wecan't let train 1 leave before train 2, because train 2 is at the top ofthe railway at the moment. So we output "No.".</p><h2 id="code">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        string strin<span class="token punctuation">,</span>strout<span class="token punctuation">;</span>        cin<span class="token operator">>></span>strin<span class="token operator">>></span>strout<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>strin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>strout<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> in<span class="token punctuation">,</span>out<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            in<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strout<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> train<span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> op<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                train<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                in<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>out<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                train<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                in<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>out<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                train<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>out<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                train<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// cout&lt;&lt;"*"&lt;&lt;endl;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>op<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token string">"in"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token string">"out"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"FINISH"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"No."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"FINISH"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HDUOJ | 1017 A Mathematical Curiosity</title>
    <link href="/2023/12/14/HDUOJ-1017-A-Mathematical-Curiosity/"/>
    <url>/2023/12/14/HDUOJ-1017-A-Mathematical-Curiosity/</url>
    
    <content type="html"><![CDATA[<h1 id="a-mathematical-curiosity">A Mathematical Curiosity</h1><h2 id="problem-description">Problem Description</h2><p>Given two integers n and m, count the number of pairs of integers(a,b) such that 0 &lt; a &lt; b &lt; n and (a<sup>2+b</sup>2 +m)/(ab) isan integer.</p><p>This problem contains multiple test cases!</p><p>The first line of a multiple input is an integer N, then a blank linefollowed by N input blocks. Each input block is in the format indicatedin the problem description. There is a blank line between inputblocks.</p><p>The output format consists of N output blocks. There is a blank linebetween output blocks.</p><h2 id="input">Input</h2><p>You will be given a number of cases in the input. Each case isspecified by a line containing the integers n and m. The end of input isindicated by a case in which n = m = 0. You may assume that 0 &lt; n&lt;= 100.</p><h2 id="output">Output</h2><p>For each case, print the case number as well as the number of pairs(a,b) satisfying the given property. Print the output for each case onone line in the format as shown below.</p><h2 id="sample-input">Sample Input</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">110 120 330 40 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="sample-output">Sample Output</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Case 1: 2Case 2: 4Case 3: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code">Code</h2><p>这道题的输入输出很阴间</p><p>m==0 &amp;&amp; n==0 是错误的，但是 m==0 || n==0 是正确的</p><p>然后t是控制大循环的输出样例</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>cas<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">||</span> m<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: "</span><span class="token punctuation">,</span>cas<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        res<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HDUOJ | 1007 QuoitDesign</title>
    <link href="/2023/12/13/HDUOJ-1007-QuoitDesign/"/>
    <url>/2023/12/13/HDUOJ-1007-QuoitDesign/</url>
    
    <content type="html"><![CDATA[<h1 id="quoit-design">Quoit Design</h1><h2 id="problem-description">Problem Description</h2><p>Have you ever played quoit in a playground? Quoit is a game in whichflat rings are pitched at some toys, with all the toys encircledawarded. In the field of Cyberground, the position of each toy is fixed,and the ring is carefully designed so it can only encircle one toy at atime. On the other hand, to make the game look more attractive, the ringis designed to have the largest radius. Given a configuration of thefield, you are supposed to find the radius of such a ring.</p><p>Assume that all the toys are points on a plane. A point is encircledby the ring if the distance between the point and the center of the ringis strictly less than the radius of the ring. If two toys are placed atthe same point, the radius of the ring is considered to be 0.</p><h2 id="input">Input</h2><p>The input consists of several test cases. For each case, the firstline contains an integer N (2 &lt;= N &lt;= 100,000), the total numberof toys in the field. Then N lines follow, each contains a pair of (x,y) which are the coordinates of a toy. The input is terminated by N =0.</p><h2 id="output">Output</h2><p>For each test case, print in one line the radius of the ring requiredby the Cyberground manager, accurate up to 2 decimal places.</p><h2 id="sample-input">Sample Input</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">20 01 121 11 13-1.5 00 00 1.50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="sample-output">Sample Output</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0.710.000.75<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="author">Author</h2><p>CHEN, Yue</p><h2 id="source">Source</h2><p>ZJCPC2004</p><h2 id="code">Code</h2><p>暴力算法超时 <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//暴力法</span>        <span class="token keyword">double</span> dis<span class="token operator">=</span><span class="token number">10000000.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">double</span> dis_temp<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">pow</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dis_temp<span class="token operator">/</span><span class="token number">2</span><span class="token operator">&lt;</span>dis<span class="token punctuation">)</span>                    dis<span class="token operator">=</span>dis_temp<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>dis<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-1">Code</h2><p>分治法 <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmpx</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">cmpy</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">closest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>point<span class="token operator">></span><span class="token operator">&amp;</span> points<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> d<span class="token operator">=</span>DBL_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                d<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token function">dist</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> dl<span class="token operator">=</span><span class="token function">closest</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> dr<span class="token operator">=</span><span class="token function">closest</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dl<span class="token punctuation">,</span>dr<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>point<span class="token operator">></span> strip<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>mid<span class="token punctuation">)</span><span class="token operator">&lt;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            strip<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>strip<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>strip<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strip<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>strip<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>strip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">></span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dist</span><span class="token punctuation">(</span>strip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>strip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                d<span class="token operator">=</span><span class="token function">dist</span><span class="token punctuation">(</span>strip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>strip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>point<span class="token operator">></span> <span class="token function">points</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">>></span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>points<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">closest</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-2">Code</h2><p>分治法优化不适用vector，屏蔽io同步 <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmpx</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">cmpy</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">dist2</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">closest</span><span class="token punctuation">(</span>point<span class="token operator">*</span> points<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> d<span class="token operator">=</span>DBL_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                d<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token function">dist2</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> dl<span class="token operator">=</span><span class="token function">closest</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> dr<span class="token operator">=</span><span class="token function">closest</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dl<span class="token punctuation">,</span>dr<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>point<span class="token operator">></span> strip<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>points<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            strip<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>strip<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>strip<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strip<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>size_t j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>strip<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>strip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> strip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;</span> d<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// if(strip[j].y-strip[i].y>d)&#123;</span>            <span class="token comment">//     break;</span>            <span class="token comment">// &#125;</span>            <span class="token comment">// if(dist2(strip[i],strip[j])&lt;d)&#123;</span>            <span class="token comment">//     d=dist2(strip[i],strip[j]);</span>            <span class="token comment">// &#125;</span>            d<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token function">dist</span><span class="token punctuation">(</span>strip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>strip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        point points<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">>></span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>points<span class="token operator">+</span>n<span class="token punctuation">,</span>cmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">closest</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-3">Code</h2><p>优化点： - 不使用min函数，用?:表达式 - 使用全局数组 -使用scanf和printf</p><p>但是上述的不足以AC，我也不知道为什么我改了个头文件就AC了哭哭哭啊啊啊啊啊啊啊啊<figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>point points<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> strip<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmpx</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">cmp_y</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> points<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&lt;</span>points<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">dist2</span><span class="token punctuation">(</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">closest</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">dist2</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> d1<span class="token operator">=</span><span class="token function">dist2</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d2<span class="token operator">=</span><span class="token function">dist2</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d3<span class="token operator">=</span><span class="token function">dist2</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> d3<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d1<span class="token operator">&lt;</span>d2<span class="token punctuation">)</span><span class="token operator">?</span>d1<span class="token operator">:</span>d2<span class="token punctuation">)</span><span class="token operator">?</span>d3<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d1<span class="token operator">&lt;</span>d2<span class="token punctuation">)</span><span class="token operator">?</span>d1<span class="token operator">:</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> dl<span class="token operator">=</span><span class="token function">closest</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> dr<span class="token operator">=</span><span class="token function">closest</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token operator">=</span><span class="token punctuation">(</span>dl<span class="token operator">&lt;</span>dr<span class="token punctuation">)</span><span class="token operator">?</span>dl<span class="token operator">:</span>dr<span class="token punctuation">;</span>    cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>points<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            strip<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>strip<span class="token punctuation">,</span>strip<span class="token operator">+</span>cur<span class="token punctuation">,</span>cmp_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cur<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cur <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>strip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>points<span class="token punctuation">[</span>strip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">></span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            d<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token function">dist2</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>strip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>strip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span> <span class="token operator">&amp;&amp;</span> n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>points<span class="token operator">+</span>n<span class="token punctuation">,</span>cmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | 指针相关题目及解析</title>
    <link href="/2023/12/11/PTA-%E6%8C%87%E9%92%88%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/12/11/PTA-%E6%8C%87%E9%92%88%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="section">1-1</h1><p>若有定义：<code>int *p[3]</code>; 则以下叙述中正确的是（ ）。</p><p>A.定义了一个基类型为 <code>int</code> 的指针变量<code>p</code>，该变量具有3个指针</p><p>B.定义了一个指针数组<code>p</code>，该数组含有3个元素，每个元素都是基类型为 <code>int</code>的指针</p><p>C.定义了一个名为 <code>*p</code> 的整型数组，该数组含有3个<code>int</code> 类型元素</p><p>D.定义了一个可指向一维数组的指针变量 <code>p</code>，所指一维数组应具有3个 <code>int</code> 类型元素</p><h2 id="gpt">GPT</h2><p>在 C 语言中，表达式 <code>int *p[3];</code> 的含义是：</p><ul><li><code>p</code> 是一个数组</li><li><code>p</code> 的每个元素都是一个指向 <code>int</code>类型的指针</li><li>数组 <code>p</code> 有 3 个这样的元素</li></ul><p>根据这个解释，我们可以分析给出的选项：</p><p>A. 这个选项错误地理解为 <code>p</code> 是一个指针，它指向了 3个指针。实际上，<code>p</code> 是一个包含 3 个指针的数组。</p><p>B. 这是正确的描述。<code>p</code> 是一个数组，数组中每个元素都是指向<code>int</code> 类型的指针，且数组有 3 个这样的元素。</p><p>C. 这个选项错误地将 <code>p</code>解释为一个整型数组。实际上，<code>p</code> 是一个指针数组。</p><p>D. 这个选项错误地描述了 <code>p</code>作为一个指向一维数组的指针，这并不正确。<code>p</code>本身是一个数组，它的元素是指针。</p><p>因此，正确答案是 B：定义了一个指针数组p，该数组含有3个元素，每个元素都是基类型为 int 的指针。</p><h1 id="section-1">1-2</h1><p>有说明：<code>char *language[]=&#123;"FORTRAN","BASIC","PASCAL","JAVA","C"&#125;;</code></p><p>则表达式<code>language[1]&gt;language[3]</code></p><p>A.字符<code>B</code>和字符<code>J</code></p><p>B.字符串<code>FORTRAN</code>和字符串<code>PASCAL</code></p><p>C.字符<code>F</code>和字符<code>P</code></p><p>D.字符串<code>BASIC</code>和字符串<code>JAVA</code></p><h2 id="gpt-1">GPT</h2><p>在 C语言中，<code>char *language[]=&#123;"FORTRAN","BASIC","PASCAL","JAVA","C"&#125;;</code>定义了一个字符串数组，其中每个元素都是一个指向字符的指针。这些指针分别指向"FORTRAN", "BASIC", "PASCAL", "JAVA", 和 "C" 这几个字符串。</p><p>当比较 <code>language[1] &gt; language[3]</code>时，实际上是比较字符串 "BASIC" 和 "JAVA"在内存中的地址。这个比较的结果取决于字符串在内存中的存储位置，而这通常是由编译器和运行时环境决定的，无法确定比较的结果是真还是假。</p><p>但是，选项中没有关于内存地址的比较，而是关于字符或字符串的内容比较。因此，根据提供的选项：</p><ul><li>A: 字符 B 和字符 J — 这个选项错误，因为比较的不是单个字符。</li><li>B: 字符串 FORTRAN 和字符串 PASCAL — 这个选项也错误，因为它们不是<code>language[1]</code> 和 <code>language[3]</code>。</li><li>C: 字符 F 和字符 P — 这个选项同样错误。</li><li>D: 字符串 BASIC 和字符串 JAVA — 这是正确的描述，因为<code>language[1]</code> 是 "BASIC"，<code>language[3]</code> 是"JAVA"。</li></ul><p>所以，正确答案是 D：字符串 BASIC 和字符串JAVA。但请注意，这里的比较是比较字符串地址，而不是比较字符串内容。</p><h1 id="section-2">1-3</h1><p>当调用函数时，实参是一个数组名，则向函数传送的是_____ 。</p><p>A.数组的长度</p><p>B.数组的首地址</p><p>C.数组每一个元素的地址</p><p>D.数组每个元素中的值</p><h1 id="section-3">1-4</h1><p>以下语句或语句组中，能正确进行字符串赋值的是（ ）</p><ol type="A"><li><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token string">"right!"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token string">"right!"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span>s<span class="token operator">=</span><span class="token string">"right!"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token string">"right!"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ol><h2 id="gpt-2">GPT</h2><p>在 C语言中，字符串赋值需要特别注意，因为字符串实际上是字符数组，且字符串字面量（如"right!"）在 C 中是字符数组的常量表示。我们逐个分析给出的选项：</p><p>A. <code>char *p; *p="right!";</code> - 这是错误的。<code>p</code>是一个未初始化的指针，直接对 <code>*p</code>进行赋值是危险的，因为它可能指向任何地方。而且 <code>"right!"</code>是一个字符串字面量（字符数组），不能直接赋值给<code>*p</code>（一个字符）。</p><p>B. <code>char s[10]; s="right!";</code> - 这同样是错误的。虽然<code>s</code> 是一个字符数组，可以存储字符串，但不能直接使用<code>=</code> 运算符将一个字符串字面量赋值给数组。在 C语言中，数组名是常量，不能作为左值。</p><p>C. <code>char s[10]; *s="right!";</code> -这也是错误的。<code>*s</code> 是 <code>s</code>数组的第一个元素（一个字符），不能将整个字符串字面量赋值给单个字符。</p><p>D. <code>char *p="right!";</code> - 这是正确的。这里 <code>p</code>被定义为指向字符的指针，并且直接初始化为指向字符串字面量 "right!"。在 C语言中，字符串字面量存储在静态内存区，<code>p</code>会指向这个位置。</p><p>因此，正确的答案是 D：<code>char *p="right!";</code>。</p><h1 id="section-4">1-5</h1><p>若有定义<code>int a[2][3]</code>;则对<code>a</code>数组的第<code>i</code>行第<code>j</code>列元素值的正确引用是（）。</p><p>A.<code>*(*(a+i)+j)</code></p><p>B.<code>(a+i)[j]</code></p><p>C.<code>*(a+i+j)</code></p><p>D.<code>*(a+i)+j</code></p><h2 id="gpt-3">GPT</h2><p>在 C 语言中，对于一个二维数组的元素引用，如果数组定义为<code>int a[2][3];</code>，则对数组的第 <code>i</code> 行第<code>j</code>列元素的正确引用方式可以通过理解数组的内存布局来得到。对于这个定义，<code>a</code>是一个有 2 行 3 列的二维数组。</p><p>选项分析：</p><p>A. <code>*(*(a+i)+j)</code> - 这是正确的。在这里，<code>a+i</code>首先定位到第 <code>i</code> 行，然后 <code>*(a+i)</code>得到该行的首地址，最后通过 <code>+j</code> 定位到第 <code>j</code>列，并通过外部的 <code>*</code> 获取该位置的值。</p><p>B. <code>(a+i)[j]</code> - 这种写法不正确。在这里，<code>a+i</code>定位到第 <code>i</code> 行，但 <code>(a+i)[j]</code>试图在行指针上直接应用下标，这不会得到期望的元素。</p><p>C. <code>*(a+i+j)</code> - 这是错误的。这样会将 <code>a</code>当作一个线性数组来处理，而不是一个二维数组。这会导致错误的内存访问。</p><p>D. <code>*(a+i)+j</code> - 这也是错误的。<code>*(a+i)</code>得到的是第 <code>i</code> 行的首地址，但 <code>+j</code>仅仅是在这个地址上加了 <code>j</code>，而不是访问第 <code>j</code>列的元素。</p><p>因此，正确答案是 A：<code>*(*(a+i)+j)</code>。</p><h1 id="section-5">1-6</h1><p>若有定义<code>char *cc[2]=&#123;"1234","5678"&#125;</code>;以下叙述中正确的是（）。</p><p>A.<code>cc</code>数组的两个元素中各自存放了字符串<code>"1234"</code>和<code>"5678"</code>的首地址</p><p>B.<code>cc</code>数组的两个元素分别存放的是含有4个字符的一维字符数组的首地址</p><p>C.<code>cc</code>是指针变量，它指向含有两个数组元素的一维字符数组</p><p>D.<code>cc</code>数组元素的值分别是<code>"1234"</code>和<code>"5678"</code></p><h2 id="gpt-4">GPT</h2><p>在 C 语言中，<code>char *cc[2]=&#123;"1234","5678"&#125;;</code>的定义创建了一个指针数组。我们逐个分析给出的选项：</p><p>A. cc数组的两个元素中各自存放了字符串"1234"和"5678"的首地址 -这个描述是正确的。<code>cc</code>是一个指针数组，其元素是字符指针。在这个声明中，<code>cc[0]</code>指向字符串 "1234" 的首地址，而 <code>cc[1]</code> 指向字符串 "5678"的首地址。</p><p>B. cc数组的两个元素分别存放的是含有4个字符的一维字符数组的首地址 -这个描述基本正确，但有一点误导。字符串 "1234" 和 "5678"实际上是含有5个字符的数组（包括结尾的空字符 '\0'）。所以，虽然<code>cc[0]</code> 和 <code>cc[1]</code>确实指向一维字符数组的首地址，但这些数组包含的字符数是 5，而不是 4。</p><p>C. cc是指针变量，它指向含有两个数组元素的一维字符数组 -这个描述不正确。<code>cc</code>不是一个单独的指针变量，而是一个指针数组。每个元素指向一个字符串，而不是<code>cc</code> 指向一个包含两个元素的数组。</p><p>D. cc数组元素的值分别是"1234"和"5678" -这个描述不准确。<code>cc</code>数组的元素是指针，它们存储的是字符串的地址，而不是字符串本身。</p><p>综上所述，正确答案是A：cc数组的两个元素中各自存放了字符串"1234"和"5678"的首地址。</p><h1 id="section-6">1-7</h1><p>以下哪个选项中的p是指针：</p><p>A.<code>int* *p();</code></p><p>B.<code>int *p();</code></p><p>C.<code>int (*p)[5];</code></p><p>D.<code>int *p[6];</code></p><h2 id="gpt-5">GPT</h2><p>让我们逐一分析每个选项，以确定哪些选项中的 <code>p</code>是指针：</p><p>A. <code>int* *p();</code> - 这声明了一个函数<code>p</code>，该函数返回一个指向指针的指针（指针的指针）。因此，这里的<code>p</code> 是一个函数，而不是指针。</p><p>B. <code>int *p();</code> - 这同样声明了一个函数<code>p</code>，该函数返回一个指向 <code>int</code> 的指针。与选项 A一样，这里的 <code>p</code> 是一个函数名称，而不是指针。</p><p>C. <code>int (*p)[5];</code> - 这声明了一个指针<code>p</code>，它指向一个有 5个整数的数组。在这个声明中，<code>p</code> 是一个指针。</p><p>D. <code>int *p[6];</code> - 这声明了一个数组<code>p</code>，该数组由 6 个指向 <code>int</code>的指针组成。因此，<code>p</code> 在这里是一个数组，而不是单个指针。</p><p>根据以上分析，唯一的选项，其中 <code>p</code> 是指针，是C：<code>int (*p)[5];</code>。</p><h1 id="section-7">1-8</h1><p>若有函数max(a,b)，并且已使函数指针变量p指向函数max，当调用函数时，正确的调用方法是</p><p>A.<code>(*p)max(a+b);</code></p><p>B.<code>*pmax(a,b);</code></p><p>C.<code>(*p)(a,b);</code></p><p>D.<code>*p(a,b);</code></p><h2 id="gpt-6">GPT</h2><p>在 C 语言中，当你有一个指向函数的指针变量<code>p</code>，并且想通过这个指针调用函数，正确的语法是使用<code>(*p)(arg1, arg2, ...)</code>, 其中 <code>arg1</code>,<code>arg2</code>, ...是传递给函数的参数。基于这个规则，我们来分析给出的选项：</p><p>A. <code>(*p)max(a+b);</code> -这个调用不正确。首先，<code>max(a+b)</code>是错误的参数传递方式，因为它看起来像是在传递一个单一的参数（<code>a+b</code>的结果）。此外，语法 <code>(*p)max</code>也不正确，因为它没有正确地使用括号调用通过指针 <code>p</code>指向的函数。</p><p>B. <code>*pmax(a,b);</code> -这个调用也不正确。这里没有正确地使用括号来调用函数指针。<code>*pmax</code>会被解释为尝试解引用 <code>pmax</code>，而不是 <code>p</code>。</p><p>C. <code>(*p)(a,b);</code> - 这是正确的调用方法。使用<code>(*p)</code> 来正确地解引用函数指针，并使用 <code>(a,b)</code>传递参数给 <code>max</code> 函数。</p><p>D. <code>*p(a,b);</code> -这个调用方法不正确。虽然它看起来像是在尝试通过指针调用函数，但它没有正确地使用<code>(*p)</code> 来解引用函数指针。</p><p>因此，正确答案是 C：<code>(*p)(a,b);</code>。</p><h1 id="section-8">1-9</h1><p>以下程序段运行后x的值为（ ）。 <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4.2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>x<span class="token punctuation">;</span>p<span class="token operator">=</span>a<span class="token punctuation">,</span> q<span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        x<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>A.2</p><p>B.4</p><p>C.6</p><p>D.8</p><h1 id="section-9">1-10</h1><p>对于以下程序，能够正确表示二维数组 t 的元素地址的表达式是（ ）。<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>pt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pt<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>A.<code>*pt[0]</code></p><p>B.<code>*(pt+1)</code></p><p>C.<code>&amp;pt[2]</code></p><p>D.<code>&amp;t[3][2]</code></p><h2 id="gpt-7">GPT</h2><p>在 C语言中，理解数组和指针的地址是非常重要的。首先，让我们理解程序中的每个部分是如何工作的：</p><ul><li><code>t</code> 是一个 3x2 的二维整数数组。</li><li><code>pt</code> 是一个指针数组，每个元素都是指向 <code>int</code>的指针。在循环中，<code>pt[k]</code> 被设置为指向 <code>t</code> 的第<code>k</code> 行。</li></ul><p>现在，让我们分析给定的选项：</p><p>A. <code>*pt[0]</code> - 这是 <code>pt</code> 数组的第一个元素（即<code>pt[0]</code>）的解引用。由于<code>pt[0] = t[0]</code>，<code>*pt[0]</code> 实际上是<code>t[0][0]</code> 的值，而不是地址。</p><p>B. <code>*(pt+1)</code> - 这是指针 <code>pt</code> 加 1后的解引用。由于 <code>pt+1</code> 是 <code>pt</code>数组的第二个元素的地址，<code>*(pt+1)</code> 等价于<code>pt[1]</code>，即 <code>t[1]</code> 的地址，也就是<code>t[1][0]</code> 的地址。</p><p>C. <code>&amp;pt[2]</code> - 这是 <code>pt</code>数组中第三个元素的地址。由于<code>pt[2] = t[2]</code>，<code>&amp;pt[2]</code> 是指向<code>t[2]</code>（即 <code>t[2][0]</code> 的地址）的指针的地址，而不是<code>t[2][0]</code> 的直接地址。</p><p>D. <code>&amp;t[3][2]</code> - 这实际上是指向 <code>t</code>数组之外的地址，因为 <code>t</code> 的大小只是 3x2，所以<code>t[3][2]</code> 超出了数组的界限。</p><p>根据这些分析，正确表示二维数组 <code>t</code>的某个元素地址的表达式是 B：<code>*(pt+1)</code>，它表示<code>t[1][0]</code> 的地址。</p><h1 id="section-10">4-1</h1><p>输入2个字符串，比较它们的大小。要求定义和调用函数<code>cmp(s, t)</code>，该函数逐个比较字符串<code>s</code>和<code>t</code>中的对应字符，直到对应字符不等或比较到串尾。若<code>s</code>和<code>t</code>相等则返回0，若不相等则返回不相等字符的差值，即若<code>s</code>大于<code>t</code>则返回一个正数，若<code>s</code>小于<code>t</code>则返回一个负数。输入输出示例如下：</p><h2 id="输入">输入：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4324erfda 4324etgggds<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出">输出：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&quot;4324erfda&quot; &lt; &quot;4324etgggds&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXS</span> <span class="token expression"><span class="token number">80</span></span></span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span>MAXS<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>MAXS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\"%s\" > \"%s\"\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\"%s\" = \"%s\"\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\"%s\" &lt; \"%s\"\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token operator">!=</span><span class="token char">'\0'</span> <span class="token operator">||</span> <span class="token operator">*</span>t<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>s <span class="token operator">!=</span> <span class="token operator">*</span>t<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        s<span class="token operator">++</span><span class="token punctuation">;</span>        t<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>s<span class="token operator">-</span><span class="token operator">*</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-11">4-2</h1><p>先消除输入字符串s的前后空格，再判断其是否为“回文”（即字符串正读和倒读都是一样的），若是则输出YES，否则输出NO。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    q <span class="token operator">=</span> s <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>q <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> q <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">==</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>        q<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> q<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="section-12">4-3</h1><p>从键盘输入10个整数，求出其中的最大数。要求用指针变量访问数组的元素。<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> p <span class="token operator">!=</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    max <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">></span> max<span class="token punctuation">)</span>            max <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max=%d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="调整数组使奇数全部都位于偶数前面其他数字顺序不变">5-1调整数组使奇数全部都位于偶数前面其他数字顺序不变</h1><p>输入一个长度不超过20的数字字符串，调整其顺序使奇数全部都位于偶数前面其他数字顺序不变。</p><h2 id="函数接口定义">函数接口定义：</h2><p>在这里描述函数接口。例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span>   <span class="token function">fun</span> <span class="token punctuation">(</span> <span class="token keyword">char</span>  s<span class="token punctuation">[</span>  <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>该函数功能是，将数组s的顺序按题目要求发生改变。</p><h2 id="裁判测试程序样例">裁判测试程序样例：</h2><p>在这里给出函数被调用进行测试的例子。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span>   <span class="token function">fun</span> <span class="token punctuation">(</span> <span class="token keyword">char</span>  s<span class="token punctuation">[</span>  <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span>    str<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fun</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 你提交的代码将被嵌在这里 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="输入样例">输入样例：</h2><p>在这里给出一组输入。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">21154877630<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="输出样例">输出样例：</h2><p>在这里给出相应的输出。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">11577324860<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="code-1">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> temp<span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="数组区段的最大最小值">5-2 数组区段的最大最小值</h1><p>本题要求实现一个函数，找出数组中一部分数据的最大值和最小值。</p><p>题目保证没有无效数据。</p><h2 id="函数接口定义-1">函数接口定义：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sublistMaxMin</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> min <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>其中from和to都是用户传入的参数，分别存放数组部分数据的起始地址和结束地址,并且from&lt;=to。</p><p>其中max和min为用户传入的地址，分别用于在sublistMaxMin中保存from至to对应区段中数组元素的最大值和最小值的地址。</p><h2 id="裁判测试程序样例-1">裁判测试程序样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">sublistMaxMin</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> min <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>from<span class="token punctuation">,</span> <span class="token operator">&amp;</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sublistMaxMin</span><span class="token punctuation">(</span>list<span class="token operator">+</span>from<span class="token punctuation">,</span> list<span class="token operator">+</span>to<span class="token punctuation">,</span> <span class="token operator">&amp;</span>max<span class="token punctuation">,</span> <span class="token operator">&amp;</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"list[%d-%d]: max = %d, min = %d\n"</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例-1">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">51 2 3 4 50 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">list[0-4]: max &#x3D; 5, min &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-2">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">sublistMaxMin</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>from<span class="token punctuation">,</span> <span class="token operator">&amp;</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sublistMaxMin</span><span class="token punctuation">(</span>list <span class="token operator">+</span> from<span class="token punctuation">,</span> list <span class="token operator">+</span> to<span class="token punctuation">,</span> <span class="token operator">&amp;</span>max<span class="token punctuation">,</span> <span class="token operator">&amp;</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"list[%d-%d]: max = %d, min = %d\n"</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sublistMaxMin</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span>max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>min <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>from <span class="token operator">!=</span> to <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>max <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>from <span class="token operator">></span> <span class="token operator">*</span>max<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">*</span>from <span class="token operator">:</span> <span class="token operator">*</span>max<span class="token punctuation">;</span>        <span class="token operator">*</span>min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>from <span class="token operator">&lt;</span> <span class="token operator">*</span>min<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">*</span>from <span class="token operator">:</span> <span class="token operator">*</span>min<span class="token punctuation">;</span>        from<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="字符串反转">5-3 字符串反转</h1><p>字符串反转，如将字符串 "www.runoob.com" 反转为 "moc.boonur.www"。</p><h2 id="函数接口定义-2">函数接口定义：</h2><p>在这里描述函数接口。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><p>在这里解释接口参数。例如：其中 s 是用户传入的参数。</p><h2 id="裁判测试程序样例-2">裁判测试程序样例：</h2><p>在这里给出函数被调用进行测试的例子。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"www.cyouagain.cn"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"'%s' =>\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 反转字符串</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"'%s'\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="输入样例-2">输入样例：</h2><p>在这里给出一组输入。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">www.cyouagain.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="输出样例-2">输出样例：</h2><p>在这里给出相应的输出。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#39;www.cyouagain.cn&#39; &#x3D;&gt;&#39;nc.niagauoyc.www&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-3">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"www.cyouagain.cn"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"'%s' =>\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反转字符串</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"'%s'\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token keyword">char</span> res<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> res<span class="token punctuation">;</span>    tail <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>tail <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>        tail<span class="token operator">++</span><span class="token punctuation">;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tail <span class="token operator">-</span> s<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="复制部分字符串">5-4 复制部分字符串</h1><p>有一个字符串，包含n个字符，写一个函数，将此字符串中从第m个字符开始的全部字符复制成为另外一个字符串。</p><h2 id="函数接口定义-3">函数接口定义：</h2><p>函数接口： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">copystr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> 其中 <code>*p1</code>和<code>*p2</code>都是用户传入的参数。 <code>m</code>是复制字符的开始位置。</p><h2 id="裁判测试程序样例-3">裁判测试程序样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span> </span><span class="token keyword">void</span> <span class="token function">copystr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>     <span class="token punctuation">&#123;</span>       <span class="token function">copystr</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">puts</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/* 请在这里填写答案 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输入样例-3">输入样例：</h2><p>在这里给出一组输入。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">reading__room 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></p><h2 id="输出样例-3">输出样例：</h2><p>在这里给出相应的输出。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">room<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="code-4">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span><span class="token keyword">void</span> <span class="token function">copystr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> m<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">copystr</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">copystr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    p1 <span class="token operator">+=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p1 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>        p1<span class="token operator">++</span><span class="token punctuation">;</span>        p2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="挑选整数">6-1 挑选整数</h1><p>输入一个字符串，内有数字和非数字字符，例如：<code>a123x67 222y35i088 09x8 c</code>，请编写程序，将其中连续的数字作为一个整数，依次存放到一维数组<code>a</code>中。例如前面的字符串，应将<code>123</code>存放到<code>a[0]</code>中，<code>67</code>存放到<code>a[1]</code>中……，最后输出整数的个数以及各个整数的值。</p><h2 id="输入格式">输入格式:</h2><p>长度不超过100的一个字符串，其中包含整数字符和非整数字符。</p><h2 id="输出格式">输出格式:</h2><p>第一行输出整数的个数</p><p>第2行输出各个整数的值，以空格间隔，最后一个整数后面没有空格。</p><h2 id="输入样例-4">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">a123x67 222y35i088 09x8 c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出样例-4">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7123 67 222 35 88 9 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="code-5">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span>str<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">>=</span><span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>            temp<span class="token operator">+=</span><span class="token operator">*</span>p<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>total<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        res<span class="token punctuation">[</span>total<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="滤字符">6-2 滤字符</h1><p>以指针的方式，将某个字符串中出现的特定字符删去，然后输出新的字符串。</p><h2 id="输入格式-1">输入格式:</h2><p>首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。每组测试数据输入一个字符串s和一个非空格字符t。其中s的长度不超过100，且只包含英文字母。</p><h2 id="输出格式-1">输出格式:</h2><p>对于每组测试，将删掉t后新得到的字串输出。如果串被删空，则输出NULL。</p><h2 id="输入样例-5">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2eeidliecielpvu iecdssnepffnofdoenci e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-5">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">eedlecelpvucdssnpffnofdonci<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="code-6">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %c"</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token operator">=</span>c<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token operator">=</span>c<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token operator">!=</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">*</span>p2<span class="token operator">=</span><span class="token operator">*</span>p1<span class="token punctuation">;</span>                p2<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p1<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">*</span>p2<span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token operator">==</span><span class="token char">'\0'</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="放置最值元素">6-3 放置最值元素</h1><p>要求将一个n×n矩阵中的最大元素放在中心，4个角分别放4个最小的元素（按从左到右、从上到下的顺序依次从小到大存放）。若有多个同一类元素，则优先选择行号小的，若行号相同则优先选择列号小的。注意，放置元素时通过交换操作实现，具体参看样例。</p><h2 id="输入格式-2">输入格式:</h2><p>测试数据有多组，处理到文件尾。每组测试的第一行输入自然数n（n为奇数且3≤n≤11），第二行开始的n行每行输入n个不超过2位的整数。</p><h2 id="输出格式-2">输出格式:</h2><p>对于每组测试，输出将矩阵中的最大元素和4个最小元素放到指定的位置后的矩阵。每行的各个数据之间留一个空格。</p><h2 id="输入样例-6">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">596 69 0 56 5021 54 87 46 4056 38 24 98 510 2 88 43 5565 60 26 73 88967 4 98 87 17 97 16 15 1427 73 20 55 81 14 48 41 795 77 10 61 40 81 73 64 5722 27 21 55 50 80 94 57 1416 42 89 45 85 41 72 32 3684 73 91 89 2 4 50 76 8786 73 37 12 78 57 60 7 5628 37 44 17 87 18 16 58 7811 56 66 67 53 62 40 19 74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-6">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0 69 96 56 088 54 87 46 4056 38 98 24 5150 65 88 43 552 60 26 73 212 14 85 87 17 97 16 15 427 73 20 55 81 14 48 41 7495 77 10 61 40 81 73 64 5722 27 21 55 50 80 94 57 1416 42 89 45 98 41 72 32 3684 73 91 89 67 11 50 76 8786 73 37 12 78 57 60 7 5628 37 44 17 87 18 16 58 784 56 66 67 53 62 40 19 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-7">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> matrix<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cin<span class="token operator">>></span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// int min[4];</span>        <span class="token comment">// memset(min,matrix[0][0],sizeof(min));</span>        <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>max_j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> k<span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">></span>y<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>l<span class="token operator">></span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        x<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    x<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                    y<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>matrix<span class="token punctuation">[</span>max_i<span class="token punctuation">]</span><span class="token punctuation">[</span>max_j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    max_i<span class="token operator">=</span>i<span class="token punctuation">;</span>                    max_j<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int i=0;i&lt;4;i++)&#123;</span>        <span class="token comment">//     cout&lt;&lt;x[i]&lt;&lt;" "&lt;&lt;y[i]&lt;&lt;endl;</span>        <span class="token comment">// &#125;</span>        <span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> yy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>max_i<span class="token punctuation">]</span><span class="token punctuation">[</span>max_j<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="sdut-c语言实验-虎子的难题">6-4 sdut-C语言实验-虎子的难题</h1><p>稷下英才实验班有个同学叫虎子，有一天虎子刷到了一道编程题：给<spanclass="math inline">\(M（M&lt;=100）\)</span>组数据，每组数据有<spanclass="math inline">\(N\)</span>个正整数<spanclass="math inline">\(（N&lt;=100）\)</span>，要求把每组的<spanclass="math inline">\(N\)</span>个数按升序排成一行。虎子觉得应该用指针和函数实现比较高效，但总是调试不出来，你能帮帮他吗？</p><h2 id="输入格式-3">输入格式:</h2><p>输入包括<spanclass="math inline">\(M+1\)</span>行，第一行是两个正整数<spanclass="math inline">\(M、N\)</span>；<spanclass="math inline">\(M\)</span>表示总共多少组数据，下面<spanclass="math inline">\(M\)</span>行每行包含<spanclass="math inline">\(N\)</span>个正整数。（输入数据之间会用空格隔开）</p><h2 id="输出格式-3">输出格式:</h2><p>输出包括<spanclass="math inline">\(M\)</span>行，每行分别对应输入中<spanclass="math inline">\(M\)</span>组数据的升序序列，数与数之间用一个空格隔开。</p><h2 id="输入样例-7">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2 31 3 24 2 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-7">输出样例:</h2><p>在这里给出相应的输出。例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 2 32 4 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></p><h2 id="code-8">Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> array<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | BFS 广度优先算法</title>
    <link href="/2023/11/23/ACM-BFS-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/23/ACM-BFS-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="slide-1">Slide 1</h2><p>ACM程序设计</p><h2 id="slide-2">Slide 2</h2><p>预备知识</p><p>队列 特点： 1、先进先出(FIFO) 2、从队头删除元素 3、在队尾加入元素</p><p>常见操作： 判断队列是否为空 查询队列大小 访问队首元素 访问队尾元素加入元素 删除元素</p><h2 id="slide-3">Slide 3</h2><p>STL中队列的基本用法</p><p>创建队列对象：<code>queue&lt;元素类型&gt; 队列名</code>;队列添加元素：<code>队列名.push(元素名)</code>;去掉队首元素：<code>队列名.pop()</code>;访问队首元素：<code>队列名.front()</code>;访问队尾元素：<code>队列名.back()</code>;判断是否为空：<code>队列名.empty()</code>;返回队列大小：<code>队列名.size()</code>;</p><h2 id="slide-4">Slide 4</h2><p>STL实例介绍</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="slide-5">Slide 5</h2><p>第七讲</p><p>宽度优先搜索 （BFS）</p><h2 id="slide-6">Slide 6</h2><p>例1</p><p>输入一棵二叉树，如何对该二叉树进行层次遍历？所谓“层次遍历”就是从上到下，从左到右的顺序进行遍历。例如，右边的树层次遍历的结果是？</p><p>5 1 7 2 4 6 3</p><h2 id="slide-7">Slide 7</h2><p>算法思想：维护一个队列，用于存放节点的信息。当访问到一个节点的时候，先访问该节点，然后将该节点的左右儿子分别入对列。<figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">ccbl</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q <span class="token punctuation">;</span>创建一个队列Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">;</span>将根节点入队列<span class="token keyword">while</span><span class="token punctuation">(</span>队列不为空<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>获得队首元素               <span class="token comment">//这一行和下一行能交换吗？</span>将队首元素出队输出当前节点的值如果该节点的左儿子不为空，将左儿子加入到队列中如果该节点的右儿子不为空，将右儿子加入到队列中  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>树的层次遍历</p><h2 id="slide-8">Slide 8</h2><p>图的BFS示意图</p><h2 id="slide-9">Slide 9</h2><p>例2</p><p>有一个奇怪的电梯，他可以停在任何一层，并且在每个楼层有一个Ki（0 &lt;=Ki &lt;=N）。电梯只有两个按钮：上、下。当你在第i层，如果你按下“UP”按钮，你将上升Ki层，也就是说，你将会到达第i+Ki层，如果你按下“DOWN”按钮，你会下降Ki层，即您将前往第i-Ki层。当然，电梯不能高于N，也不能低于1。例如，有5层的建筑物，并且k1=3，k2=3，k3=1，k4=2，k5=5。从1楼开始，你可以按下“UP”按钮，你会到4楼，但如果你按下“DOWN”按钮，电梯不做处理，因为它不能下到-2楼。问：当你在A楼而想去B楼时，至少须按下“UP”或“DOWN”按钮多少次？ 其中，1&lt;= N,A,B &lt;= 200</p><h2 id="slide-10">Slide 10</h2><p>例2</p><p>能看出这是一个搜索题吗？ 能否根据样例画出对应的状态转移图？ 5 1 5 3 31 2 5 通过这个题目能否总结出：BFS最适合哪一类的求解？</p><h2 id="slide-11">Slide 11</h2><p>例2 <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span>Start<span class="token punctuation">,</span>End<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pos</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> level<span class="token punctuation">;</span>    <span class="token comment">//含义？</span>    <span class="token keyword">int</span> steps<span class="token punctuation">;</span>    <span class="token comment">//含义？</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Start<span class="token punctuation">,</span><span class="token operator">&amp;</span>End<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="slide-12">Slide 12</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   pos cur<span class="token punctuation">,</span>nex<span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>level <span class="token operator">=</span> Start<span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>steps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>pos<span class="token operator">></span>qu<span class="token punctuation">;</span>    qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>Start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   cur <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>level <span class="token operator">==</span> End<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cur<span class="token punctuation">.</span>steps<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nex<span class="token punctuation">.</span>level<span class="token operator">=</span>cur<span class="token punctuation">.</span>level <span class="token operator">+</span> a<span class="token punctuation">[</span>cur<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">;</span>        nex<span class="token punctuation">.</span>steps <span class="token operator">=</span> cur<span class="token punctuation">.</span>steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nex<span class="token punctuation">.</span>level <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>nex<span class="token punctuation">.</span>level<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>   vis<span class="token punctuation">[</span>nex<span class="token punctuation">.</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nex<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        nex<span class="token punctuation">.</span>level<span class="token operator">=</span> cur<span class="token punctuation">.</span>level <span class="token operator">-</span> a<span class="token punctuation">[</span>cur<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token punctuation">;</span>        nex<span class="token punctuation">.</span>steps <span class="token operator">=</span> cur<span class="token punctuation">.</span>steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nex<span class="token punctuation">.</span>level <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>nex<span class="token punctuation">.</span>level<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>   vis<span class="token punctuation">[</span>nex<span class="token punctuation">.</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="slide-13">Slide 13</h2><p>例3</p><p>题目描述：每当刘一丁买了可乐，刘二丁就要求和他一起分享，而且一定要喝的和刘一丁一样多。但刘一丁的手中只有两个杯子，它们的容量分别是N和M毫升,可乐的体积为S（S&lt;101）毫升(正好装满一瓶)，它们三个之间可以相互倒可乐 (都是没有刻度的，且S==N+M，101＞S＞0，N＞0，M＞0) 。</p><p>如果能平分，请输出倒可乐的最少次数，如果不能，请输出"NO"。</p><p>Input <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 4 34 1 30 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure> Output <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">NO3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></p><h2 id="slide-14">Slide 14</h2><p>啊，这连图都没有，也能搜索？！！ 如何定义节点信息（状态）？ 三杯水量+ 当前状态最少倒水次数 有了状态如何转移呢?有了状态、有了转移(边),是否就能进行搜索了?！ 我们称之为——“隐式图”如何优化（剪枝）？ 已经访问的节点不再访问（做标记）</p><p>例3</p><h2 id="slide-15">Slide 15</h2><p>状态转移规则（倒水规则）：如果i水杯内水的容量大于j水杯内倒满所需的容量x，则——i水杯倒水后的容量为：i-x,j水杯倒水后容量为:j+x如果i水杯内水的容量小于j水杯内倒满所需的容量x，则——i水杯倒水后的容量为：0,j水杯倒水后容量为:j+x每操作一次，最少倒水次数+1</p><p>例3</p><h2 id="slide-16">Slide 16</h2><p>例4</p><p>题目大意：给定起始位置a和目标位置b，请计算从a到b路上骑士移动的最少次数。注：骑士即象棋中的马，走日字。 Sample Input <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">a1 h8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> Sample Output<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">To get from a1 to h8 takes 6 knight moves.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="slide-17">Slide 17</h2><p>跳马规则</p><p>在2×3的矩形里</p><h2 id="slide-18">Slide 18</h2><p>例如：从a1到e4</p><p>当目标出现在所扩展出的结点里，结果就找到了。</p><p>To get from a1 to e4 takes 3 knight moves.</p><p>例4</p><h2 id="slide-19">Slide 19</h2><p>从初始状态S开始，利用规则，生成所有可能的状态，构成树的下一层节点。检查是否出现目标状态G，若未出现，就对该层所有状态节点，分别依次利用规则,生成再下一层的所有状态节点。对新一层的所有状态节点继续检查是否出现G，若未出现，继续按上面思想生成再下一层的所有状态节点，这样一层一层往下展开，直到出现目标状态为止。</p><p>BFS基本思想：</p><h2 id="slide-20">Slide 20</h2><p>BFS算法（伪代码） <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Node <span class="token function">bfs</span><span class="token punctuation">(</span>node source <span class="token punctuation">,</span> node target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>visit <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>node<span class="token operator">></span> Q <span class="token punctuation">;</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">;</span>visit<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node a <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>target<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> a <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>对于a所有的后继节点 b<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>visit<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">continue</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">;</span>visit<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>   <span class="token comment">//剪枝，保证节点只进队列一次</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="slide-21">Slide 21</h2><p>预备知识-优先队列（priority_queue）</p><p>特点： 1、在队尾加入元素 2、从队头删除元素3、每次取出的是具有最高优先权的元素 （不一定先进先出）</p><p>常见操作： 判断队列是否为空 查询队列大小 返回优先权最高的元素加入元素 删除元素</p><h2 id="slide-22">Slide 22</h2><p>STL中优先队列的基本用法</p><blockquote><p>创建队列对象：<code>priority_queue&lt;元素类型&gt; 队列名</code>;队列添加元素：<code>队列名.push(元素名)</code>;去掉第一个元素：<code>队列名.pop()</code>;判断是否为空：<code>队列名.empty()</code>;返回队列大小：<code>队列名.size()</code>;访问最优元素：<code>队列名.top()</code>;</p></blockquote><h2 id="slide-23">Slide 23</h2><p>优先队列实例1：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>      <span class="token keyword">int</span> t<span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>   t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">532<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="slide-24">Slide 24</h2><p>优先队列实例2：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>t2<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>z<span class="token operator">!=</span> t2<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token keyword">return</span> t1<span class="token punctuation">.</span>z <span class="token operator">></span> t2<span class="token punctuation">.</span>z<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>y<span class="token operator">!=</span>t2<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> t1<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>t2<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> t1<span class="token punctuation">.</span>x<span class="token operator">></span>t2<span class="token punctuation">.</span>x<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>t<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span>T<span class="token operator">></span> q<span class="token punctuation">;</span>      T a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  c<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>   t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>z <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="slide-25">Slide 25</h2><p>例5</p><p>题目大意： 丁爸被火星人抓走，关在一个<span class="math inline">\(N *M\)</span>矩形的监狱（监狱里有墙壁、道路和警卫队）。丁爸的学生想拯救他（到达丁爸停留的位置即视为成功）。拯救过程中若遇到警卫，则必须干掉。假设每次向上，向下，向右，向左移动需要1个单位时间，杀死一个守卫额外需要1个单位时间。请计算：拯救丁爸需要的最短时间。（每次只能上，下，左，右移动到边界内的邻居网格。）</p><p>Sample Input <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 8#.#####.#.a#..r.#..#x.....#..#.##...##...#..............<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> Sample Output <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="slide-26">Slide 26</h2><p>如果使用传统的BFS，局限性在哪里？出队元素所记忆的时间并不是层次递增的... 希望的效果？让因为遇到士兵而多花时间的结点在队列中向后推迟一层出队 实现方法：优先队列——根据时间进行优先性选择，每次出队当前队列中记录时间最少的元素思考：前来拯救的学生有多个，如何方便处理？</p><p>要点分析：</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | 背包算法</title>
    <link href="/2023/11/23/ACM-%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/23/ACM-%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="slide-1">Slide 1</h2><p>ACM程序设计</p><hr /><h2 id="slide-2">Slide 2</h2><p>第六讲</p><p>背包算法 （Knapsack Algorithm）</p><hr /><h2 id="slide-3">Slide 3</h2><p>导引问题-食堂就餐</p><p>现有餐券1张，面值10元菜肴N种：炸鸡腿3元；大排2元；荷包蛋：1元；炒青菜：1元；番茄炒蛋：2元 ...餐券的特点：一次性使用，不找零；问：若每种菜只挑一个，为了充分发挥餐券的作用，最多可以消费多少元？</p><hr /><h2 id="slide-4">Slide 4</h2><p>什么是背包问题</p><p>背包的基本模型： 给你一个容量为<spanclass="math inline">\(V\)</span>的背包和若干种物品，在一定的限制条件下（每种物品都占用一定容量），问最多能放进多少价值的物品？</p><hr /><h2 id="slide-5">Slide 5</h2><p>关于背包问题</p><p>1、最典型、最基本的DP问题； 2、理解并熟练掌握背包问题意义重大；3、DP问题中“状态”概念的理解；4、背包的每个容量就是“状态”,选择每个物品就是“状态的决策”；</p><hr /><h2 id="slide-6">Slide 6</h2><p>背包问题的分类</p><p>01背包 完全背包 多重背包 二维费用背包 分组背包 混合三种背包有依赖的背包</p><hr /><h2 id="slide-7">Slide 7</h2><p>01背包(最基础的背包问题): 有<spanclass="math inline">\(N\)</span>件物品和一个容量为<spanclass="math inline">\(V\)</span>的背包。第<spanclass="math inline">\(i\)</span>件物品的费用是<spanclass="math inline">\(c[i]\)</span>，价值是<spanclass="math inline">\(w[i]\)</span>。求解将哪些物品装入背包可使价值总和最大。问题特点：每种物品仅有一件，可以选择放或不放，用子问题定义状态：即<spanclass="math inline">\(f[i][v]\)</span>表示前<spanclass="math inline">\(i\)</span>件物品放入一个容量为<spanclass="math inline">\(v\)</span>的背包可以获得的最大价值。状态转移方程： <spanclass="math inline">\(f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}\)</span></p><p>一、01背包</p><hr /><h2 id="slide-8">Slide 8</h2><p>Sample Input <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">15 101 2 3 4 55 4 3 2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure> Sample Output <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><p>一、01背包-Bone Collector</p><hr /><h2 id="slide-9">Slide 9</h2><p>一、01背包-Bone Collector</p><p>问题分解：当前最优解，要么包含第i种物品，要么不包含第i种物品 <spanclass="math inline">\(DP[i][j]\)</span>表示前i个物品,背包容量为j的最优值。状态转移方程为： <span class="math inline">\(DP[i][j] =max(DP[i-1][j],DP[i-1][j-v[i]] + w[i])\)</span></p><hr /><h2 id="slide-10">Slide 10</h2><p>时间复杂度<span class="math inline">\(N*V\)</span> ,空间复杂度<spanclass="math inline">\(N*V\)</span> 空间复杂度优化:只用一位数组<spanclass="math inline">\(DP[j]\)</span>来实现；</p><p><spanclass="math inline">\((1,5)、(2,4)、(3,3)、(4,2)、(5,1)\)</span></p><p>一、01背包-Bone Collector</p><hr /><h2 id="slide-11">Slide 11</h2><p>时间复杂度<span class="math inline">\(N*V\)</span> , 空间复杂度<spanclass="math inline">\(N*V\)</span> 空间复杂度优化:只用一维数组<spanclass="math inline">\(DP[j]\)</span>来实现；</p><p><spanclass="math inline">\((1,5)、(2,4)、(3,3)、(4,2)、(5,1)\)</span>此时，遍历背包的顺序必须反一反,想想为什么?原因：如果顺序遍历,一种物品会被"取"好多次</p><p>一、01背包-Bone Collector</p><hr /><h2 id="slide-12">Slide 12</h2><p>01背包问题伪代码如下: <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">for i &#x3D; 1 to n  &#x2F;&#x2F;所有物品   for j &#x3D; V to v[i]        dp[j] &#x3D; max(dp[j] , dp[j-v[i]] + w[i]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure> 空间成功优化到一维<spanclass="math inline">\(V\)</span>。</p><p>一、01背包-Bone Collector</p><hr /><h2 id="slide-13">Slide 13</h2><p>二、完全背包Piggy-Bank</p><p>完全背包特点:一种物品可以取无数个 可否转化成01背包问题？朴素的转化方式是？ 回忆01背包为何要对容量按照逆序循环？和01背包类似,不过就是正着写！</p><p>如果要求背包必须装满，应该怎么处理?</p><hr /><h2 id="slide-14">Slide 14</h2><p>三、多重背包 珍惜现在，感恩生活</p><p>多重背包特点: 一种物品有<spanclass="math inline">\(C\)</span>个（既不是固定的1个，也不是无数个）最朴素的想法?</p><p>优化的方法： 运用神奇的二进制,进行物品拆分,转化成01背包物品拆分,把<span class="math inline">\(13\)</span>个相同的物品分成<spanclass="math inline">\(4\)</span>组<spanclass="math inline">\((1,2,4,6)\)</span> 用这4组可以组成任意一个<spanclass="math inline">\(1~13\)</span>之间的数! 原理:一个数总可以用<spanclass="math inline">\(2^k\)</span>表示 而且总和等于<spanclass="math inline">\(13\)</span>,所以不会组成超过13的数</p><p>所以可将一种有<spanclass="math inline">\(C\)</span>个的物品拆分成<spanclass="math inline">\(1,2,4,...,2^(k-1),C-(2^k-1)\)</span>然后进行01背包</p><hr /><h2 id="slide-15">Slide 15</h2><p>优化部分的参考代码 <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">>=</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">*</span>t<span class="token punctuation">;</span>c<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token operator">*</span>t<span class="token punctuation">;</span>x <span class="token operator">-=</span> t<span class="token punctuation">;</span>t <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">*</span>x<span class="token punctuation">;</span>c<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><hr /><h2 id="slide-16">Slide 16</h2><p>四、二维费用背包</p><p>二维费用背包问题:对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（比如，背包容量、最大承重），求怎样选择物品可以得到最大的价值。设第<spanclass="math inline">\(i\)</span>件物品所需的两种代价分别为<spanclass="math inline">\(a[i]\)</span>和 <spanclass="math inline">\(b[i]\)</span>，两种代价可付出的最大值（比如体积和重量）分别为<spanclass="math inline">\(V\)</span>和<spanclass="math inline">\(U\)</span>，物品的价值为<spanclass="math inline">\(w[i]\)</span>。</p><p>对应算法：费用加了一维，只需状态也加一维即可！ 设<spanclass="math inline">\(f[i][v][u]\)</span>表示前<spanclass="math inline">\(i\)</span>件物品付出两种代价分别为<spanclass="math inline">\(v\)</span>和<spanclass="math inline">\(u\)</span>时可获得的最大价值，状态转移方程则为：<spanclass="math inline">\(f[i][v][u]=max{f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]}\)</span>详见：背包问题九讲</p><hr /><h2 id="slide-17">Slide 17</h2><p>五、分组背包</p><p>分组背包问题: <spanclass="math inline">\(N\)</span>件物品和一个容量为<spanclass="math inline">\(V\)</span>的背包，第i件物品的费用是<spanclass="math inline">\(c[i]\)</span>，价值是<spanclass="math inline">\(w[i]\)</span>。这些物品被分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使物品的费用总和不超过背包容量，且价值总和最大。对应算法：问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设<spanclass="math inline">\(f[k][v]\)</span>表示前<spanclass="math inline">\(k\)</span>组物品花费费用<spanclass="math inline">\(v\)</span>能取得的最大权值，则有： <spanclass="math inline">\(f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]|物品i属于组k}\)</span>使用一维数组的伪代码如下： <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> 所有的组k    <span class="token keyword">for</span> v<span class="token operator">=</span>V<span class="token punctuation">.</span><span class="token number">.0</span>        <span class="token keyword">for</span> 所有的i属于组k            f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>v<span class="token operator">-</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><hr /><h2 id="slide-18">Slide 18</h2><p>附录：01背包参考代码（2602） <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> V<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>V<span class="token punctuation">;</span> j<span class="token operator">>=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><hr /><h2 id="slide-19">Slide 19</h2><p>致谢：</p><p>本讲内容参考自cuitianyi（zju_DD）总结的“背包问题九讲”，在此表示感谢！</p><p>若想了解更多关于背包问题的算法，可以直接搜索该资料即可。</p><hr />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++头文件cctype中自带的字符判断函数</title>
    <link href="/2023/11/18/C-%E5%A4%B4%E6%96%87%E4%BB%B6cctype%E4%B8%AD%E8%87%AA%E5%B8%A6%E7%9A%84%E5%AD%97%E7%AC%A6%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0/"/>
    <url>/2023/11/18/C-%E5%A4%B4%E6%96%87%E4%BB%B6cctype%E4%B8%AD%E8%87%AA%E5%B8%A6%E7%9A%84%E5%AD%97%E7%AC%A6%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>C++ 标准库中的 <cctype>头文件提供了一系列用于字符分类和转换的函数。这些函数可以帮助你判断字符的类型，例如是否为字母、数字、空格等。下面是一些常用的函数：</p><p>isalpha(int ch) - 检查 ch 是否为字母（大写或小写）。</p><p>isalnum(int ch) - 检查 ch 是否为字母或数字。</p><p>iscntrl(int ch) - 检查 ch 是否为控制字符。</p><p>isdigit(int ch) - 检查 ch 是否为数字。</p><p>isgraph(int ch) - 检查 ch是否有图形表示（即除空格外的打印字符）。</p><p>islower(int ch) - 检查 ch 是否为小写字母。</p><p>isprint(int ch) - 检查 ch 是否为可打印字符（包括空格）。</p><p>ispunct(int ch) - 检查 ch 是否为标点符号。</p><p>isspace(int ch) - 检查 ch是否为空白字符（如空格、制表符、换行符等）。</p><p>isupper(int ch) - 检查 ch 是否为大写字母。</p><p>isxdigit(int ch) - 检查 ch 是否为十六进制数字。</p><p>tolower(int ch) - 如果 ch是大写字母，则转换为小写字母；否则不变。</p><p>toupper(int ch) - 如果 ch是小写字母，则转换为大写字母；否则不变。</p><p>这些函数都接受一个 int 类型的参数，通常是一个字符，并返回一个 int类型的结果。如果参数满足函数的检查条件，通常返回非零值；否则返回零。</p><p>请注意，尽管这些函数接受 int 类型的参数，但实际上它们通常用于处理char 类型的数据。在使用时，将 char 类型的值传递给这些函数是安全的，因为char 会被自动提升为 int 类型。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Inner PK 2</title>
    <link href="/2023/11/16/ACM-Inner-PK-2/"/>
    <url>/2023/11/16/ACM-Inner-PK-2/</url>
    
    <content type="html"><![CDATA[<!--# L1-7 机工士姆斯塔迪奥在 MMORPG《最终幻想14》的副本“乐欲之所瓯博讷修道院”里，BOSS 机工士姆斯塔迪奥将会接受玩家的挑战。你需要处理这个副本其中的一个机制：$N×M$ 大小的地图被拆分为了 $N×M$ 个 $1×1$ 的格子，BOSS 会选择若干行或/及若干列释放技能，玩家不能站在释放技能的方格上，否则就会被击中而失败。给定 BOSS 所有释放技能的行或列信息，请你计算出最后有多少个格子是安全的。## 输入格式:输入第一行是三个整数 $N,M,Q (1≤N×M≤10^5，0≤Q≤1000)$，表示地图为 $N$ 行 $M$ 列大小以及选择的行/列数量。接下来 $Q$ 行，每行两个数 $T_i$,$C_i$，其中 $T_i=0$ 表示 BOSS 选择的是一整行，$T_i=1$ 表示选择的是一整列，$C_i$为选择的行号/列号。行和列的编号均从 $1$ 开始。## 输出格式:输出一个数，表示安全格子的数量。## 输入样例:<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 5 30 20 41 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>Q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> line<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>count_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> row<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>count_r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp1<span class="token punctuation">,</span>temp2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp1<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">&lt;=</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                line<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                count_l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">&lt;=</span>M<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                row<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                count_r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>N<span class="token operator">-</span>count_l<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>M<span class="token operator">-</span>count_r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-8-静静的推荐">L1-8 静静的推荐</h1><p>天梯赛结束后，某企业的人力资源部希望组委会能推荐一批优秀的学生，这个整理推荐名单的任务就由静静姐负责。企业接受推荐的流程是这样的：</p><p>只考虑得分不低于 <span class="math inline">\(175\)</span> 分的学生；一共接受 <span class="math inline">\(K\)</span> 批次的推荐名单；同一批推荐名单上的学生的成绩原则上应严格递增；如果有的学生天梯赛成绩虽然与前一个人相同，但其参加过 PAT考试，且成绩达到了该企业的面试分数线，则也可以接受。给定全体参赛学生的成绩和他们的 PAT考试成绩，请你帮静静姐算一算，她最多能向企业推荐多少学生？</p><h2 id="输入格式">输入格式：</h2><p>输入第一行给出 <span class="math inline">\(3\)</span> 个正整数：<spanclass="math inline">\(N（≤10^5\)</span> 为参赛学生人数，<spanclass="math inline">\(K（≤5×10^3）\)</span> 为企业接受的推荐批次，<spanclass="math inline">\(S（≤100）\)</span>为该企业的 PAT 面试分数线。</p><p>随后 <span class="math inline">\(N\)</span>行，每行给出两个分数，依次为一位学生的天梯赛分数（最高分 290）和 PAT分数（最高分 100）。</p><h2 id="输出格式">输出格式：</h2><p>在一行中输出静静姐最多能向企业推荐的学生人数。</p><h2 id="输入样例">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 2 90203 0169 91175 88175 0175 90189 0189 0189 95189 89256 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="样例解释">样例解释：</h2><p>第一批可以选择 175、189、203、256 这四个分数的学生各一名，此外 175 分PAT 分数达到 90 分的学生和 189 分 PAT 分数达到 95分的学生可以额外进入名单。第二批就只剩下 175、189两个分数的学生各一名可以进入名单了。最终一共 8 人进入推荐名单。</p><h2 id="code超时">Code超时：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> stu<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>K<span class="token punctuation">,</span>S<span class="token punctuation">;</span>    <span class="token keyword">int</span> stu_total<span class="token punctuation">[</span><span class="token number">291</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//每个分数的第一个人的下标</span>    <span class="token keyword">int</span> stu_left<span class="token punctuation">[</span><span class="token number">291</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//每个分数剩余的人数</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">,</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>stu_total<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu_total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>stu_left<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu_left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu_left<span class="token punctuation">[</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//计算stu_total</span>    stu_total<span class="token punctuation">[</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stu_total<span class="token punctuation">[</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">175</span><span class="token punctuation">;</span> <span class="token comment">//stu_total[head]标记第一个为大于等于175的人的下标</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stu_total<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span> <span class="token comment">//front标记上一个被选中的人的下标</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//结果</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>K<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        front<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">290</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stu_left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>stu_total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>stu_total<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        front<span class="token operator">=</span>j<span class="token punctuation">;</span>                        ans<span class="token operator">++</span><span class="token punctuation">;</span>                        stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        stu_left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>front<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>stu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>S<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>stu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                front<span class="token operator">=</span>i<span class="token punctuation">;</span>                stu_left<span class="token punctuation">[</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-1-插松枝">L2-1 插松枝</h1><p>人造松枝加工场的工人需要将各种尺寸的塑料松针插到松枝干上，做成大大小小的松枝。他们的工作流程（并不）是这样的：</p><ul><li>每人手边有一只小盒子，初始状态为空。</li><li>每人面前有用不完的松枝干和一个推送器，每次推送一片随机型号的松针片。</li><li>工人首先捡起一根空的松枝干，从小盒子里摸出最上面的一片松针 ——如果小盒子是空的，就从推送器上取一片松针。将这片松针插到枝干的最下面。</li><li>工人在插后面的松针时，需要保证，每一步插到一根非空松枝干上的松针片，不能比前一步插上的松针片大。如果小盒子中最上面的松针满足要求，就取之插好；否则去推送器上取一片。如果推送器上拿到的仍然不满足要求，就把拿到的这片堆放到小盒子里，继续去推送器上取下一片。注意这里假设小盒子里的松针片是按放入的顺序堆叠起来的，工人每次只能取出最上面（即最后放入）的一片。</li><li>当下列三种情况之一发生时，工人会结束手里的松枝制作，开始做下一个：</li></ul><ol type="1"><li>小盒子已经满了，但推送器上取到的松针仍然不满足要求。此时将手中的松枝放到成品篮里，推送器上取到的松针压回推送器，开始下一根松枝的制作。</li><li>小盒子中最上面的松针不满足要求，但推送器上已经没有松针了。此时将手中的松枝放到成品篮里，开始下一根松枝的制作。</li><li>手中的松枝干上已经插满了松针，将之放到成品篮里，开始下一根松枝的制作。</li></ol><p>现在给定推送器上顺序传过来的 N片松针的大小，以及小盒子和松枝的容量，请你编写程序自动列出每根成品松枝的信息。</p><h2 id="输入格式-1">输入格式：</h2><p>输入在第一行中给出 <span class="math inline">\(3\)</span>个正整数：<spanclass="math inline">\(N（≤10^3）\)</span>，为推送器上松针片的数量；<spanclass="math inline">\(M（≤20）\)</span>为小盒子能存放的松针片的最大数量；<spanclass="math inline">\(K（≤5）\)</span>为一根松枝干上能插的松针片的最大数量。</p><p>随后一行给出 <span class="math inline">\(N\)</span> 个不超过 <spanclass="math inline">\(100\)</span>的正整数，为推送器上顺序推出的松针片的大小。</p><h2 id="输出格式-1">输出格式：</h2><p>每支松枝成品的信息占一行，顺序给出自底向上每片松针的大小。数字间以 1个空格分隔，行首尾不得有多余空格。</p><h2 id="输入样例-1">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">8 3 420 25 15 18 20 18 8 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-2">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">20 1520 18 18 825 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-1">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span> <span class="token comment">//推送器上松针片的数量</span>    <span class="token keyword">int</span> M<span class="token punctuation">;</span> <span class="token comment">//小盒子能存放的松针片的最大数量</span>    <span class="token keyword">int</span> K<span class="token punctuation">;</span> <span class="token comment">//一根松枝干上能插的松针片的最大数量</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leaf<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//推送器上顺序推出的松针片的大小</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>leaf<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//记录每个tree上的松针</span>    <span class="token keyword">int</span> working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//当前处理的tree上的位置</span>    <span class="token keyword">int</span> box<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//小盒子的栈</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//栈的cur</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//Debug</span>        <span class="token comment">// printf("*\n");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//tree上没有任何叶片</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从box里拿</span>                tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                cur<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//从leaf里拿</span>                tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            working_posi<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//tree上有叶片</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//box里有叶子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从box里拿</span>                    tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                    box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                    cur<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//从leaf里拿</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        i<span class="token operator">++</span><span class="token punctuation">;</span>                        working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//不符合，把leaf来的放到box里去</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            cur<span class="token operator">++</span><span class="token punctuation">;</span>                            box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                            i<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//box里没有叶子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                    working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//leaf里的拿到box里去</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        cur<span class="token operator">++</span><span class="token punctuation">;</span>                        box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        i<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Debug</span>        <span class="token comment">// printf("Box: ");</span>        <span class="token comment">// for(int j=0;j&lt;M;j++)&#123;</span>        <span class="token comment">//     printf("%d ",box[j]);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// printf("\n");</span>        <span class="token comment">// printf("Tree: ");</span>        <span class="token comment">// for(int j=0;j&lt;K;j++)&#123;</span>        <span class="token comment">//     printf("%d ",tree[j]);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// printf("\n");</span>        <span class="token comment">//Debug</span>        <span class="token comment">// printf("posi=%d,flag=%d,\n",working_posi,flag);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">==</span>K <span class="token operator">||</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//处理tree上未输出的</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//处理box里多余的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>working_posi<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> working_posi<span class="token operator">!=</span>K<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                cur<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//处理tree上多余的</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-2-老板的作息表">L2-2 老板的作息表</h1><p>新浪微博上有人发了某老板的作息时间表，表示其每天 4:30就起床了。但立刻有眼尖的网友问：这时间表不完整啊，早上九点到下午一点干啥了？</p><p>本题就请你编写程序，检查任意一张时间表，找出其中没写出来的时间段。</p><h2 id="输入格式-2">输入格式：</h2><p>输入第一行给出一个正整数 N，为作息表上列出的时间段的个数。随后 N行，每行给出一个时间段，格式为：</p><p><code>hh:mm:ss - hh:mm:ss</code> 其中 hh、mm、ss分别是两位数表示的小时、分钟、秒。第一个时间是开始时间，第二个是结束时间。题目保证所有时间都在一天之内（即从00:00:00 到 23:59:59）；每个区间间隔至少 1秒；并且任意两个给出的时间区间最多只在一个端点有重合，没有区间重叠的情况。</p><h2 id="输出格式-2">输出格式：</h2><p>按照时间顺序列出时间表中没有出现的区间，每个区间占一行，格式与输入相同。题目保证至少存在一个区间需要输出。</p><h2 id="输入样例-2">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">813:00:00 - 18:00:0000:00:00 - 01:00:0508:00:00 - 09:00:0007:10:59 - 08:00:0001:00:05 - 04:30:0006:30:00 - 07:10:5805:30:00 - 06:30:0018:00:00 - 19:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-3">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">04:30:00 - 05:30:0007:10:58 - 07:10:5909:00:00 - 13:00:0019:00:00 - 23:59:59<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-2">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">ttos</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">stoh</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">stom</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">/</span><span class="token number">60</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">stos</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ss<span class="token punctuation">[</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> h1<span class="token punctuation">,</span>m1<span class="token punctuation">,</span>s1<span class="token punctuation">,</span>h2<span class="token punctuation">,</span>m2<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d:%d - %d:%d:%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>h1<span class="token punctuation">,</span><span class="token operator">&amp;</span>m1<span class="token punctuation">,</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>h2<span class="token punctuation">,</span><span class="token operator">&amp;</span>m2<span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">ttos</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span>m1<span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">ttos</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span>m2<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//标记上一个0在哪里</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ss<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d - %02d:%02d:%02d\n"</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ss<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">=</span>i<span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d - %02d:%02d:%02d\n"</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 04:30:00 - 05:29:59</span><span class="token comment">// 05:30:00 - 07:10:57</span><span class="token comment">// 07:10:58 - 07:10:58</span><span class="token comment">// 07:10:59 - 08:59:59</span><span class="token comment">// 09:00:00 - 12:59:59</span><span class="token comment">// 13:00:00 - 18:59:59</span><span class="token comment">// 04:30:00 - 05:30:00</span><span class="token comment">// 07:10:58 - 07:10:59</span><span class="token comment">// 09:00:00 - 13:00:00</span><span class="token comment">// 19:00:00 - 23:59:59</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-3-龙龙送外卖">L2-3 龙龙送外卖</h1><p>龙龙是“饱了呀”外卖软件的注册骑手，负责送帕特小区的外卖。帕特小区的构造非常特别，都是双向道路且没有构成环——你可以简单地认为小区的路构成了一棵树，根结点是外卖站，树上的结点就是要送餐的地址。</p><p>每到中午 12点，帕特小区就进入了点餐高峰。一开始，只有一两个地方点外卖，龙龙简单就送好了；但随着大数据的分析，龙龙被派了更多的单子，也就送得越来越累……</p><p>看着一大堆订单，龙龙想知道，从外卖站出发，访问所有点了外卖的地方至少一次（这样才能把外卖送到）所需的最短路程的距离到底是多少？每次新增一个点外卖的地址，他就想估算一遍整体工作量，这样他就可以搞明白新增一个地址给他带来了多少负担。</p><h2 id="输入格式-3">输入格式:</h2><p>输入第一行是两个数 <span class="math inline">\(N,M (2≤N≤10^5,1≤M≤10^5)\)</span>，分别对应树上节点的个数（包括外卖站），以及新增的送餐地址的个数。</p><p>接下来首先是一行 <span class="math inline">\(N\)</span> 个数，第<span class="math inline">\(i\)</span> 个数表示第 <spanclass="math inline">\(i\)</span> 个点的双亲节点的编号。节点编号从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(N\)</span>，外卖站的双亲编号定义为 <spanclass="math inline">\(−1\)</span>。</p><p>接下来有 <span class="math inline">\(M\)</span>行，每行给出一个新增的送餐地点的编号 <spanclass="math inline">\(X_i\)</span>。保证送餐地点中不会有外卖站，但地点有可能会重复。</p><p>为了方便计算，我们可以假设龙龙一开始一个地址的外卖都不用送，两个相邻的地点之间的路径长度统一设为<spanclass="math inline">\(1\)</span>，且从外卖站出发可以访问到所有地点。</p><p>注意：所有送餐地址可以按任意顺序访问，且完成送餐后无需返回外卖站。</p><h2 id="输出格式-3">输出格式:</h2><p>对于每个新增的地点，在一行内输出题目需要求的最短路程的距离。</p><h2 id="输入样例-3">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 4-1 1 1 1 2 2 35624<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-4">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2446<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-3">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>max<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    sum<span class="token operator">++</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 使用 0 初始化 d 数组</span>    <span class="token punctuation">&#125;</span>    sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        max<span class="token operator">=</span><span class="token punctuation">(</span>max <span class="token operator">></span> <span class="token function">dfs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> max <span class="token operator">:</span> <span class="token function">dfs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用三元操作符找出最大值</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>L2-4 大众情人 分数 25 作者 陈越 单位 浙江大学 qr.jpg</p><p>人与人之间总有一点距离感。我们假定两个人之间的亲密程度跟他们之间的距离感成反比，并且距离感是单向的。例如小蓝对小红患了单相思，从小蓝的眼中看去，他和小红之间的距离为1，只差一层窗户纸；但在小红的眼里，她和小蓝之间的距离为108000，差了十万八千里……另外，我们进一步假定，距离感在认识的人之间是可传递的。例如小绿觉得自己跟小蓝之间的距离为2，则即使小绿并不直接认识小红，我们也默认小绿早晚会认识小红，并且因为跟小蓝很亲近的关系，小绿会觉得自己跟小红之间的距离为1+2=3。当然这带来一个问题，如果小绿本来也认识小红，或者他通过其他人也能认识小红，但通过不同渠道推导出来的距离感不一样，该怎么算呢？我们在这里做个简单定义，就将小绿对小红的距离感定义为所有推导出来的距离感的最小值。</p><p>一个人的异性缘不是由最喜欢他/她的那个异性决定的，而是由对他/她最无感的那个异性决定的。我们记一个人i 在一个异性 j 眼中的距离感为 D ij ​ ；将 i 的“异性缘”定义为 1/max j∈S(i)​{D ij ​ }，其中 S(i) 是相对于 i的所有异性的集合。那么“大众情人”就是异性缘最好（值最大）的那个人。</p><p>本题就请你从给定的一批人与人之间的距离感中分别找出两个性别中的“大众情人”。</p><p>输入格式： 输入在第一行中给出一个正整数N（≤500），为总人数。于是我们默认所有人从 1 到 N 编号。</p><p>随后 N 行，第 i 行描述了编号为 i 的人与其他人的关系，格式为：</p><p>性别 K 朋友1:距离1 朋友2:距离2 …… 朋友K:距离K 其中 性别是这个人的性别，F 表示女性，M 表示男性；K（&lt;N的非负整数）为这个人直接认识的朋友数；随后给出的是这 K个朋友的编号、以及这个人对该朋友的距离感。距离感是不超过 10 6的正整数。</p><p>题目保证给出的关系中一定两种性别的人都有，不会出现重复给出的关系，并且每个人的朋友中都不包含自己。</p><p>输出格式：第一行给出自身为女性的“大众情人”的编号，第二行给出自身为男性的“大众情人”的编号。如果存在并列，则按编号递增的顺序输出所有。数字间以一个空格分隔，行首尾不得有多余空格。</p><p>输入样例： 6 F 1 4:1 F 2 1:3 4:10 F 2 4:2 2:2 M 2 5:1 3:2 M 2 2:2 6:2M 2 3:1 2:5</p><p>输出样例： 2 3 4</p><p>--&gt;</p><h1 id="l2-2-口罩发放">L2-2 口罩发放</h1><p>为了抗击来势汹汹的 COVID19新型冠状病毒，全国各地均启动了各项措施控制疫情发展，其中一个重要的环节是口罩的发放。</p><p>某市出于给市民发放口罩的需要，推出了一款小程序让市民填写信息，方便工作的开展。小程序收集了各种信息，包括市民的姓名、身份证、身体情况、提交时间等，但因为数据量太大，需要根据一定规则进行筛选和处理，请你编写程序，按照给定规则输出口罩的寄送名单。</p><h2 id="输入格式-4">输入格式:</h2><p>输入第一行是两个正整数 <span class="math inline">\(D\)</span> 和<span class="math inline">\(P（1≤D,P≤30）\)</span>，表示有 <spanclass="math inline">\(D\)</span>天的数据，市民两次获得口罩的时间至少需要间隔 <spanclass="math inline">\(P\)</span> 天。</p><p>接下来 <span class="math inline">\(D\)</span>块数据，每块给出一天的申请信息。第 <spanclass="math inline">\(i\)</span> 块数据<spanclass="math inline">\(（i=1,⋯,D）\)</span>的第一行是两个整数 <spanclass="math inline">\(T_i\)</span> 和 <spanclass="math inline">\(S_i（1≤T_i,S_i≤1000）\)</span>，表示在第 <spanclass="math inline">\(i\)</span> 天有 <spanclass="math inline">\(T_i\)</span> 条申请，总共有 <spanclass="math inline">\(S_i\)</span> 个口罩发放名额。随后 <spanclass="math inline">\(T_i\)</span>行，每行给出一条申请信息，格式如下：</p><p><code>姓名 身份证号 身体情况 提交时间</code> 给定数据约束如下：</p><ul><li><code>姓名</code> 是一个长度不超过 10的不包含空格的非空字符串；</li><li><code>身份证号</code> 是一个长度不超过 20 的非空字符串；</li><li><code>身体情况</code> 是 0 或者 1，0 表示自觉良好，1表示有相关症状；</li><li><code>提交时间</code> 是 hh:mm，为24小时时间（由 00:00 到23:59。例如 09:08。）。注意，给定的记录的提交时间不一定有序；</li><li><code>身份证号</code>各不相同，同一个身份证号被认为是同一个人，数据保证同一个身份证号姓名是相同的。能发放口罩的记录要求如下：</li></ul><p>身份证号 必须是 18 位的数字（可以包含前导0）； 同一个身份证号若在第<span class="math inline">\(i\)</span> 天申请成功，则接下来的 <spanclass="math inline">\(P\)</span> 天不能再次申请。也就是说，若第 <spanclass="math inline">\(i\)</span> 天申请成功，则等到第 <spanclass="math inline">\(i+P+1\)</span> 天才能再次申请；在上面两条都符合的情况下，按照提交时间的先后顺序发放，直至全部记录处理完毕或<span class="math inline">\(S_i\)</span>个名额用完。如果提交时间相同，则按照在列表中出现的先后顺序决定。 ##输出格式:对于每一天的申请记录，每行输出一位得到口罩的人的姓名及身份证号，用一个空格隔开。顺序按照发放顺序确定。</p><p>在输出完发放记录后，你还需要输出有合法记录的、身体状况为 1的申请人的姓名及身份证号，用空格隔开。顺序按照申请记录中出现的顺序确定，同一个人只需要输出一次。</p><h2 id="输入样例-4">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4 25 3A 123456789012345670 1 13:58B 123456789012345671 0 13:58C 12345678901234567 0 13:22D 123456789012345672 0 03:24C 123456789012345673 0 13:594 3A 123456789012345670 1 13:58E 123456789012345674 0 13:59C 123456789012345673 0 13:59F F 0 14:001 3E 123456789012345674 1 13:581 1A 123456789012345670 0 14:11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-5">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">D 123456789012345672A 123456789012345670B 123456789012345671E 123456789012345674C 123456789012345673A 123456789012345670A 123456789012345670E 123456789012345674<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="样例解释-1">样例解释：</h2><p>输出中，第一行到第三行是第一天的部分；第四、五行是第二天的部分；第三天没有符合要求的市民；第六行是第四天的部分。最后两行按照出现顺序输出了可能存在身体不适的人员。</p><h2 id="code-4">Code:</h2><p>超时。。。 <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">people</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// char id[21];</span>    <span class="token keyword">int</span> latest_time<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>people<span class="token punctuation">[</span><span class="token number">30000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ills</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ills<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ills_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">today</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// int con;</span>    <span class="token keyword">int</span> hh<span class="token punctuation">;</span>    <span class="token keyword">int</span> mm<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>today<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> total_today<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">findid</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">findcon</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ills_total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>ills<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">validity</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token operator">&lt;</span><span class="token char">'0'</span> <span class="token operator">||</span> <span class="token operator">*</span>str<span class="token operator">></span><span class="token char">'9'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        str<span class="token operator">++</span><span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">today</span> <span class="token punctuation">(</span><span class="token operator">*</span>_a<span class="token punctuation">)</span><span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">today</span> <span class="token punctuation">(</span><span class="token operator">*</span>_b<span class="token punctuation">)</span><span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>_a<span class="token punctuation">)</span><span class="token punctuation">.</span>hh<span class="token operator">==</span><span class="token punctuation">(</span><span class="token operator">*</span>_b<span class="token punctuation">)</span><span class="token punctuation">.</span>hh<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>_a<span class="token punctuation">)</span><span class="token punctuation">.</span>mm <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>_b<span class="token punctuation">)</span><span class="token punctuation">.</span>mm <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>_a<span class="token punctuation">)</span><span class="token punctuation">.</span>hh <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>_b<span class="token punctuation">)</span><span class="token punctuation">.</span>hh <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> D<span class="token punctuation">,</span>P<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>D<span class="token punctuation">,</span><span class="token operator">&amp;</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span>S<span class="token punctuation">;</span>    <span class="token keyword">char</span> temp_name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> temp_id<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp_con<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp_hh<span class="token punctuation">,</span>temp_mm<span class="token punctuation">;</span>    <span class="token keyword">int</span> findans<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>D<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">,</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>        total_today<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>T<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s%d%d:%d"</span><span class="token punctuation">,</span>temp_name<span class="token punctuation">,</span>temp_id<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp_con<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp_hh<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp_mm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp_con<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">validity</span><span class="token punctuation">(</span>temp_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findcon</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>ills<span class="token punctuation">[</span>ills_total<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">strcpy</span><span class="token punctuation">(</span>ills<span class="token punctuation">[</span>ills_total<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>temp_id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ills_total<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            findans<span class="token operator">=</span><span class="token function">findid</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>findans<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>people<span class="token punctuation">[</span>findans<span class="token punctuation">]</span><span class="token punctuation">.</span>latest_time<span class="token operator">+</span>P<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">validity</span><span class="token punctuation">(</span>temp_id<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>today<span class="token punctuation">[</span>total_today<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>today<span class="token punctuation">[</span>total_today<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>temp_id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// today[total_today].con=temp_con;</span>                today<span class="token punctuation">[</span>total_today<span class="token punctuation">]</span><span class="token punctuation">.</span>hh<span class="token operator">=</span>temp_hh<span class="token punctuation">;</span>                today<span class="token punctuation">[</span>total_today<span class="token punctuation">]</span><span class="token punctuation">.</span>mm<span class="token operator">=</span>temp_mm<span class="token punctuation">;</span>                total_today<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>today<span class="token punctuation">,</span>total_today<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">today</span><span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token punctuation">(</span>total_today<span class="token operator">></span>S<span class="token operator">?</span>S<span class="token operator">:</span>total_today<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span>today<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>today<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            findans<span class="token operator">=</span><span class="token function">findid</span><span class="token punctuation">(</span>today<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>findans<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>people<span class="token punctuation">[</span>total<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>today<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// strcpy(people[total].id,today[j].id);</span>                people<span class="token punctuation">[</span>total<span class="token punctuation">]</span><span class="token punctuation">.</span>latest_time<span class="token operator">=</span>i<span class="token punctuation">;</span>                total<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                people<span class="token punctuation">[</span>findans<span class="token punctuation">]</span><span class="token punctuation">.</span>latest_time<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ills_total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span>ills<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>ills<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++读取字符串方式汇总</title>
    <link href="/2023/11/15/C-%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
    <url>/2023/11/15/C-%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>在C++中，读取字符串的方法主要有以下几种：</p><h1 id="使用-cin">使用 cin：</h1><p><code>cin</code> 是C++中最基础的输入方法，常与 <code>&gt;&gt;</code>操作符一起使用。 ## 示例代码： <figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main() &#123;    string str;    cin &gt;&gt; str;  &#x2F;&#x2F; 读取一个字符串，直到遇到空格    cout &lt;&lt; str;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="使用-getline-函数">使用 getline() 函数：</h1><p><code>getline()</code> 函数用于读取一行字符串，直到遇到换行符。它可以从 <code>cin</code> 或其他输入流中读取。 ## 示例代码：<figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main() &#123;    string str;    getline(cin, str);  &#x2F;&#x2F; 读取一行字符串    cout &lt;&lt; str;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="使用-stringstream-类">使用 stringstream 类：</h1><p><code>stringstream</code>类可以从字符串中读取数据，类似于从文件或标准输入中读取。 ## 示例代码：<figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;sstream&gt;using namespace std;int main() &#123;    string str &#x3D; &quot;example string&quot;;    stringstream ss(str);    string word;    while (ss &gt;&gt; word) &#123;  &#x2F;&#x2F; 从stringstream读取单词        cout &lt;&lt; word &lt;&lt; endl;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="使用文件输入流-ifstream">使用文件输入流 (ifstream)：</h1><p>如果字符串来自文件，可以使用 <code>ifstream</code> 读取。 ##示例代码： <figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;using namespace std;int main() &#123;    ifstream file(&quot;example.txt&quot;);    string str;    while (getline(file, str)) &#123;  &#x2F;&#x2F; 从文件中逐行读取        cout &lt;&lt; str &lt;&lt; endl;    &#125;    file.close();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>这些方法可以根据具体需求和上下文来选择使用。例如，当你需要读取含空格的整行字符串时，<code>getline()</code>是更好的选择，而 <code>cin</code> 更适合于分段读取或读取单个词汇。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++中string类的操作方法大全</title>
    <link href="/2023/11/15/C-%E4%B8%ADstring%E7%B1%BB%E7%9A%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E5%A4%A7%E5%85%A8/"/>
    <url>/2023/11/15/C-%E4%B8%ADstring%E7%B1%BB%E7%9A%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<p>在 C++ 中，<code>string</code>类型是一种非常灵活的数据类型，用于处理文本。这里是 <code>string</code>类的一些主要操作方法：</p><h1 id="构造函数">构造函数:</h1><ul><li><code>string()</code>: 创建一个空字符串。</li><li><code>string(const string&amp; str)</code>: 复制构造函数。</li><li><code>string(const string&amp; str, size_type pos, size_type len = npos)</code>:从另一个字符串中创建子字符串。</li><li><code>string(const char* s)</code>: 从 C 风格字符串创建字符串。</li><li><code>string(const char* s, size_type n)</code>: 从 C 风格字符串的前n 个字符创建字符串。</li><li><code>string(size_type n, char c)</code>: 创建一个重复 n 次字符 c的字符串。</li></ul><h1 id="赋值操作">赋值操作:</h1><ul><li><code>string&amp; operator=(const string&amp; str)</code>:赋值运算符。</li><li><code>string&amp; operator=(const char* s)</code>: 将 C风格字符串赋给当前字符串。</li><li><code>string&amp; operator=(char c)</code>: 将字符 c赋给当前字符串。</li></ul><h1 id="元素访问">元素访问:</h1><ul><li><code>char&amp; operator[](size_type pos)</code>:访问指定位置的字符。</li><li><code>const char&amp; operator[](size_type pos) const</code>:访问指定位置的字符（const 版本）。</li><li><code>char&amp; at(size_type pos)</code>: 类似于operator[]，但包含边界检查。</li><li><code>const char&amp; at(size_type pos) const</code>:边界检查的访问（const 版本）。</li><li><code>char&amp; back()</code>: 访问最后一个字符。</li><li><code>const char&amp; back() const</code>: 访问最后一个字符（const版本）。</li><li><code>char&amp; front()</code>: 访问第一个字符。</li><li><code>const char&amp; front() const</code>: 访问第一个字符（const版本）。</li></ul><h1 id="字符串操作">字符串操作:</h1><ul><li><code>string&amp; operator+=(const string&amp; str)</code>:连接另一个字符串。</li><li><code>string&amp; append(const string&amp; str)</code>:连接另一个字符串。</li><li><code>string&amp; insert(size_type pos, const string&amp; str)</code>:在指定位置插入另一个字符串。</li><li><code>string&amp; erase(size_type pos = 0, size_type len = npos)</code>:从字符串中移除部分字符。</li><li><code>void swap(string&amp; str)</code>: 交换两个字符串的内容。</li><li><code>const char* c_str() const</code>: 返回 C风格的字符串表示。</li><li><code>const char* data() const</code>: 返回字符串的数组表示。</li><li><code>size_type find(const string&amp; str, size_type pos = 0) const</code>:查找子字符串。</li></ul><h1 id="大小和容量">大小和容量:</h1><ul><li><code>size_type size() const</code>: 返回字符串的长度。</li><li><code>size_type length() const</code>: 与 size()类似，返回字符串的长度。</li><li><code>size_type max_size() const</code>:返回字符串可能的最大长度。</li><li><code>void resize(size_type n, char c)</code>:调整字符串的长度。</li><li><code>size_type capacity() const</code>: 返回字符串当前的容量。</li><li><code>void reserve(size_type n = 0)</code>:请求改变字符串的容量。</li><li><code>bool empty() const</code>: 检查字符串是否为空。</li></ul><h1 id="比较操作">比较操作:</h1><ul><li>重载了各种形式的 <code>operator==</code>, <code>operator!=</code>,<code>operator&lt;</code>, <code>operator&lt;=</code>,<code>operator&gt;</code>,<code>operator&gt;=</code>，用于比较字符串。</li></ul><h1 id="子串">子串:</h1><ul><li><code>string substr(size_type pos = 0, size_type len = npos) const</code>:返回一个子字符串。</li></ul><p>这些方法提供了对字符串的广泛操作，包括创建、修改、比较和查询。这只是<code>std::string</code> 类的一个概览，详细信息可以在 C++标准库文档中找到。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何修复在 MacOS 中找不到 bits/stdc++.h 文件</title>
    <link href="/2023/11/14/%E5%A6%82%E4%BD%95%E4%BF%AE%E5%A4%8D%E5%9C%A8-MacOS-%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0-bits-stdc-h-%E6%96%87%E4%BB%B6/"/>
    <url>/2023/11/14/%E5%A6%82%E4%BD%95%E4%BF%AE%E5%A4%8D%E5%9C%A8-MacOS-%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0-bits-stdc-h-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ol type="1"><li>从 App Store 安装 Xcode 应用程序</li><li>转到路径=<code>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1</code>要轻松执行此操作，请打开<code>Finder</code>并按<code>Cmd+Shift+G</code> 并粘贴此路径地址，它应该会打开。</li><li>创建一个名为<code>bits</code>的文件夹并进入该文件夹。</li><li>在<code>bits</code>文件夹中创建一个名为<code>stdc++.h</code>的文件，并使用任何文本编辑器（例如TextEdit）打开它</li><li>将此存储库中的内容粘贴到 <code>stdc++.h</code>文件：<code>stdc++.h</code></li><li>现在关闭<code>Sublime Text</code>/<code>VS Code</code>并重新打开它并运行C++ 文件。 它应该有效！</li></ol><p>如果不起作用： 7. 使用 path =尝试同样的事情<code>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/</code>8.它现在应该可以工作，但它可能会给您带来错误，例如找不到包含或类似的错误。只需从<code>stdc++.h</code> -------- 文件中删除此包含，然后重试。 9.您可能需要删除多个包含内容，它最终应该可以工作（至少它对我有用！）。就我而言，我必须从<code>stdc++.h</code>中删除以下行：<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdalign></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cuchar></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;memory_resources></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure> 如果仍然不起作用，请尝试使用 path=<code>/usr/local/include</code></p><p>附上<code>stdc++.h</code>文件内容:</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// C++ includes used for precompiling -*- C++ -*-</span><span class="token comment">// Copyright (C) 2003-2023 Free Software Foundation, Inc.</span><span class="token comment">//</span><span class="token comment">// This file is part of the GNU ISO C++ Library.  This library is free</span><span class="token comment">// software; you can redistribute it and/or modify it under the</span><span class="token comment">// terms of the GNU General Public License as published by the</span><span class="token comment">// Free Software Foundation; either version 3, or (at your option)</span><span class="token comment">// any later version.</span><span class="token comment">// This library is distributed in the hope that it will be useful,</span><span class="token comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span><span class="token comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><span class="token comment">// GNU General Public License for more details.</span><span class="token comment">// Under Section 7 of GPL version 3, you are granted additional</span><span class="token comment">// permissions described in the GCC Runtime Library Exception, version</span><span class="token comment">// 3.1, as published by the Free Software Foundation.</span><span class="token comment">// You should have received a copy of the GNU General Public License and</span><span class="token comment">// a copy of the GCC Runtime Library Exception along with this program;</span><span class="token comment">// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see</span><span class="token comment">// &lt;http://www.gnu.org/licenses/>.</span><span class="token comment">/** @file stdc++.h *  This is an implementation file for a precompiled header. */</span><span class="token comment">// 17.4.1.2 Headers</span><span class="token comment">// C</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_GLIBCXX_NO_ASSERT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cfloat></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ciso646></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;csetjmp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdarg></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// C++</span><span class="token comment">// #include &lt;bitset></span><span class="token comment">// #include &lt;complex></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;new></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ratio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;scoped_allocator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeindex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201402L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201703L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;any></span></span><span class="token comment">// #include &lt;execution></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;optional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">202002L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bit></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;compare></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;concepts></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numbers></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ranges></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;source_location></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;version></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">></span> <span class="token number">202002L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;expected></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdatomic.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cpp_impl_coroutine</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;coroutine></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">_GLIBCXX_HOSTED</span></span><span class="token comment">// C</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_GLIBCXX_NO_ASSERT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cerrno></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cfloat></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ciso646></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;clocale></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;csetjmp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;csignal></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdarg></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cwchar></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cwctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ccomplex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cfenv></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cinttypes></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdalign></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdbool></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctgmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cuchar></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// C++</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;complex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;exception></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ios></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iosfwd></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;istream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;locale></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;new></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;streambuf></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;valarray></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201103L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;codecvt></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;forward_list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ratio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;scoped_allocator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;system_error></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeindex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201402L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;shared_mutex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">201703L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;any></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;charconv></span></span><span class="token comment">// #include &lt;execution></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;filesystem></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;optional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory_resource></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">>=</span> <span class="token number">202002L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;barrier></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bit></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;compare></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;concepts></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;format></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;latch></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numbers></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ranges></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stop_token></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;source_location></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syncstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;version></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus <span class="token operator">></span> <span class="token number">202002L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;expected></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;spanstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">__has_include</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>stacktrace<span class="token operator">></span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stacktrace></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdatomic.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdfloat></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// HOSTED</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Inner PK 1</title>
    <link href="/2023/10/30/ACM-Inner-PK-1/"/>
    <url>/2023/10/30/ACM-Inner-PK-1/</url>
    
    <content type="html"><![CDATA[<h1 id="l1-6-斯德哥尔摩火车上的题">L1-6 斯德哥尔摩火车上的题</h1><p>上图是新浪微博上的一则趣闻，是瑞典斯德哥尔摩火车上的一道题，看上去是段伪代码：<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">s <span class="token operator">=</span> <span class="token char">''</span>a <span class="token operator">=</span> <span class="token char">'1112031584'</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">length</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">goto_url</span><span class="token punctuation">(</span><span class="token char">'www.multisoft.se/'</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> 其中字符串的 <code>+</code>操作是连接两个字符串的意思。所以这道题其实是让大家访问网站<code>www.multisoft.se/112358</code>（注意：比赛中千万不要访问这个网址！！！）。</p><p>当然，能通过上述算法得到 <code>112358</code> 的原始字符串<code>a</code>是不唯一的。本题就请你判断，两个给定的原始字符串，能否通过上述算法得到相同的输出？</p><h2 id="输入格式">输入格式：</h2><p>输入为两行仅由数字组成的非空字符串，长度均不超过<code>10^4</code>，以回车结束。</p><h2 id="输出格式">输出格式：</h2><p>对两个字符串分别采用上述斯德哥尔摩火车上的算法进行处理。如果两个结果是一样的，则在一行中输出那个结果；否则分别输出各自对应的处理结果，每个占一行。题目保证输出结果不为空。</p><h2 id="输入样例-1">输入样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1112031584011102315849<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">112358<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输入样例-2">输入样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">11120315841233412341112031584<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-2">输出样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1123583112358<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="code">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> s11<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> s22<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cur<span class="token punctuation">;</span>    cur<span class="token operator">=</span>s11<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span>s1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>cur<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">=</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>s1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">?</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>s1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>cur<span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>    cur<span class="token operator">=</span>s22<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span>s2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>cur<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">=</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>s2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">?</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>s2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>cur<span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s11<span class="token punctuation">,</span>s22<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>s11<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n%s\n"</span><span class="token punctuation">,</span>s11<span class="token punctuation">,</span>s22<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-7-机工士姆斯塔迪奥">L1-7 机工士姆斯塔迪奥</h1><p>在 MMORPG《最终幻想14》的副本“乐欲之所瓯博讷修道院”里，BOSS机工士姆斯塔迪奥将会接受玩家的挑战。</p><p>你需要处理这个副本其中的一个机制：N×M 大小的地图被拆分为了 N×M 个 1×1的格子，BOSS会选择若干行或/及若干列释放技能，玩家不能站在释放技能的方格上，否则就会被击中而失败。</p><p>给定 BOSS所有释放技能的行或列信息，请你计算出最后有多少个格子是安全的。</p><h2 id="输入格式-1">输入格式:</h2><p>输入第一行是三个整数 N,M,Q (1≤N×M≤10^5，0≤Q≤1000)，表示地图为 N 行 M列大小以及选择的行/列数量。</p><p>接下来 Q 行，每行两个数 Ti,Ci，其中 Ti=0 表示 BOSS选择的是一整行，Ti=1 表示选择的是一整列，Ci为选择的行号/列号。行和列的编号均从 1 开始。</p><h2 id="输出格式-1">输出格式:</h2><p>输出一个数，表示安全格子的数量。</p><h2 id="输入样例">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 5 30 20 41 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="code-1">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>Q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> line<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>count_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> row<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>count_r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp1<span class="token punctuation">,</span>temp2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp1<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">&lt;=</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                line<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                count_l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp2<span class="token operator">&lt;=</span>M<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                row<span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                count_r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>N<span class="token operator">-</span>count_l<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>M<span class="token operator">-</span>count_r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l1-8-静静的推荐">L1-8 静静的推荐</h1><p>天梯赛结束后，某企业的人力资源部希望组委会能推荐一批优秀的学生，这个整理推荐名单的任务就由静静姐负责。企业接受推荐的流程是这样的：</p><p>只考虑得分不低于 <code>175</code> 分的学生； 一共接受 <code>K</code>批次的推荐名单； 同一批推荐名单上的学生的成绩原则上应严格递增；如果有的学生天梯赛成绩虽然与前一个人相同，但其参加过 PAT考试，且成绩达到了该企业的面试分数线，则也可以接受。给定全体参赛学生的成绩和他们的 PAT考试成绩，请你帮静静姐算一算，她最多能向企业推荐多少学生？</p><h2 id="输入格式-2">输入格式：</h2><p>输入第一行给出 3个正整数：<code>N</code>（≤10<sup>5）为参赛学生人数，<code>K</code>（≤5×10</sup>3）为企业接受的推荐批次，<code>S</code>（≤100）为该企业的PAT 面试分数线。</p><p>随后 <code>N</code>行，每行给出两个分数，依次为一位学生的天梯赛分数（最高分 290）和 PAT分数（最高分 100）。</p><h2 id="输出格式-2">输出格式：</h2><p>在一行中输出静静姐最多能向企业推荐的学生人数。</p><h2 id="输入样例-3">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 2 90203 0169 91175 88175 0175 90189 0189 0189 95189 89256 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-3">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="样例解释">样例解释：</h2><p>第一批可以选择 175、189、203、256 这四个分数的学生各一名，此外 175 分PAT 分数达到 90 分的学生和 189 分 PAT 分数达到 95分的学生可以额外进入名单。第二批就只剩下 175、189两个分数的学生各一名可以进入名单了。最终一共 8 人进入推荐名单。</p><h2 id="code未优化">Code未优化</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> stu<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">compare_students</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 转换为指向 int 数组的指针</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token comment">// 首先比较成绩</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 成绩相同，比较第二个标准</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 成绩不同，按成绩排序</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">swapstu</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>K<span class="token punctuation">,</span>S<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">,</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//qsort(stu,N,sizeof(int)*3,compare);</span>    <span class="token comment">// for(int i=0;i&lt;N;i++)&#123;</span>    <span class="token comment">//     for(int j=0;j&lt;N-i-1;j++)&#123;</span>    <span class="token comment">//         if(stu[j][0]==stu[j+1][0])&#123;</span>    <span class="token comment">//             if(stu[j][1]>stu[j+1][1])&#123;</span>    <span class="token comment">//                 swapstu(j);</span>    <span class="token comment">//             &#125;</span>    <span class="token comment">//         &#125;else if(stu[j][0]>stu[j+1][0])&#123;</span>    <span class="token comment">//             swapstu(j);</span>    <span class="token comment">//         &#125;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">// &#125;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>compare_students<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// for(int i=0;i&lt;N;i++)&#123;</span>    <span class="token comment">//     if(stu[i][0]>=175)&#123;</span>    <span class="token comment">//         head=i;</span>    <span class="token comment">//         break;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">// &#125;</span>    <span class="token comment">//改为二分查找</span>    <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tail<span class="token operator">=</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;=</span>tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m<span class="token operator">=</span><span class="token punctuation">(</span>head<span class="token operator">+</span>tail<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tail<span class="token operator">=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//Debug</span>    <span class="token comment">//printf("%d\n",head);</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>K<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                front<span class="token operator">=</span>i<span class="token punctuation">;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// if(stu[i][0]>stu[front][0] &amp;&amp; stu[i][2]==0)&#123;</span>            <span class="token comment">//     ans++;</span>            <span class="token comment">//     stu[i][2]=1;</span>            <span class="token comment">//     front=i;</span>            <span class="token comment">// &#125;else if(stu[i][0]==stu[front][0] &amp;&amp; stu[i][1]>=S &amp;&amp; stu[front][1]&lt;S &amp;&amp; stu[i][2]==0)&#123;</span>            <span class="token comment">//     ans++;</span>            <span class="token comment">//     stu[i][2]=1;</span>            <span class="token comment">//     front=i;</span>            <span class="token comment">// &#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>stu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>S<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>stu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                front<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//Debug</span>            <span class="token comment">// printf("*%d*%d\n",i,ans);</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Debug</span>        <span class="token comment">// for(int i=0;i&lt;N;i++)&#123;</span>        <span class="token comment">//     printf("%d %d %d %d\n",K,stu[i][0],stu[i][1],stu[i][2]);</span>        <span class="token comment">// &#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code精简版但超时">Code精简版但超时：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> stu<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>student_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>K<span class="token punctuation">,</span>S<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">,</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tail<span class="token operator">=</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;=</span>tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m<span class="token operator">=</span><span class="token punctuation">(</span>head<span class="token operator">+</span>tail<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tail<span class="token operator">=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>K<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                front<span class="token operator">=</span>i<span class="token punctuation">;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>stu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>S<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>stu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                front<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-1-插松枝">L2-1 插松枝</h1><p>人造松枝加工场的工人需要将各种尺寸的塑料松针插到松枝干上，做成大大小小的松枝。他们的工作流程（并不）是这样的：</p><p>每人手边有一只小盒子，初始状态为空。每人面前有用不完的松枝干和一个推送器，每次推送一片随机型号的松针片。工人首先捡起一根空的松枝干，从小盒子里摸出最上面的一片松针 ——如果小盒子是空的，就从推送器上取一片松针。将这片松针插到枝干的最下面。工人在插后面的松针时，需要保证，每一步插到一根非空松枝干上的松针片，不能比前一步插上的松针片大。如果小盒子中最上面的松针满足要求，就取之插好；否则去推送器上取一片。如果推送器上拿到的仍然不满足要求，就把拿到的这片堆放到小盒子里，继续去推送器上取下一片。注意这里假设小盒子里的松针片是按放入的顺序堆叠起来的，工人每次只能取出最上面（即最后放入）的一片。当下列三种情况之一发生时，工人会结束手里的松枝制作，开始做下一个：（1）小盒子已经满了，但推送器上取到的松针仍然不满足要求。此时将手中的松枝放到成品篮里，推送器上取到的松针压回推送器，开始下一根松枝的制作。</p><p>（2）小盒子中最上面的松针不满足要求，但推送器上已经没有松针了。此时将手中的松枝放到成品篮里，开始下一根松枝的制作。</p><p>（3）手中的松枝干上已经插满了松针，将之放到成品篮里，开始下一根松枝的制作。</p><p>现在给定推送器上顺序传过来的 N片松针的大小，以及小盒子和松枝的容量，请你编写程序自动列出每根成品松枝的信息。</p><h2 id="输入格式-3">输入格式：</h2><p>输入在第一行中给出 3个正整数：<code>N</code>（≤10^3），为推送器上松针片的数量；<code>M</code>（≤20）为小盒子能存放的松针片的最大数量；<code>K</code>（≤5）为一根松枝干上能插的松针片的最大数量。</p><p>随后一行给出 <code>N</code> 个不超过 <code>100</code>的正整数，为推送器上顺序推出的松针片的大小。</p><h2 id="输出格式-3">输出格式：</h2><p>每支松枝成品的信息占一行，顺序给出自底向上每片松针的大小。数字间以 1个空格分隔，行首尾不得有多余空格。</p><h2 id="输入样例-4">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">8 3 420 25 15 18 20 18 8 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-4">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">20 1520 18 18 825 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-2">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span> <span class="token comment">//推送器上松针片的数量</span>    <span class="token keyword">int</span> M<span class="token punctuation">;</span> <span class="token comment">//小盒子能存放的松针片的最大数量</span>    <span class="token keyword">int</span> K<span class="token punctuation">;</span> <span class="token comment">//一根松枝干上能插的松针片的最大数量</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leaf<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//推送器上顺序推出的松针片的大小</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>leaf<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//记录每个tree上的松针</span>    <span class="token keyword">int</span> working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//当前处理的tree上的位置</span>    <span class="token keyword">int</span> box<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//小盒子的栈</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//栈的cur</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//Debug</span>        <span class="token comment">// printf("*\n");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//tree上没有任何叶片</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从box里拿</span>                tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                cur<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//从leaf里拿</span>                tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            working_posi<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//tree上有叶片</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//box里有叶子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从box里拿</span>                    tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                    box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                    cur<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//从leaf里拿</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        i<span class="token operator">++</span><span class="token punctuation">;</span>                        working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//不符合，把leaf来的放到box里去</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            cur<span class="token operator">++</span><span class="token punctuation">;</span>                            box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                            i<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//box里没有叶子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                    working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//leaf里的拿到box里去</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>M<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        cur<span class="token operator">++</span><span class="token punctuation">;</span>                        box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        i<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Debug</span>        <span class="token comment">// printf("Box: ");</span>        <span class="token comment">// for(int j=0;j&lt;M;j++)&#123;</span>        <span class="token comment">//     printf("%d ",box[j]);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// printf("\n");</span>        <span class="token comment">// printf("Tree: ");</span>        <span class="token comment">// for(int j=0;j&lt;K;j++)&#123;</span>        <span class="token comment">//     printf("%d ",tree[j]);</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// printf("\n");</span>        <span class="token comment">//Debug</span>        <span class="token comment">// printf("posi=%d,flag=%d,\n",working_posi,flag);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">==</span>K <span class="token operator">||</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//处理tree上未输出的</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//处理box里多余的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tree<span class="token punctuation">[</span>working_posi<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>working_posi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> working_posi<span class="token operator">!=</span>K<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tree<span class="token punctuation">[</span>working_posi<span class="token punctuation">]</span><span class="token operator">=</span>box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                working_posi<span class="token operator">++</span><span class="token punctuation">;</span>                box<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                cur<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>working_posi<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//处理tree上多余的</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>working_posi<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        working_posi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-2-老板的作息表">L2-2 老板的作息表</h1><p>新浪微博上有人发了某老板的作息时间表，表示其每天 4:30就起床了。但立刻有眼尖的网友问：这时间表不完整啊，早上九点到下午一点干啥了？</p><p>本题就请你编写程序，检查任意一张时间表，找出其中没写出来的时间段。</p><h2 id="输入格式-4">输入格式：</h2><p>输入第一行给出一个正整数 N，为作息表上列出的时间段的个数。随后 N行，每行给出一个时间段，格式为：<code>hh:mm:ss - hh:mm:ss</code>其中<code>hh</code>、<code>mm</code>、<code>ss</code>分别是两位数表示的小时、分钟、秒。第一个时间是开始时间，第二个是结束时间。题目保证所有时间都在一天之内（即从<code>00:00:00</code> 到 <code>23:59:59</code>）；每个区间间隔至少<code>1</code>秒；并且任意两个给出的时间区间最多只在一个端点有重合，没有区间重叠的情况。</p><h2 id="输出格式-4">输出格式：</h2><p>按照时间顺序列出时间表中没有出现的区间，每个区间占一行，格式与输入相同。题目保证至少存在一个区间需要输出。</p><h2 id="输入样例-5">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">813:00:00 - 18:00:0000:00:00 - 01:00:0508:00:00 - 09:00:0007:10:59 - 08:00:0001:00:05 - 04:30:0006:30:00 - 07:10:5805:30:00 - 06:30:0018:00:00 - 19:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-5">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">04:30:00 - 05:30:0007:10:58 - 07:10:5909:00:00 - 13:00:0019:00:00 - 23:59:59<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-3">Code:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">ttos</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">stoh</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">stom</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">/</span><span class="token number">60</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">stos</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ss<span class="token punctuation">[</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> h1<span class="token punctuation">,</span>m1<span class="token punctuation">,</span>s1<span class="token punctuation">,</span>h2<span class="token punctuation">,</span>m2<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d:%d - %d:%d:%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>h1<span class="token punctuation">,</span><span class="token operator">&amp;</span>m1<span class="token punctuation">,</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>h2<span class="token punctuation">,</span><span class="token operator">&amp;</span>m2<span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">ttos</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span>m1<span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">ttos</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span>m2<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//标记上一个0在哪里</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ss<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d - %02d:%02d:%02d\n"</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ss<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">=</span>i<span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d - %02d:%02d:%02d\n"</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stoh</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stom</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">stos</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l2-3-龙龙送外卖">L2-3 龙龙送外卖</h1><p>龙龙是“饱了呀”外卖软件的注册骑手，负责送帕特小区的外卖。帕特小区的构造非常特别，都是双向道路且没有构成环——你可以简单地认为小区的路构成了一棵树，根结点是外卖站，树上的结点就是要送餐的地址。</p><p>每到中午 12点，帕特小区就进入了点餐高峰。一开始，只有一两个地方点外卖，龙龙简单就送好了；但随着大数据的分析，龙龙被派了更多的单子，也就送得越来越累……</p><p>看着一大堆订单，龙龙想知道，从外卖站出发，访问所有点了外卖的地方至少一次（这样才能把外卖送到）所需的最短路程的距离到底是多少？每次新增一个点外卖的地址，他就想估算一遍整体工作量，这样他就可以搞明白新增一个地址给他带来了多少负担。</p><h2 id="输入格式-5">输入格式:</h2><p>输入第一行是两个数 <code>N</code> 和 <code>M</code><code>(2≤N≤10^5, 1≤M≤10^5)</code>，分别对应树上节点的个数（包括外卖站），以及新增的送餐地址的个数。</p><p>接下来首先是一行 <code>N</code> 个数，第 <code>i</code> 个数表示第<code>i</code> 个点的双亲节点的编号。节点编号从 <code>1</code> 到<code>N</code>，外卖站的双亲编号定义为 <code>−1</code>。</p><p>接下来有 <code>M</code> 行，每行给出一个新增的送餐地点的编号<code>Xi</code>。保证送餐地点中不会有外卖站，但地点有可能会重复。</p><p>为了方便计算，我们可以假设龙龙一开始一个地址的外卖都不用送，两个相邻的地点之间的路径长度统一设为<code>1</code>，且从外卖站出发可以访问到所有地点。</p><p>注意：所有送餐地址可以按任意顺序访问，且完成送餐后无需返回外卖站。</p><h2 id="输出格式-5">输出格式:</h2><p>对于每个新增的地点，在一行内输出题目需要求的最短路程的距离。</p><h2 id="输入样例-6">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7 4-1 1 1 1 2 2 35624<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-6">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2446<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="我的code">我的Code：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> node<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//记录每个节点的父节点</span><span class="token keyword">int</span> stop<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//送餐地址</span><span class="token comment">// int next[100001][1000]; //记录每个节点的子节点</span><span class="token comment">// int next_cur[100001];</span><span class="token comment">// int dfs(int target, int current, int depth)&#123;</span><span class="token comment">//     printf("%d,%d,%d\n",target,current,depth);</span><span class="token comment">//     for(int i=0;i&lt;next_cur[current];i++)&#123;</span><span class="token comment">//         if(target==next[current][i])&#123;</span><span class="token comment">//             return depth+1;</span><span class="token comment">//         &#125;else&#123;</span><span class="token comment">//             if(dfs(target,next[current][i],depth+1)!=-1)</span><span class="token comment">//                 return dfs(target,next[current][i],depth+1);</span><span class="token comment">//             else&#123;</span><span class="token comment">//                 continue;</span><span class="token comment">//             &#125;</span><span class="token comment">//         &#125;</span><span class="token comment">//     &#125;</span><span class="token comment">// &#125;</span><span class="token keyword">int</span> <span class="token function">findsons</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//查找子节点</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//printf("Findsons:\n");</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            cur<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//printf("%d,%d",node[i],target);</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//表示没有查找到</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//表示查找到了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> current<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d\n"</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findsons</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>N<span class="token punctuation">,</span>array<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//表示到底了，没有子节点</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> depth<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        temp<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>array<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span>N<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// if(target!=array[cur])&#123;</span>        <span class="token comment">//     if(dfs(array[cur],N,depth+1)==-1)&#123;</span>        <span class="token comment">//         continue;</span>        <span class="token comment">//     &#125;else&#123;</span>        <span class="token comment">//         return dfs(array[cur],N,depth+1);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;else&#123;</span>        <span class="token comment">//     return 0;</span>        <span class="token comment">// &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span> <span class="token comment">//树上节点的个数（包括外卖站）</span>    <span class="token keyword">int</span> M<span class="token punctuation">;</span> <span class="token comment">//新增的送餐地址的个数</span>    <span class="token comment">// memset(next,-1,sizeof(next));</span>    <span class="token comment">// memset(next_cur,0,sizeof(next_cur));</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>node<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>stop<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// next[stop[i]][next_cur[stop[i]]++]=i;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>stop<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 0</span><span class="token comment">// 1   2     3</span><span class="token comment">// 4 5 6 7 8 9</span><span class="token comment">// -1 1 1 1 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-4">Code：</h2><p>我思考的方向错误了。应该从子节点的位置去一步步找父节点，从而获得深度。<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>max<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    sum<span class="token operator">++</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 使用 0 初始化 d 数组</span>    <span class="token punctuation">&#125;</span>    sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        max<span class="token operator">=</span><span class="token punctuation">(</span>max <span class="token operator">></span> <span class="token function">dfs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> max <span class="token operator">:</span> <span class="token function">dfs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用三元操作符找出最大值</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="l2-4-大众情人">L2-4 大众情人</h1><p>人与人之间总有一点距离感。我们假定两个人之间的亲密程度跟他们之间的距离感成反比，并且距离感是单向的。例如小蓝对小红患了单相思，从小蓝的眼中看去，他和小红之间的距离为1，只差一层窗户纸；但在小红的眼里，她和小蓝之间的距离为108000，差了十万八千里……另外，我们进一步假定，距离感在认识的人之间是可传递的。例如小绿觉得自己跟小蓝之间的距离为2，则即使小绿并不直接认识小红，我们也默认小绿早晚会认识小红，并且因为跟小蓝很亲近的关系，小绿会觉得自己跟小红之间的距离为1+2=3。当然这带来一个问题，如果小绿本来也认识小红，或者他通过其他人也能认识小红，但通过不同渠道推导出来的距离感不一样，该怎么算呢？我们在这里做个简单定义，就将小绿对小红的距离感定义为所有推导出来的距离感的最小值。</p><p>一个人的异性缘不是由最喜欢他/她的那个异性决定的，而是由对他/她最无感的那个异性决定的。我们记一个人<span class="math inline">\(i\)</span> 在一个异性 <spanclass="math inline">\(j\)</span> 眼中的距离感为 <spanclass="math inline">\(D_{ij}\)</span>；将 <spanclass="math inline">\(i\)</span> 的“异性缘”定义为 <spanclass="math inline">\(\frac{1}{\max_{j \in S(i)}\{D_{ij}\}}\)</span>，其中 <span class="math inline">\(S(i)\)</span>是相对于 <span class="math inline">\(i\)</span>的所有异性的集合。那么“大众情人”就是异性缘最好（值最大）的那个人。</p><p>本题就请你从给定的一批人与人之间的距离感中分别找出两个性别中的“大众情人”。</p><h2 id="输入格式-6">输入格式：</h2><p>输入在第一行中给出一个正整数 <spanclass="math inline">\(N（≤500）\)</span>，为总人数。于是我们默认所有人从 <span class="math inline">\(1\)</span>到 <span class="math inline">\(N\)</span> 编号。</p><p>随后 <span class="math inline">\(N\)</span> 行，第 <spanclass="math inline">\(i\)</span> 行描述了编号为 <spanclass="math inline">\(i\)</span> 的人与其他人的关系，格式为：<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">性别 K 朋友1:距离1 朋友2:距离2 …… 朋友K:距离K<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> 其中 <code>性别</code> 是这个人的性别，<code>F</code>表示女性，<code>M</code> 表示男性；<code>K</code>（ &lt; N的非负整数）为这个人直接认识的朋友数；随后给出的是这 <code>K</code>个朋友的编号、以及这个人对该朋友的距离感。距离感是不超过 <spanclass="math inline">\(10^6\)</span> 的正整数。</p><p>题目保证给出的关系中一定两种性别的人都有，不会出现重复给出的关系，并且每个人的朋友中都不包含自己。</p><h2 id="输出格式-6">输出格式：</h2><p>第一行给出自身为女性的“大众情人”的编号，第二行给出自身为男性的“大众情人”的编号。如果存在并列，则按编号递增的顺序输出所有。数字间以一个空格分隔，行首尾不得有多余空格。</p><h2 id="输入样例-7">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">6F 1 4:1F 2 1:3 4:10F 2 4:2 2:2M 2 5:1 3:2M 2 2:2 6:2M 2 3:1 2:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-7">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2 34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="false-code">False Code：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> distance<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> breadth<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// void bfs(int current, int target, int n, int dis)&#123;</span><span class="token comment">//     // int route[501];</span><span class="token comment">//     // memset(route,-1,sizeof(route));</span><span class="token comment">//     printf("%d,%d,%d\n",current,target,dis);</span><span class="token comment">//     for(int i=1;i&lt;=n;i++)&#123;</span><span class="token comment">//         if(distance[current][i]!=-1)&#123;</span><span class="token comment">//             if(breadth[current][i]>dis+distance[current][i])&#123;</span><span class="token comment">//                 breadth[current][i]=dis+distance[current][i];</span><span class="token comment">//             &#125;</span><span class="token comment">//             bfs(i,target,n,breadth[current][i]);</span><span class="token comment">//         &#125;</span><span class="token comment">//     &#125;</span><span class="token comment">// &#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>distance<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取</span>    <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">int</span> K<span class="token punctuation">;</span>    <span class="token keyword">int</span> friend<span class="token punctuation">,</span>dis<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>gender<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%c前面空格以消除缓存区的回车</span>        distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>gender<span class="token operator">==</span><span class="token char">'F'</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        distance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>gender<span class="token operator">==</span><span class="token char">'F'</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>K<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>friend<span class="token punctuation">,</span><span class="token operator">&amp;</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>            distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>friend<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//Debug</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d "</span><span class="token punctuation">,</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//完善图</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>i <span class="token operator">&amp;&amp;</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>breadth<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>breadth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化bfs所需要的图</span>                <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>breadth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//用bfs求dis</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//Debug</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d "</span><span class="token punctuation">,</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="code-5">Code：</h2><p>这道题真的牛批。我第十行注释掉的初始化方法居然是错误的。然后后面有一个min变量，初始化1e6+1也是错误的，2e8也错，要INT_MAX才行。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;limits.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> distance<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// for(i=0;i&lt;=n;i++)</span>    <span class="token comment">//     for(j=0;j&lt;=n;j++)&#123;</span>    <span class="token comment">//         distance[i][j]=2000000;</span>    <span class="token comment">//     &#125;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>distance<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//读取</span>    <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">int</span> K<span class="token punctuation">;</span>    <span class="token keyword">int</span> friend<span class="token punctuation">,</span>dis<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>gender<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%c前面空格以消除缓存区的回车</span>        distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>gender<span class="token operator">==</span><span class="token char">'F'</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        distance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>gender<span class="token operator">==</span><span class="token char">'F'</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>K<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>friend<span class="token punctuation">,</span><span class="token operator">&amp;</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token operator">&lt;</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>friend<span class="token punctuation">]</span><span class="token punctuation">)</span>                distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>friend<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//补全图</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>distance<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>distance<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//计算每个人的异性缘</span>    <span class="token keyword">int</span> popularity<span class="token punctuation">[</span><span class="token number">502</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>popularity<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>popularity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>distance<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>distance<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    max<span class="token operator">=</span>distance<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        popularity<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//输出结果</span>    <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        min<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">&amp;&amp;</span> min<span class="token operator">></span>popularity<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                min<span class="token operator">=</span>popularity<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">&amp;&amp;</span> min<span class="token operator">==</span>popularity<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                t<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2id="网上提供的c代码重写cchatgpt4.0">网上提供的C++代码重写C（ChatGPT4.0）:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">510</span></span></span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sex<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'F'</span><span class="token punctuation">)</span>             sex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             sex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> sex<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> k<span class="token punctuation">)</span>             d <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> k <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>                     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="l3-1-千手观音">L3-1 千手观音</h1><p>人类喜欢用 10 进制，大概是因为人类有一双手 10根手指用于计数。于是在千手观音的世界里，数字都是 10000进制的，因为每位观音有 1000 双手 ……</p><p>千手观音们的每一根手指都对应一个符号（但是观音世界里的符号太难画了，我们暂且用小写英文字母串来代表），就好像人类用自己的10 根手指对应 0 到 9 这 10 个数字。同样的，就像人类把这 10个数字排列起来表示更大的数字一样，ta们也把这些名字排列起来表示更大的数字，并且也遵循左边高位右边低位的规则，相邻名字间用一个点. 分隔，例如 pat.pta.cn 表示千手观音世界里的一个 3 位数。</p><p>人类不知道这些符号代表的数字的大小。不过幸运的是，人类发现了千手观音们留下的一串数字，并且有理由相信，这串数字是从小到大有序的！于是你的任务来了：请你根据这串有序的数字，推导出千手观音每只手代表的符号的相对顺序。</p><p>注意：有可能无法根据这串数字得到全部的顺序，你只要尽量推出能得到的结果就好了。当若干根手指之间的相对顺序无法确定时，就暂且按它们的英文字典序升序排列。例如给定下面几个数字：<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">patcnlao.cnlao.omspta.laopta.patcn.pat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> 我们首先可以根据前两个数字推断<code>pat &lt; cn</code>；根据左边高位的顺序可以推断<code>lao &lt; pta &lt; cn</code>；再根据高位相等时低位的顺序，可以推断出<code>cn &lt; oms</code>，<code>lao &lt; pat</code>。综上我们得到两种可能的顺序：<code>lao &lt; pat &lt; pta &lt; cn &lt; oms</code>；或者<code>lao &lt; pta &lt; pat &lt; cn &lt; oms</code>，即 <code>pat</code>和 <code>pta</code> 之间的相对顺序无法确定，这时我们按字典序排列，得到<code>lao &lt; pat &lt; pta &lt; cn &lt; oms</code>。</p><h2 id="输入格式-7">输入格式：</h2><p>输入第一行给出一个正整数 <span class="math inline">\(N(≤10^5)\)</span>，为千手观音留下的数字的个数。随后 <spanclass="math inline">\(N\)</span>行，每行给出一个千手观音留下的数字，不超过 10 位数，每一位的符号用不超过3 个小写英文字母表示，相邻两符号之间用 <code>.</code> 分隔。</p><p>我们假设给出的数字顺序在千手观音的世界里是严格递增的。题目保证数字是10^4进制的，即符号的种类肯定不超过 <spanclass="math inline">\(10^4\)</span> 种。</p><h2 id="输出格式-7">输出格式：</h2><p>在一行中按大小递增序输出符号。当若干根手指之间的相对顺序无法确定时，按它们的英文字典序升序排列。符号间仍然用. 分隔。</p><h2 id="输入样例-8">输入样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7patcnlao.cnlao.omspta.laopta.patcn.pat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-8">输出样例：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">lao.pat.pta.cn.oms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="l3-2-关于深度优先搜索和逆序对的题应该不会很难吧这件事">L3-2关于深度优先搜索和逆序对的题应该不会很难吧这件事</h1><h2 id="背景知识">背景知识</h2><h3 id="深度优先搜索与-dfs-序">深度优先搜索与 DFS 序</h3><p>深度优先搜索算法（DFS）是一种用于遍历或搜索树或图的算法。以下伪代码描述了在树<span class="math inline">\(T\)</span> 上进行深度优先搜索的过程：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">procedure DFS(T, u, L)      &#x2F;&#x2F; T 是被深度优先搜索的树                            &#x2F;&#x2F; u 是当前搜索的节点                            &#x2F;&#x2F; L 是一个链表，保存了所有节点被第一次访问的顺序  append u to L             &#x2F;&#x2F; 将节点 u 添加到链表 L 的末尾  for v in u.children do    &#x2F;&#x2F; 枚举节点 u 的所有子节点 v    DFS(T, v)               &#x2F;&#x2F; 递归搜索节点 v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>令 <span class="math inline">\(r\)</span> 为树 <spanclass="math inline">\(T\)</span> 的根，调用 <code>DFS(T, r, L)</code>即可完成对 <span class="math inline">\(T\)</span>的深度优先搜索，保存在链表 <span class="math inline">\(L\)</span>中的排列被称为 DFS序。相信聪明的你已经发现了，如果枚举子节点的顺序不同，最终得到的 DFS序也会不同。</p><h3 id="逆序对">逆序对</h3><p>给定一个长度为 <span class="math inline">\(n\)</span> 的整数序列<span class="math inline">\(a_1, a_2, ⋯, a_n\)</span>，该序列的逆序对数量是同时满足以下条件的有序数对 <spanclass="math inline">\((i,j)\)</span> 的数量：</p><p><span class="math display">\[ 1 \leq i &lt; j \leq n \]</span> <spanclass="math display">\[ a_i &gt; a_j \]</span></p><h2 id="问题求解">问题求解</h2><p>给定一棵 <span class="math inline">\(n\)</span> 个节点的树，其中节点<span class="math inline">\(r\)</span> 为根。求该树所有可能的 DFS序中逆序对数量之和。</p><h2 id="输入格式-8">输入格式</h2><p>第一行输入两个整数 <spanclass="math inline">\(n，r（2≤n≤3×10^5，1≤r≤n）\)</span>表示树的大小与根节点。</p><p>对于接下来的 <span class="math inline">\((n−1)\)</span> 行，第 <spanclass="math inline">\(i\)</span> 行输入两个整数 <spanclass="math inline">\(u_i\)</span> 与 <spanclass="math inline">\(v_i（1≤u_i,v_i≤n）\)</span>，表示树上有一条边连接节点<span class="math inline">\(u_i\)</span> 与 <spanclass="math inline">\(v_i\)</span> 。</p><h2 id="输出格式-8">输出格式</h2><p>输出一行一个整数，表示该树所有可能的 DFS序中逆序对数量之和。由于答案可能很大，请对 <spanclass="math inline">\(10^9+7\)</span> 取模后输出。</p><h2 id="样例输入-1">样例输入 1</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 31 52 53 54 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="样例输出-1">样例输出 1</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="样例输入-2">样例输入 2</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10 510 22 510 77 17 94 23 1010 83 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="样例输出-2">样例输出 2</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">516<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="样例解释-1">样例解释</h2><p>下图展示了样例 1 中的树。</p><p>sample.png</p><p>该树共有 4 种可能的 DFS 序：</p><p>{3,4,5,1,2}，有 6 个逆序对； {3,4,5,2,1}，有 7 个逆序对；{3,5,1,2,4}，有 5 个逆序对； {3,5,2,1,4}，有 6 个逆序对。 因此答案为6+7+5+6=24。</p><h1 id="l3-3-教科书般的亵渎">L3-3 教科书般的亵渎</h1><p>九条可怜最近在玩一款卡牌游戏。在每一局游戏中，可怜都要使用抽到的卡牌来消灭一些敌人。每一名敌人都有一个初始血量，而当血量降低到<span class="math inline">\(0\)</span>及以下的时候，这名敌人就会立即被消灭并从场上消失。</p><p>现在，可怜面前有 <span class="math inline">\(n\)</span>个敌人，其中第 <span class="math inline">\(i\)</span> 名敌人的血量是<span class="math inline">\(a_i\)</span>，而可怜手上只有如下两张手牌：</p><p>如果场上还有敌人，等概率随机选中一个敌人并对它造成一点伤害（即血量减<span class="math inline">\(1\)</span> ），重复 <spanclass="math inline">\(K\)</span> 次。</p><p>对所有敌人造成一点伤害，重复该效果直到没有新的敌人被消灭。</p><p>下面是这两张手牌效果的一些示例：</p><p>假设存在两名敌人，他们的血量分别是 <spanclass="math inline">\(1\)</span>,<span class="math inline">\(2\)</span>且 <spanclass="math inline">\(K=2\)</span>。那么在可怜打出第一张手牌后，可能会发生如下情况：第一轮中，两名敌人各有 <span class="math inline">\(0.5\)</span>的概率被选中。假设第一名敌人被选中，那么它会被造成一点伤害。这时它的血量变成了<span class="math inline">\(0\)</span>，因此它被消灭并消失了。第二轮中，因为场上只剩下了第二名敌人，所以它一定会被选中并被造成一点伤害。这时它剩下的血量为<span class="math inline">\(1\)</span>。同样假设存在两名敌人且血量分别为 <spanclass="math inline">\(1,2\)</span>。那么在可怜打出第二张手牌后，会发生如下情况：第一轮中，所有敌人被造成了一点伤害。这时第一名敌人被消灭了，因此卡牌效果会被重复一遍。第二轮中，所有敌人（此时只剩下第二名敌人了）被造成了一点伤害。这时第二名敌人也被消灭了，因此卡牌效果会被再重复一遍。第三轮中，所有敌人（此时没有敌人剩下了）被造成了一点伤害。因为没有新的敌人被消灭了，所以卡牌效果结束。如果面对的是四名血量分别为 <span class="math inline">\(1,2,2,4\)</span>的敌人，那么在可怜打出第二张手牌后，只有第四名敌人还会存活，且它的剩余血量为<span class="math inline">\(1\)</span>。现在，可怜先打出了第一张手牌，再打出了第二张手牌。她发现，在第一张手牌效果结束后，没有任何一名敌人被消灭，但是在第二张手牌的效果结束后，所有敌人都被消灭了。</p><p>可怜想让你计算一下这种情况发生的概率是多少。</p><h2 id="输入格式-9">输入格式：</h2><p>第一行输入两个整数 <spanclass="math inline">\(n,K(1≤n,K≤50)\)</span>，分别表示敌人的数量以及第一张卡牌效果的发动次数。</p><p>第二行输入 <span class="math inline">\(n\)</span> 个由空格隔开的整数<span class="math inline">\(a_i(1≤a_i≤50)\)</span>，表示每个敌人的初始血量。</p><h2 id="输出格式-9">输出格式：</h2><p>在一行中输出一个整数，表示发生概率对 <spanclass="math inline">\(998244353\)</span> 取模后的结果。</p><p>具体来说，如果概率的最简分数表示为 <spanclass="math inline">\(a/b(a≥0,b≥1,gcd(a,b)=1)\)</span>，那么你需要输出</p><p><span class="math inline">\(a×b^{998244351}mod998244353\)</span>。</p><h2 id="输入样例-1-1">输入样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">3 22 3 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1-1">输出样例 1：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">665496236<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="样例解释-1-1">样例解释 1：</h2><p>在第一张手牌的效果结束后，三名敌人的剩余血量只可能在如下几种中：[1,3,2],[1,2,3], [2,1,3] 和 [2,3,1]。前两种发生的概率是 <spanclass="math inline">\(2/9\)</span>，后两种发生的概率是 <spanclass="math inline">\(1/9\)</span>。因此答案为 <spanclass="math inline">\(2/3\)</span>，输出 <span class="math inline">\(2×3^{998244351} mod998244353=665496236\)</span> 。</p><h2 id="输入样例-2-1">输入样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">3 32 3 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-2-1">输出样例 2：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">776412275<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="样例解释-2">样例解释 2:</h2><p>在第一张手牌的效果结束后，三名敌人的剩余血量只可能在如下几种中：[1,2,2]、[2,1,2]和 [2,2,1]。第一种发生的概率是 <span class="math inline">\(2/9\)</span>，后两种发生的概率是 <spanclass="math inline">\(1/9\)</span>。因此答案为 <spanclass="math inline">\(4/9\)</span>，输出 <spanclass="math inline">\(4×9^{998244351} mod998244353=776412275\)</span>。</p><p>输入样例 3： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 31 4 4 2 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure> 输出样例 3： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">367353922<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> 输入样例 4：<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">12 121 2 3 4 5 6 7 8 9 10 11 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure> 输出样例 4： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">452061016<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | ACM Test 231029</title>
    <link href="/2023/10/29/ACM-ACM-Test-231029/"/>
    <url>/2023/10/29/ACM-ACM-Test-231029/</url>
    
    <content type="html"><![CDATA[<h1 id="三角形判断">7-1 三角形判断</h1><p>给定三条线段的长度，如何判断它们能组成一个什么类型的三角形呢？</p><h2 id="输入格式">输入格式:</h2><p>输入数据第一行是一个正整数 <spanclass="math inline">\(N\)</span>，表示有 <spanclass="math inline">\(N\)</span> 组测试用例。</p><p>接下来 <span class="math inline">\(N\)</span> 行，每行包含三个正整数<span class="math inline">\(A, B, C (0 &lt; A, B, C &lt;10000)\)</span>，表示三条线段的长度。</p><h2 id="输出格式">输出格式:</h2><p>对于每组数据给定的三条线段：</p><ul><li><p>如果能够组成直角三角形，请输出 "Right triangle" ；</p></li><li><p>如果能够组成锐角三角形，请输出 "Acute triangle" ；</p></li><li><p>如果能够组成钝角三角形，请输出 "Obtuse triangle" ；</p></li><li><p>如果不能组成三角形，请输出"Impossible!"；</p></li></ul><p>所有的输出，都不包含双引号，参见样例输出。</p><h2 id="输入样例">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">312 12 124 6 126 8 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Acute triangleImpossible!Obtuse triangle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>t<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            t<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">></span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            t<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>c<span class="token punctuation">;</span>c<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            t<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">></span>c <span class="token operator">&amp;&amp;</span> b<span class="token operator">+</span>c<span class="token operator">></span>a <span class="token operator">&amp;&amp;</span> a<span class="token operator">+</span>c<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token operator">></span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Acute triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token operator">&lt;</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Obtuse triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Right triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Impossible!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="奋勇争先续">7-2 奋勇争先续</h1><p>在杭电ACM课的每次测试中，每一次大家都奋勇争先，想拿下第一名。</p><p>现在已知某次测验的每位同学的解题数量和罚时，希望你能够告诉老师前几名是哪些同学。</p><p>排名规则是这样的，首先依据解题数量从大到小排名，若解题数量相同，则比较罚时，罚时少的排名靠前。</p><h2 id="输入格式-1">输入格式:</h2><p>第一行是数据组数 <span class="math inline">\(C(1 &lt;= C &lt;=10)\)</span>，代表有 <span class="math inline">\(C\)</span>组测试数据。</p><p>每一组数据第一行为两个 <span class="math inline">\(N(2 &lt; N &lt;=1000)\)</span> 和 <span class="math inline">\(M(1 &lt;= M &lt;=N)\)</span>，<span class="math inline">\(N\)</span> 表示有 <spanclass="math inline">\(N\)</span> 个人的成绩，<spanclass="math inline">\(M\)</span> 表示老师需要你输出前 <spanclass="math inline">\(M\)</span> 名的名单。</p><p>接下来 <span class="math inline">\(N\)</span> 行，每一行依次给出名字Name，解题数量 Num 和罚时 Time（名字的长度最大为 <spanclass="math inline">\(10, 1 &lt;= Num &lt;= 10, 10 &lt;= Time &lt;=100000\)</span>）。</p><h2 id="输出格式-1">输出格式:</h2><p>每组测试数据输出 M行，每行依次为是名字、解题数量和罚时，中间用空格隔开。</p><p>每组测试数据后空一行。</p><h2 id="输入样例-1">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">13 3Bob 5 50Alice 4 46John 5 48<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-1">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">John 5 48Bob 5 50Alice 4 46<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> time<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token operator">=</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    tmp<span class="token operator">=</span>time<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    time<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>time<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    time<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> C<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token operator">+</span>i<span class="token punctuation">,</span>time<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> time<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>time<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d %d\n"</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="素数输出续">7-3 素数输出续</h1><p>给定一个正整数 <span class="math inline">\(N\)</span>，请输出小于等于<span class="math inline">\(N\)</span> 的素数个数。</p><h2 id="输入格式-2">输入格式:</h2><p>输入包含多组测试数据，每组数据占一行，包括一个正整数 <spanclass="math inline">\(N（2&lt;=N&lt;=100000）\)</span>。</p><h2 id="输出格式-2">输出格式:</h2><p>对于每组数据给定的 <spanclass="math inline">\(N\)</span>，请输出一个正整数，表示小于等于 <spanclass="math inline">\(N\)</span> 的素数个数，每组输出占一行。</p><h2 id="输入样例-2">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-2">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">48<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> primes<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">isprime</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isprime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                primes<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//printf("1\n");</span>            <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// #include&lt;stdio.h></span><span class="token comment">// int primes[10000]=&#123;2&#125;;</span><span class="token comment">// int count=1;</span><span class="token comment">// int isprime(int n)&#123;</span><span class="token comment">//     for(int i=0;i&lt;count;i+=2)&#123;</span><span class="token comment">//         if(n%primes[i]==0)&#123;</span><span class="token comment">//             return 0;</span><span class="token comment">//         &#125;</span><span class="token comment">//     &#125;</span><span class="token comment">//     return 1;</span><span class="token comment">// &#125;</span><span class="token comment">// int main()&#123;</span><span class="token comment">//     int n;</span><span class="token comment">//     while(scanf("%d",&amp;n)!=EOF)&#123;</span><span class="token comment">//         int cnt=1;</span><span class="token comment">//         for(int i=3;i&lt;=n;i+=2)&#123;</span><span class="token comment">//             if(isprime(i))&#123;</span><span class="token comment">//                 cnt++;</span><span class="token comment">//             &#125;</span><span class="token comment">//         &#125;</span><span class="token comment">//         printf("%d\n",cnt);</span><span class="token comment">//     &#125;</span><span class="token comment">//     return 0;</span><span class="token comment">// &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="多级排序逸天专备">7-4 多级排序，逸天专备</h1><p>说到排序，我们都知道这是编程人员必备的知识，更不用说信奥了。</p><p>朱逸天，丁爸编程培训班的首期学员，尽管0基础开始，但是进步很大，已经熟练掌握了各种排序的实现。</p><p>现在，朱逸天专门准备了这么一个题目，想测试一下同班同学的你，看看你是否也熟练掌握了排序。</p><p>假设丁爸信奥培训班共有<spanclass="math inline">\(N（N&lt;100）\)</span>名同学，已知各位同学的详细信息（姓名，年龄，分数），现在请对培训班的全体同学做一个排序。</p><p>排序的规则要求如下：</p><p>1、首先按照分数从高到低进行排序；</p><p>2、如果分数相同，则年龄小的排名靠前；</p><p>3、如果依然不能区分，再按照姓名的字典序排列；</p><p>考验你的时候到了，你是否能像朱逸天一样熟练掌握排序呢？</p><h2 id="输入格式-3">输入格式:</h2><p>输入包含多组测试用例；</p><p>每组数据首先是一个正整数<spanclass="math inline">\(N\)</span>，表示培训班有<spanclass="math inline">\(N\)</span>位同学，每位同学的信息占一行，依次是姓名Name、年龄Age和分数Score。</p><p>其中，姓名Name是长度不超过10的无空格字符串，年龄Age是不大于20的正整数，分数Score是不超过100的浮点数。</p><h2 id="输出格式-3">输出格式:</h2><p>请输出排序后的全班同学信息，其中，分数保留2位小数。</p><p>格式参见样例。</p><h2 id="输入样例-3">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">6jaa 18 99.5bbb 19 100kcc 19 99tdd 20 100abc 18 100see 19 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-3">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">abc 18 100.00bbb 19 100.00see 19 100.00tdd 20 100.00jaa 18 99.50kcc 19 99.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">stu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">double</span> tmp1<span class="token punctuation">;</span>    tmp1<span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>    stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">=</span>tmp1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">-</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">==</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">></span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">&lt;</span>stu<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d %.2lf\n"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="逛超市">7-5 逛超市</h1><p>周末又到了，你准备去采购一些零食。今天你一共带 <spanclass="math inline">\(V\)</span>元钱，来到了热闹非凡的“一元超市”，就是这里的所有东西都只卖一元。</p><p>超市里有 <span class="math inline">\(N\)</span>种不同的零食，虽然每种零食都只要一元，但是对于你来说能够得到的满足度不一样，并且每种零食你吃一次后都不再想吃了。</p><p>现在告诉你每种零食能够获得的满足度，你能计算出能够获得的最大满足度是多少吗？</p><h2 id="输入格式-4">输入格式:</h2><p>输入包含多组测试数据，每组测试数据第一行是两个正整数 <spanclass="math inline">\(N\)</span> 和 <span class="math inline">\(V(0 &lt;N &lt;= 1000, 0 &lt;= V &lt;=N)\)</span>，分别表示零食的种数和带的钱。接下来一行包含 <spanclass="math inline">\(N\)</span>个正整数，分别表示每种零食可以获得的满足度。</p><h2 id="输出格式-4">输出格式:</h2><p>每组测试数据输出一个正整数，表示可以获得的最大满足度。</p><p>每组输出占一行。</p><h2 id="输入样例-4">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">3 22 1 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-4">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">+</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    <span class="token keyword">int</span> freshments<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>V<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>freshments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>freshments<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>V<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">+=</span>freshments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="一起过生日">7-6 一起过生日</h1><p>杭州电子科技大学附属小学有个优秀的传统，每隔一段时间，会给班里的近期过生日的同学举办一场生日Party！老师会给出一个生日起止日期来确定生日 Party 的小寿星。</p><h2 id="输入格式-5">输入格式:</h2><p>输入包含多组测试数据。</p><p>每组数据第一行，包括一个正整数 <span class="math inline">\(N(0 &lt;=N &lt;= 40)\)</span>，表示某个班的学生人数，接下来有 <spanclass="math inline">\(N\)</span>行数据，每行包含一个同学的姓名，以及出生年、月、日。</p><p>每组数据的最后一行，包括 4 个正整数 <spanclass="math inline">\(m1、d1、m2、d2\)</span>，分别表示生日 Party的小寿星生日起止月和日（包含），其中 <span class="math inline">\(m1&lt;= m2\)</span>。</p><h2 id="输出格式-5">输出格式:</h2><p>每组数据输出一行小寿星的名单（按照原名单的次序），每个名字后面跟一个空格。</p><h2 id="输入样例-5">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5Tom 2009 10 15Kate 2010 7 20David 2010 6 30Kevin 2009 7 3Sarah 2010 3 87 1 7 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出样例: <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Kate Kevin <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m1<span class="token punctuation">,</span>d1<span class="token punctuation">,</span>m2<span class="token punctuation">,</span>d2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d %d %d"</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>year<span class="token operator">+</span>i<span class="token punctuation">,</span>month<span class="token operator">+</span>i<span class="token punctuation">,</span>day<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m1<span class="token punctuation">,</span><span class="token operator">&amp;</span>d1<span class="token punctuation">,</span><span class="token operator">&amp;</span>m2<span class="token punctuation">,</span><span class="token operator">&amp;</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m1<span class="token operator">==</span>m2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>m1 <span class="token operator">&amp;&amp;</span> day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d2 <span class="token operator">&amp;&amp;</span> day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>d1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>month<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>m1 <span class="token operator">&amp;&amp;</span> day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>d1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>month<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>m2 <span class="token operator">&amp;&amp;</span> day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>month<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>m1 <span class="token operator">&amp;&amp;</span> month<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="人在江湖浩然养猪">7-7 人在江湖，浩然养猪</h1><p>祝浩然同学在学习信奥的过程中一直是顺风顺水。</p><p>不知为何，突然有一天，他厌倦了这一切，毅然决然要回老家养猪！</p><p>我想，这也许是因为祝浩然同学是个有情怀的爱国青年，他想实业救国。</p><p>也许某一天，祝浩然同学能在养猪界一统江湖~</p><p>说干就干！</p><p>在2018年1月1日，祝浩然同学买了一只刚出生的母猪幼仔，假设每只小母猪从第3个年头开始，每年的第一天都会生出4只小母猪，同时，祝浩然同学还会在每年的12月31日售出所有差一天就要年满5周岁的猪。</p><p>请预测：</p><p>在第N年（2018年是第1年，2019是第2年，依次类推）的今天（6月16日），祝浩然的养猪场会存栏多少只猪?</p><h2 id="输入格式-6">输入格式:</h2><p>输入数据第一行是一个整数<span class="math inline">\(T(0&lt; T&lt;=40)\)</span>，表示测试数据的组数。</p><p>接下来有<span class="math inline">\(T\)</span>行，每行有一个数<spanclass="math inline">\(N(0&lt; N&lt;=40)\)</span>表示一组测试数据，其含义如题目描述。</p><h2 id="输出格式-6">输出格式:</h2><p>对于每个测试实例，请输出在第N年的今天母猪的数量，每组数据的输出占一行。</p><h2 id="输入样例-6">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">3235<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-5">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1529<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> N<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y5<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        N<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            y5<span class="token operator">=</span>y4<span class="token punctuation">;</span>            y4<span class="token operator">=</span>y3<span class="token punctuation">;</span>            y3<span class="token operator">=</span>y2<span class="token punctuation">;</span>            y2<span class="token operator">=</span>y1<span class="token punctuation">;</span>            y1<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>y3<span class="token operator">+</span>y4<span class="token operator">+</span>y5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>y1<span class="token operator">+</span>y2<span class="token operator">+</span>y3<span class="token operator">+</span>y4<span class="token operator">+</span>y5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 0 0 0 0</span><span class="token comment">// 0 1 0 0 0</span><span class="token comment">// 4 0 1 0 0</span><span class="token comment">// 4 4 0 1 0</span><span class="token comment">// 16 4 4 0 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="机器分配">7-8 机器分配</h1><p>某总公司拥有设备<spanclass="math inline">\(M\)</span>台，准备分给下属的N个子公司。各子公司若获得这些设备，可以为总公司赚取一定的盈利。</p><p>如何分配这M台设备才能使总公司得到的盈利最大？</p><p>请输出最大盈利值。</p><h2 id="输入格式-7">输入格式:</h2><p>输入包含多组测试数据。</p><p>每组数据第一行为两个整数<span class="math inline">\(N\)</span>，<spanclass="math inline">\(M\)</span>，表示有<spanclass="math inline">\(N\)</span>个子公司，M台设备。</p><p>接下来是一个<spanclass="math inline">\(N×M\)</span>的矩阵，其中矩阵的第<spanclass="math inline">\(i\)</span>行的第<spanclass="math inline">\(j\)</span>列的数<spanclass="math inline">\(A_{ij}\)</span>表明第<spanclass="math inline">\(i\)</span>个子公司分配<spanclass="math inline">\(j\)</span>台机器的盈利。</p><p>其中：</p><p><span class="math inline">\(N &lt;= 100\)</span></p><p><span class="math inline">\(M &lt;= 100\)</span></p><h2 id="输出格式-7">输出格式:</h2><p>请计算总公司合理分配这M台设备所获得的最大盈利。</p><p>每组数据输出一行。</p><h2 id="输入样例-7">输入样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2 31 2 32 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="输出样例-6">输出样例:</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> profit<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>profit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">+</span>profit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int i=1;i&lt;=N;i++)&#123;</span>        <span class="token comment">//     for(int j=1;j&lt;=M;j++)&#123;</span>        <span class="token comment">//         for(int k=1;k&lt;=j;k++)&#123;</span>        <span class="token comment">//             if(j-k>0)&#123;</span>        <span class="token comment">//                 dp[i][j]=max(dp[i][j],dp[i-1][j-k]+profit[i][k]);</span>        <span class="token comment">//             &#125;</span>                            <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | 还是畅通工程</title>
    <link href="/2023/10/28/ACM-%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
    <url>/2023/10/28/ACM-%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。</p><h1 id="输入格式">输入格式:</h1><p>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100)；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。当N为0时，输入结束，该用例不被处理。</p><h1 id="输出格式">输出格式:</h1><p>对每个测试用例，在1行里输出最小的公路总长度。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">31 2 11 3 22 3 441 2 11 3 41 4 12 3 32 4 23 4 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="代码样例">代码样例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> satellite_city<span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// void swap(int *a,int *b)&#123;</span><span class="token comment">//     int t=*a;</span><span class="token comment">//     *a=*b;</span><span class="token comment">//     *b=t;</span><span class="token comment">// &#125;</span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span>a<span class="token punctuation">;</span>        a<span class="token operator">=</span>b<span class="token punctuation">;</span>        b<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>satellite_city<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//1表示还有未连接的城市</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> roads<span class="token punctuation">[</span><span class="token number">5050</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        M<span class="token operator">=</span>N<span class="token operator">*</span><span class="token punctuation">(</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//初始化每个城镇都是独立城市</span>            satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//读取路</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int i=0;i&lt;M;i++)&#123;  //根据路的距离从小到大排序</span>        <span class="token comment">//     for(int j=0;j&lt;M-i-1;j++)&#123;</span>        <span class="token comment">//         if(roads[j][2]>roads[j+1][2])&#123;</span>        <span class="token comment">//             for(int o=0;o&lt;3;o++)&#123;</span>        <span class="token comment">//                 swap(&amp;roads[j][o],&amp;roads[j+1][o]);</span>        <span class="token comment">//             &#125;</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// 使用qsort进行排序</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>roads<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>roads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//标记当前的路</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">merge</span><span class="token punctuation">(</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>roads<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | 畅通工程</title>
    <link href="/2023/10/28/ACM-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
    <url>/2023/10/28/ACM-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？</p><h1 id="输入格式">输入格式:</h1><p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N( &lt; 1000)和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。注意:两个城市之间可以有多条道路相通,也就是说 3 3 1 2 1 2 2 1这种输入也是合法的 当N为0时，输入结束，该用例不被处理。</p><h1 id="输出格式">输出格式:</h1><p>对每个测试用例，在1行里输出最少还需要建设的道路数目。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4 21 34 33 31 21 32 35 21 23 5999 00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">102998<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="代码样例">代码样例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> satellite_city<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span>a<span class="token punctuation">;</span>        a<span class="token operator">=</span>b<span class="token punctuation">;</span>        b<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> new_satellite<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//标记新城市</span>    <span class="token keyword">int</span> roads<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//memset(satellite_city,0,sizeof(satellite_city)); //初始化每个城镇所属的独立城市群</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//初始化每个城镇都是独立城市</span>            satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//读取路</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int i=0;i&lt;M;i++)&#123;</span>        <span class="token comment">//     if(satellite_city[roads[i][0]]==0 &amp;&amp; satellite_city[roads[i][1]]==0)&#123;</span>        <span class="token comment">//         satellite_city[roads[i][0]]=new_satellite;</span>        <span class="token comment">//         satellite_city[roads[i][1]]=new_satellite;</span>        <span class="token comment">//         new_satellite++;</span>        <span class="token comment">//     &#125;else if(satellite_city[roads[i][0]]==0)&#123;</span>        <span class="token comment">//         satellite_city[roads[i][0]]=satellite_city[roads[i][1]];</span>        <span class="token comment">//     &#125;else if(satellite_city[roads[i][1]]==0)&#123;</span>        <span class="token comment">//         satellite_city[roads[i][1]]=satellite_city[roads[i][0]];</span>        <span class="token comment">//     &#125;else if(satellite_city[roads[i][0]]!=satellite_city[roads[i][1]])&#123;</span>        <span class="token comment">//         merge(satellite_city[roads[i][0]],satellite_city[roads[i][1]],N);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">merge</span><span class="token punctuation">(</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>satellite_city<span class="token punctuation">[</span>roads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                count<span class="token punctuation">[</span>satellite_city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | A Bee</title>
    <link href="/2023/10/26/ACM-A-Bee/"/>
    <url>/2023/10/26/ACM-A-Bee/</url>
    
    <content type="html"><![CDATA[<p>有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。其中，蜂房的结构如下所示。</p><p><img src="/img/C40-1001-1.jpg" /> # 输入格式:输入数据的第一行是一个整数N,表示测试实例的个数，然后是N行数据，每行包含两个整数a和b(0&lt;a&lt;b&lt;50)。</p><h1 id="输出格式">输出格式:</h1><p>对于每个测试实例，请输出蜜蜂从蜂房a爬到蜂房b的可能路线数，每个实例的输出占一行。</p><h1 id="输入样例">输入样例:</h1><p>2 1 2 3 6 # 输出样例: 1 3</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Super Staircase</title>
    <link href="/2023/10/26/ACM-Super-Staircase/"/>
    <url>/2023/10/26/ACM-Super-Staircase/</url>
    
    <content type="html"><![CDATA[<p>有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？</p><h1 id="输入格式">输入格式:</h1><p>输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。</p><h1 id="输出格式">输出格式:</h1><p>对于每个测试实例，请输出不同走法的数量</p><h1 id="输入样例">输入样例:</h1><p>2 2 3 # 输出样例: 1 2</p><h1 id="代码示例1">代码示例1:</h1><p>递归超时 <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">stairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">stairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">stairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">stairs</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="代码示例2">代码示例2:</h1><p>解析法/动态规划 其实还可以用记忆化搜索（缓存之前计算的结果）<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mem<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    mem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    mem<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    mem<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>mem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>mem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>mem<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Quoit Design</title>
    <link href="/2023/10/26/ACM-Quoit-Design/"/>
    <url>/2023/10/26/ACM-Quoit-Design/</url>
    
    <content type="html"><![CDATA[<p>Have you ever played quoit in a playground? Quoit is a game in whichflat rings are pitched at some toys, with all the toys encircledawarded. In the field of Cyberground, the position of each toy is fixed,and the ring is carefully designed so it can only encircle one toy at atime. On the other hand, to make the game look more attractive, the ringis designed to have the largest radius. Given a configuration of thefield, you are supposed to find the radius of such a ring.</p><p>Assume that all the toys are points on a plane. A point is encircledby the ring if the distance between the point and the center of the ringis strictly less than the radius of the ring. If two toys are placed atthe same point, the radius of the ring is considered to be 0.</p><p>你曾经在操场上玩过掷环游戏吗？掷环是一种游戏，其中扁平的环被投向一些玩具，所有被环围绕的玩具都会被奖励。</p><p>在Cyberground领域中，每个玩具的位置都是固定的，环被精心设计，以便一次只能围绕一个玩具。另一方面，为了使游戏看起来更有吸引力，环被设计成具有最大半径。给定场地的配置，你需要找出这样一个环的半径。</p><p>假设所有的玩具都是平面上的点。如果一个点与环的中心之间的距离严格小于环的半径，则该点被环围绕。如果两个玩具位于同一点上，则环的半径被认为是0。</p><h1 id="输入格式">输入格式:</h1><p>The input consists of several test cases. For each case, the firstline contains an integer N (2 &lt;= N &lt;= 100,000), the total numberof toys in the field. Then N lines follow, each contains a pair of (x,y) which are the coordinates of a toy. The input is terminated by N = 0.输入包含多个测试用例。对于每个案例，第一行包含一个整数N（2 &lt;= N &lt;=100,000），表示场地上玩具的总数。然后是N行，每行包含一个玩具的坐标(x,y)。输入以N = 0结束。</p><h1 id="输出格式">输出格式:</h1><p>For each test case, print in one line the radius of the ring requiredby the Cyberground manager, accurate up to 2 decimal places.对于每个测试用例，在一行中打印Cyberground管理员所需的环的半径，精确到小数点后2位。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">20 01 121 11 13-1.5 00 00 1.50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0.710.000.75<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="代码示例1">代码示例1:</h1><p>把sqrt放到最后减小运算量。但是1000000的数组用暴力还是太大了。这个代码会超时。待我优化一番。 <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> x<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span>x<span class="token operator">+</span>i<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">;</span>        <span class="token keyword">double</span> distance2<span class="token operator">=</span><span class="token number">10000000.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j <span class="token operator">&amp;&amp;</span> distance2<span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    distance2<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    x1<span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    x2<span class="token operator">=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    y1<span class="token operator">=</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    y2<span class="token operator">=</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>distance2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Degree Sequence of Graph G</title>
    <link href="/2023/10/26/ACM-Degree-Sequence-of-Graph-G/"/>
    <url>/2023/10/26/ACM-Degree-Sequence-of-Graph-G/</url>
    
    <content type="html"><![CDATA[<p>Wang Haiyang is a strong and optimistic Chinese youngster. Althoughborn and brought up in the northern inland city Harbin, he has deep loveand yearns for the boundless oceans. After graduation, he came to acoastal city and got a job in a marine transportation company. There, heheld a position as a navigator in a freighter and began his newlife.</p><p>The cargo vessel, Wang Haiyang worked on, sails among 6 ports betweenwhich exist 9 routes. At the first sight of his navigation chart, the 6ports and 9 routes on it reminded him of Graph Theory that he studied inclass at university. In the way that Leonhard Euler solved The SevenBridges of Knoigsberg, Wang Haiyang regarded the navigation chart as agraph of Graph Theory. He considered the 6 ports as 6 nodes and 9 routesas 9 edges of the graph. The graph is illustrated as below.</p><p>According to Graph Theory, the number of edges related to a node isdefined as Degree number of this node.</p><p>Wang Haiyang looked at the graph and thought, If arranged, the Degreenumbers of all nodes of graph G can form such a sequence: 4, 4, 3,3,2,2,which is called the degree sequence of the graph. Of course, the degreesequence of any simple graph (according to Graph Theory, a graph withoutany parallel edge or ring is a simple graph) is a non-negative integersequence?</p><p>Wang Haiyang is a thoughtful person and tends to think deeply overany scientific problem that grabs his interest. So as usual, he alsogave this problem further thought, As we know, any a simple graph alwayscorresponds with a non-negative integer sequence. But whether anon-negative integer sequence always corresponds with the degreesequence of a simple graph? That is, if given a non-negative integersequence, are we sure that we can draw a simple graph according toit.?</p><p>Let's put forward such a definition: provided that a non-negativeinteger sequence is the degree sequence of a graph without any paralleledge or ring, that is, a simple graph, the sequence is draw-possible,otherwise, non-draw-possible. Now the problem faced with Wang Haiyang ishow to test whether a non-negative integer sequence is draw-possible ornot. Since Wang Haiyang hasn't studied Algorithm Design course, it isdifficult for him to solve such a problem. Can you help him?</p><p>王海洋是一位坚强、乐观的中国年轻人。虽然出生和长大在北方内陆城市哈尔滨，但他对无边的海洋有着深深的热爱和向往。毕业后，他来到沿海城市，在一家海运公司找到了工作。在那里，他担任了一艘货轮的领航员，开始了他的新生活。</p><p>王海洋所在的货轮航行于6个港口，间有9条航线。第一眼看到海图，上面的6个港口、9条航线让他想起了大学课堂上学过的图论。就像欧拉求解克诺斯堡七桥一样，王海洋将航海图视为图论的图。 他将 6个港口视为图的 6 个节点，将 9 条路线视为图的 9 条边。图表如下图所示。</p><p>根据图论，与一个节点相关的边的数量被定义为该节点的度数。</p><p>王海洋看着图想，如果排列一下，图G所有节点的度数可以组成这样一个序列：4,4,3,3,2,2，称为图的度序列。当然，任何简单图的度序列（根据图论，没有任何平行边或环的图就是简单图）是非负整数序列吗？</p><p>王海洋是一个有思想的人，凡是他感兴趣的科学问题都会深入思考。所以像往常一样，他也对这个问题进行了进一步的思考，我们知道，任何一个简单的图总是对应着一个非负整数序列。但非负整数序列是否总是对应于简单图的度序列呢？也就是说，如果给定一个非负整数序列，我们确定可以根据它画出一个简单的图吗？</p><p>我们提出这样一个定义：如果一个非负整数序列是一个没有任何平行边或环的图的度序列，即一个简单的图，则该序列是可绘制的，否则是不可绘制的。 现在王海洋面临的问题是如何测试一个非负整数序列是否可以抽奖。由于王海洋没有学过算法设计课程，所以他很难解决这样的问题。你能帮助他吗？</p><blockquote><p>ChatGPT给出的参考：图论中的"简单图"是指一种特殊类型的图，具有以下特点：无重复边：简单图中不存在重复的边，即每两个顶点之间最多有一条边。无自环：简单图中不存在自环，即没有一条连接一个顶点到自己的边。无向图：简单图是无向图，其中的边没有方向，即边的两个端点之间没有箭头或方向。无权图：简单图通常是无权图，也就是说，边没有与之相关联的权重或数值。</p></blockquote><h1 id="输入格式">输入格式:</h1><p>The first line of input contains an integer T, indicates the numberof test cases. In each case, there are n+1 numbers; first is an integern (n&lt;1000), which indicates there are n integers in the sequence;then follow n integers, which indicate the numbers of the degreesequence. 输入的第一行包含一个整数T，表示测试用例的数量。在每种情况下，都有 n+1 个数字；第一个是整数n（n&lt;1000），表示序列中有n个整数；接下来是n个整数，表示度数序列的个数。</p><h1 id="输出格式">输出格式:</h1><p>For each case, the answer should be "yes"or "no" indicating this caseis "draw-possible" or "non-draw-possible"对于每种情况，答案应该是“yes”或“no”，表明这种情况是“可以绘画”或“不可以绘画”</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">26 4 4 3 3 2 24 2 1 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">yesno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="代码示例">代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> N<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> degree<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>degree<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>degree<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>degree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>degree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> degree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>degree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>degree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            degree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">qsort</span><span class="token punctuation">(</span>degree<span class="token punctuation">,</span>N<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>degree<span class="token punctuation">[</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Hungry Oldman</title>
    <link href="/2023/10/25/ACM-Hungry-Oldman/"/>
    <url>/2023/10/25/ACM-Hungry-Oldman/</url>
    
    <content type="html"><![CDATA[<p>时间：2008年5月16日（震后第4天） 地点：汶川县牛脑寨人物：羌族老奶奶</p><p>【转载整理】牛脑寨是一个全村600多人的羌族寨子，震后几天，这里依然能常常听到隆隆的声音，那是对面山上石头不断滑落的声音。在完成整个突击队的抢修移动基站的任务后，我提着相机开始记录这里的受创情况。突然，我的视线里出现一个羌族老人，这让我无比的震惊，要知道，那是一个极陡的坡，这个佝偻着腰的老人是怎么艰难地爬上来的？她上来做什么？</p><p>老人背后是极陡的坡，她只有一只眼睛有依稀的视力，望着满地废墟，她徘徊了很久。家在哪里，她极力地用很低的视力找寻着。她曾经的家就在旁边，但是满目废墟已经让老人看不出来。她举目远眺，期望那里能看到家的一点点痕迹。原来家就在旁边，左手抓住一个房橼，努力让自己站住，地震过去三天了，她第一次回到曾经的家。</p><p>一个倒塌的柜子，里面装着一丝希望，老人很吃力地搬动掩盖在柜子上的薪柴。老人找到一把木匠用的刨子，老泪纵横，或许有哪个逝去的亲人是木匠。睹物思人，逝者已矣。</p><p>继续找，一把散碎的挂面出现在我的眼前。她颤颤巍巍地捞起铺满灰尘的挂面，再次流出了眼泪......看着她仔细地把挂面放进胸前的围腰里，我顿然感觉到，这是老人在得到外援之前赖以生存的口粮了，如果不是交通中断，外部救援进不来，老人家又何必拖着80多岁的躯体，强忍失去亲人的痛苦，重新回到这夺取她亲人生命的废墟，寻找这点点挂面？老人是真饿了......</p><p>老人佝偻着腰，低声喃喃地念着那两句话“你们走了，我可怎么活”，拿着那对我们身处城市的人们微不足道的挂面，远去了......</p><h2id="ps-拍完这组照片后我才知道5月14号军用运输飞机第一次给汶川空投救援物资就掉在牛脑寨受灾的村民们没有占为己有而是汗流浃背地走了两个小时背到山下的县城交给政府">PS:拍完这组照片后我才知道，5月14号军用运输飞机第一次给汶川空投救援物资就掉在牛脑寨，受灾的村民们没有占为己有，而是汗流浃背地走了两个小时背到山下的县城交给政府。</h2><p>对于幸存的灾民来说，最急待解决的显然是温饱问题，救灾部队一边在组织人员全力打通交通，一边在组织采购粮食。现在假设下拨了一定数量的救灾经费要去市场采购大米（散装）。如果市场有m种大米，各种大米的单价和重量已知，请问，为了满足更多灾民的需求，最多能采购多少重量的大米呢？</p><h1 id="输入格式">输入格式:</h1><p>输入数据首先包含一个正整数C，表示有C组测试用例，每组测试用例的第一行是两个整数n和m（0&lt; n &lt;= 1000,0&lt; m&lt;=1000）,分别表示经费的金额和大米的种类，然后是m行数据，每行包含2个整数p和h(1&lt;=p&lt;=25,1&lt;=h&lt;=100)，分别表示单价和对应大米的重量。</p><h1 id="输出格式">输出格式:</h1><p>对于每组测试数据，请输出能够购买大米的最多重量（你可以假设经费买不光所有的大米）。每个实例的输出占一行，保留2位小数。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">17 23 34 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2.33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="代码示例">代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> C<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>C<span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment">//经费</span>        <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment">//种类</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//单价</span>        <span class="token keyword">int</span> h<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//重量</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>p<span class="token operator">+</span>i<span class="token punctuation">,</span>h<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tmp<span class="token operator">=</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>                    tmp<span class="token operator">=</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    h<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span>p<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">*</span>h<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                n<span class="token operator">-=</span>p<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">*</span>h<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>h<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span><span class="token number">1.0</span><span class="token operator">*</span>n<span class="token operator">/</span>p<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Fighting For HDU</title>
    <link href="/2023/10/25/ACM-Fighting-For-HDU/"/>
    <url>/2023/10/25/ACM-Fighting-For-HDU/</url>
    
    <content type="html"><![CDATA[<p>在上一回，我们让你猜测海东集团用地的形状，你猜对了吗？不管结果如何，都没关系，下面我继续向大家讲解海东集团的发展情况：在最初的两年里，HDU发展非常迅速，综合各种ACM算法生成的老鼠药效果奇好，据说该药专对老鼠有效，如果被人误食了，没有任何副作用，甚至有传闻说还有健胃的效果，不过这倒没有得到临床验证。所以，公司的销量逐年递增，利润也是节节攀升，作为股东之一的公主负责财务，最近半年，她实在辛苦，多次因为点钞票造成双手抽筋而住院，现在在她面前你根本不要提到“钞票”二字，甚至“money”也不行，否则她立马双手抽筋，唉，可怜的公主…海东集团的发展令国人大为振奋，不过也引起了邻国同行业“东洋小苟株式会社”的嫉妒，眼看海东集团逐渐把他们原来的市场一一占领，心中自是不甘，于是派了n个人前来挑衅，提出要来一场比试真功夫的中日擂台赛，输的一方要自动退出老鼠药市场！他们提出的比赛规则是这样的： 1. 每方派出n个人参赛； 2.出赛的顺序必须是从弱到强（主要担心中国人擅长的田忌赛马）； 3.每赢一场，得两分，打平得一分，否则得0分。东洋小苟果然够黑，不过他们万万没有想到，HDU可是卧虎藏龙，不仅有动若脱兔的Linle，还有力大如牛的伪**，更有下沙健美先生HeYing以及因为双手抽筋而练成鹰爪功的月亮公主，估计小苟他们也占不到什么便宜。假设每个队员的能力用一个整数来表示，你能告诉我最终的结果吗？</p><h1 id="输入格式">输入格式:</h1><p>输入包含多组测试数据，每组数据占3行，首先一行是一个整数n(n&lt;100)，表示每方上场队员的人数，接着的二行每行包含n个整数，分别依次表示中日两方人员的能力值，n为0的时候结束输入。</p><h1 id="输出格式">输出格式:</h1><p>对于每个测试实例，请输出比赛的结果，结果的格式如样例所示（数字和vs之间有且仅有一个空格），其中，HDU的比分在前。每个实例的输出占一行。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">35 2 61 3 40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">6 vs 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="代码示例">代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> china<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> japan<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> score_china<span class="token punctuation">;</span>    <span class="token keyword">int</span> score_japan<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        score_china<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        score_japan<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>china<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>japan<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>china<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>japan<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>china<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>japan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                score_china<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>china<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>japan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                score_japan<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                score_china<span class="token operator">++</span><span class="token punctuation">;</span>                score_japan<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d vs %d\n"</span><span class="token punctuation">,</span>score_china<span class="token punctuation">,</span>score_japan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | Select Int</title>
    <link href="/2023/10/25/PTA-Select-Int/"/>
    <url>/2023/10/25/PTA-Select-Int/</url>
    
    <content type="html"><![CDATA[<p>输入一个字符串，内有数字和非数字字符，例如：a123x67 222y35i088 09x8c，请编写程序，将其中连续的数字作为一个整数，依次存放到一维数组a中。例如前面的字符串，应将123存放到a[0]中，67存放到a[1]中……，最后输出整数的个数以及各个整数的值。</p><h1 id="输入格式">输入格式:</h1><p>长度不超过100的一个字符串，其中包含整数字符和非整数字符。</p><h1 id="输出格式">输出格式:</h1><p>第一行输出整数的个数</p><p>第2行输出各个整数的值，以空格间隔，最后一个整数后面没有空格。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">a123x67 222y35i088 09x8 c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">7123 67 222 35 88 9 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="代码示例">代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//数字的个数</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//游标：用于字符串中控制位数</span>    <span class="token keyword">char</span> nums<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//用数组模拟高位数字</span>    <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>  <span class="token comment">//储存临时字符</span>    <span class="token keyword">char</span> tmps<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//储存临时字符串</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//标记数字结束 1表示前面的字符是数字</span>    tmp<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">>=</span><span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmps<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmps<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmps<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        tmp<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//收尾，保存最后的数字</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmps<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmps<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理多余的0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span> cur<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//输出结果</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %s"</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Tian Ji -- The Horse Racing</title>
    <link href="/2023/10/22/ACM-Tian-Ji-The-Horse-Racing/"/>
    <url>/2023/10/22/ACM-Tian-Ji-The-Horse-Racing/</url>
    
    <content type="html"><![CDATA[<p>Here is a famous story in Chinese history.</p><p>"That was about 2300 years ago. General Tian Ji was a high officialin the country Qi. He likes to play horse racing with the king andothers."</p><p>"Both of Tian and the king have three horses in different classes,namely, regular, plus, and super. The rule is to have three rounds in amatch; each of the horses must be used in one round. The winner of asingle round takes two hundred silver dollars from the loser."</p><p>"Being the most powerful man in the country, the king has so nicehorses that in each class his horse is better than Tian's. As a result,each time the king takes six hundred silver dollars from Tian."</p><p>"Tian Ji was not happy about that, until he met Sun Bin, one of themost famous generals in Chinese history. Using a little trick due toSun, Tian Ji brought home two hundred silver dollars and such a grace inthe next match."</p><p>"It was a rather simple trick. Using his regular class horse raceagainst the super class from the king, they will certainly lose thatround. But then his plus beat the king's regular, and his super beat theking's plus. What a simple trick. And how do you think of Tian Ji, thehigh ranked official in China?"</p><p>Were Tian Ji lives in nowadays, he will certainly laugh at himself.Even more, were he sitting in the ACM contest right now, he may discoverthat the horse racing problem can be simply viewed as finding themaximum matching in a bipartite graph. Draw Tian's horses on one side,and the king's horses on the other. Whenever one of Tian's horses canbeat one from the king, we draw an edge between them, meaning we wish toestablish this pair. Then, the problem of winning as many rounds aspossible is just to find the maximum matching in this graph. If thereare ties, the problem becomes more complicated, he needs to assignweights 0, 1, or -1 to all the possible edges, and find a maximumweighted perfect matching...</p><p>However, the horse racing problem is a very special case of bipartitematching. The graph is decided by the speed of the horses --- a vertexof higher speed always beat a vertex of lower speed. In this case, theweighted bipartite matching algorithm is a too advanced tool to dealwith the problem.</p><p>In this problem, you are asked to write a program to solve thisspecial case of matching problem.</p><p>这里有一个中国历史上著名的故事。</p><p>“那是大约2300年前的事了，田忌将军是齐国的一位大官，他喜欢和国王等人赛马。”</p><p>“田和王各有三匹不同级别的马，分别是普通级、高级级、超级级。规则是一场比赛进行三轮，每匹马必须用完一轮。单场获胜者败者得两百银元。”</p><p>“国王是全国最有权势的人，他的马非常好，每一级他的马都比田的好。因此，国王每次从田那里拿走六百银子。”</p><p>“田忌对此并不高兴，直到他遇到了中国历史上最著名的将军之一孙膑。田忌利用了孙膑的一个小伎俩，在接下来的比赛中带回了两百银元，并获得了如此大的恩惠。”</p><p>“这是一个相当简单的技巧，用他的普通级赛马与国王的超级赛马，他们肯定会输掉这一轮。但随后他的+击败了国王的普通级，他的超级击败了国王的+。多么简单的技巧……那么，您对田忌这个中国的高官有什么看法呢？</p><p>如果田忌生活在现在，他一定会嘲笑自己。更重要的是，如果他现在参加ACM比赛，他可能会发现赛马问题可以简单地看作是在二部图中寻找最大匹配。一侧画田的马，另一侧画国王的马。每当田的一匹马能够击败国王的一匹马时，我们就在它们之间划一条边，这意味着我们希望建立这一对。那么，赢得尽可能多的回合的问题就是找到这个图中的最大匹配。如果存在平局，问题就变得更加复杂，他需要给所有可能的边分配权重0、1或-1，并找到一个最大加权完美匹配……</p><p>然而，赛马问题是二分匹配的一个非常特殊的例子。该图由马的速度决定——速度较高的顶点总是击败速度较低的顶点。在这种情况下，加权二分匹配算法对于处理该问题来说是一个过于先进的工具。</p><p>在此问题中，要求您编写一个程序来解决匹配问题的这种特殊情况。</p><h1 id="输入格式">输入格式:</h1><p>The input consists of up to 50 test cases. Each case starts with apositive integer n (n &lt;= 1000) on the first line, which is the numberof horses on each side. The next n integers on the second line are thespeeds of Tian’s horses. Then the next n integers on the third line arethe speeds of the king’s horses. The input ends with a line that has asingle 0 after the last test case. 输入最多包含 50 个测试用例。每个案例的第一行都以正整数 n (n &lt;= 1000) 开头，它是每边的马匹数量。第二行接下来的 n 个整数是田的马的速度。那么第三行接下来的n个整数就是国王马匹的速度。输入以最后一个测试用例后面有一个 0 的行结束。</p><h1 id="输出格式">输出格式:</h1><p>For each input case, output a line containing a single number, whichis the maximum money Tian Ji will get, in silver dollars.对于每个输入情况，输出一行包含一个数字，这是田忌将获得的最大银元金额。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">392 83 7195 87 74220 2020 20220 1922 180<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">20000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="示例代码">示例代码：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//田忌</span>        <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//国王</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>b<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp<span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> win_times<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tail_a<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tail_b<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>cur_a<span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span>cur_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur_a<span class="token operator">++</span><span class="token punctuation">;</span>                cur_b<span class="token operator">++</span><span class="token punctuation">;</span>                win_times<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>tail_a<span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span>tail_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tail_a<span class="token operator">--</span><span class="token punctuation">;</span>                tail_b<span class="token operator">--</span><span class="token punctuation">;</span>                win_times<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>tail_a<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span>cur_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tail_a<span class="token operator">--</span><span class="token punctuation">;</span>                cur_b<span class="token operator">++</span><span class="token punctuation">;</span>                win_times<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>win_times<span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Summer Without  AC</title>
    <link href="/2023/10/22/ACM-Summer-Without-AC/"/>
    <url>/2023/10/22/ACM-Summer-Without-AC/</url>
    
    <content type="html"><![CDATA[<p>“今年暑假不AC？” “是的。” “那你干什么呢？” “看世界杯呀，笨蛋！”“@#$%^&amp;*%...”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><h1 id="输入格式">输入格式:</h1><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e(1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p><h1 id="输出格式">输出格式:</h1><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">121 33 40 73 815 1915 2010 158 186 125 104 142 90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出样例: <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h1 id="代码示例">代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> times<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>times<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> schedule<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//计数有几个电视节目</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//初始化24小时的列表</span>            schedule<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>times<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | Joseph Ring</title>
    <link href="/2023/10/20/PTA-Joseph-Ring/"/>
    <url>/2023/10/20/PTA-Joseph-Ring/</url>
    
    <content type="html"><![CDATA[<p>有N个人围成一圈（编号为1～N），从第1号开始进行1、2、3报数，凡报3者就退出，下一个人又从1开始报数……直到最后只剩下一个人时为止。请问此人原来的编号是多少?</p><h1 id="输入格式">输入格式:</h1><p>在一行中给出1个不超过100的正整数N。</p><h1 id="输出格式">输出格式:</h1><p>在一行中输出最后剩下那个人的编号。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="示例代码">示例代码：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span> cur<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">circle</span> <span class="token operator">*</span> pre<span class="token punctuation">;</span>    head<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur<span class="token operator">-></span>num<span class="token operator">=</span>i<span class="token punctuation">;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pre<span class="token operator">-></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>    cur<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token operator">!=</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//printf("%d",cur->num);</span>            pre<span class="token operator">-></span>next<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cur<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | Stolen Shoes</title>
    <link href="/2023/10/20/PTA-Stolen-Shoes/"/>
    <url>/2023/10/20/PTA-Stolen-Shoes/</url>
    
    <content type="html"><![CDATA[<p>恒太足球俱乐部有n名球员，每名球员编号1∼n。今天早上，更衣室管理员发现一部分球员柜的球鞋被盗。这导致今天的比赛有一部分球员因为没有球鞋而无法出场，幸运的是，有一部分球员还有备用球鞋，但是拥有备用球鞋的球员只会借给和自己号码相邻的球员，比如：5号队员只会借给4号和6号。假如5号球员的球鞋也被盗了，他拥有的备用球鞋则不会借给相邻的队员。</p><p>现在，给出上述信息，请你求出，今天的比赛，不能上场参赛的最小人数。</p><h1 id="输入格式">输入格式:</h1><p>输入的第一行给出三个整数n——表示总人数；m——表示球鞋坏掉的人数；x表示拥有备用球鞋的人数。</p><p>输入的第二行给出m个整数a[i]——表示球鞋坏掉的人的编号。</p><p>输入的第三行给出x个整数a[i]——表示有备用球鞋的人的编号。</p><p>2≤n≤10</p><p>2≤m≤n</p><p>2≤x≤n</p><p>2≤a[i]≤n</p><h1 id="输出格式">输出格式:</h1><p>输出一个整数——表示不能上场参赛的最小人数。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 2 32 41 3 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="代码示例">代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment">//总人数</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>  <span class="token comment">//被盗人数</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>  <span class="token comment">//备用人数</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nn<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mm<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>mm<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>xx<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//初始化每个人都有鞋子</span>        nn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//有人鞋子被偷了</span>        nn<span class="token punctuation">[</span>mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nn<span class="token punctuation">[</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA | Calendar</title>
    <link href="/2023/10/19/PTA-Calendar/"/>
    <url>/2023/10/19/PTA-Calendar/</url>
    
    <content type="html"><![CDATA[<p>日历是用于表述时间的系统，从小时到分钟，从月到日，最后从年份到世纪。术语小时、日、月、年、世纪都是日历系统表述时间的单位。按照目前国内使用的阳历，闰年被定义为能被4整除的年份，但是能被100整除而不能被400整除的年是例外，它们不是闰年。例如：1700,1800, 1900 和 2100 不是闰年，而 1600, 2000 和 2400是闰年。给定公元2000年1月1日后的天数，请您计算这一天是哪年哪月哪日星期几。 #输入格式:输入包含若干行，每行包含一个正整数，表示2000年1月1日后的天数。输入最后一行是−1,程序不必处理。可以假设输出的年份不会超过9999。</p><h1 id="输出格式">输出格式:</h1><p>对每个测试用例，输出一行，该行给出对应的日期和星期几。格式为“YYYY-MM-DDDayOfWeek”, 其中“DayOfWeek”必须是下面中的一个：“Sunday”，“Monday”，“Tuesday”，“Wednesday”，“Thursday”，“Friday”或“Saturday”。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1730174017501751-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2004-09-26 Sunday2004-10-06 Wednesday2004-10-16 Saturday2004-10-17 Sunday<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="代码示例">代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">isleapyear</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token keyword">int</span> days1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> days2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> day<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        N<span class="token operator">=</span>n<span class="token punctuation">;</span>        y<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span>        m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//printf("*%d\n",isleapyear(y)?days2[m]:days1[m]);</span>            <span class="token comment">//printf("n=%d\n",n);</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token function">isleapyear</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span>days2<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">:</span>days1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                d<span class="token operator">+=</span>n<span class="token punctuation">;</span>                n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                n<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token function">isleapyear</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span>days2<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">:</span>days1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                m<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    m<span class="token operator">-=</span><span class="token number">12</span><span class="token punctuation">;</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%02d-%02d %s\n"</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">,</span>day<span class="token punctuation">[</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | Doing Homework again</title>
    <link href="/2023/10/17/ACM-Doing-Homework-again/"/>
    <url>/2023/10/17/ACM-Doing-Homework-again/</url>
    
    <content type="html"><![CDATA[<p>Ignatius has just come back school from the 30th ACM/ICPC. Now he hasa lot of homework to do. Every teacher gives him a deadline of handingin the homework. If Ignatius hands in the homework after the deadline,the teacher will reduce his score of the final test. And now we assumethat doing everyone homework always takes one day. So Ignatius wants youto help him to arrange the order of doing homework to minimize thereduced score. Ignatius 刚刚从第 30 届 ACM/ICPC 回到学校。现在他有很多作业要做。 每个老师都给他规定了交作业的截止日期。 如果Ignatius 在截止日期后交作业，老师将降低他期末考试的分数。现在我们假设做每个人的作业总是需要一天的时间。 所以 Ignatius希望你帮他安排一下做作业的顺序，尽量减少分数的降低。</p><h1 id="输入格式">输入格式:</h1><p>The input contains several test cases. The first line of the input isa single integer T that is the number of test cases. T test casesfollow. Each test case start with a positive integer N(1&lt;=N&lt;=1000)which indicate the number of homework.. Then 2 lines follow. The firstline contains N integers that indicate the deadlines of the subjects,and the next line contains N integers that indicate the reduced scores.输入包含多个测试用例。 输入的第一行是一个整数 T，它是测试用例的数量。 T测试用例如下。 每个测试用例都以正整数 N(1&lt;=N&lt;=1000)开头，表示作业的数量。然后是 2 行。 第一行包含 N个整数，表示科目的截止日期，下一行包含 N 个整数，表示减少的分数。</p><h1 id="输出格式">输出格式:</h1><p>For each test case, you should output the smallest total reducedscore, one line per test case.对于每个测试用例，您应该输出最小的总降低分数，每个测试用例一行。</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">333 3 310 5 131 3 16 2 371 4 6 4 2 4 33 2 1 7 6 5 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">035<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="解题思路">解题思路：</h1><p>因为要使扣的分数最小，所以需要使延时提交的作业数最少。所以要优先完成时间早的作业。所以我先进行一个排序算法，将所有的作业按照deadline从小到大排序。<figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">homework</span> <span class="token operator">*</span>homework<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">></span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">=</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> 当然，完全按照deadline也是错误的，例如： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 4 6 4 2 4 33 2 1 7 6 5 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>完成排序后变成了： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 2 3 4 4 4 63 6 4 7 5 2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>此时严格按照deadline排序输出结果是错误的。我们发现如果我们第一天不完成第一个作业，扣的分数反而会更小。所以前面的想法其实不完全正确。</p><p>我们需要的是扣的分数最小，所以我们可以优先考虑分数。</p><p>那我们先对分数进行排序，如下所示： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">homework</span> <span class="token operator">*</span>homework<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">==</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>进行如上排序后我们会获得下面的结果： <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">4</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>然后我们根据score的权重，把作业“放入”我们需要完成的日子。</p><p>当遇到分数相同的，根据日期，我在前面排列时把日期大的放在了待处理队列中相同分数的靠前位置，所以会优先处理。如果在处理时发现该日期已经被占用，那么顺应往前面未被占用的日期处移动，这样能保证该作业能一定能完成。</p><p>下面是分步结果：（前面的一列0是用于占位，可以忽略） <figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>然后剩余的未完成的作业加起来的分数就是最小的会被扣掉的分数。</p><h1 id="源码实现">源码实现：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">homework</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> deadline<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">int</span> availible<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">homework</span> <span class="token operator">*</span>homework<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token operator">&lt;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token operator">==</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>homework<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> N<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">homework</span> homework<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_date<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> reduced_score<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token operator">></span>max_date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                max_date<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>  <span class="token comment">//找最大的日期</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>            reduced_score<span class="token operator">+=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>homework<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">homework</span> schedule<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>max_date<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            schedule<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//1表示占用</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>                schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                reduced_score<span class="token operator">-=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                schedule<span class="token punctuation">[</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>deadline<span class="token punctuation">;</span>                        schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                        reduced_score<span class="token operator">-=</span>homework<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>                        schedule<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>availible<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>reduced_score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><!-- ```c#include<stdio.h>struct homework{    int deadline;    int score;    int availible;};void swap(int *a,int *b){    int t=*a;    *a=*b;    *b=t;}void sort(struct homework *homework,int N){    for(int i=0;i<N;i++){        for(int j=0;j<N-i-1;j++){            if((homework+j)->score<(homework+j+1)->score){                swap(&(homework+j)->score,&(homework+j+1)->score);                swap(&(homework+j)->deadline,&(homework+j+1)->deadline);            }else if((homework+j)->deadline<(homework+j+1)->deadline && (homework+j)->score==(homework+j+1)->score){                swap(&(homework+j)->score,&(homework+j+1)->score);                swap(&(homework+j)->deadline,&(homework+j+1)->deadline);            }        }    }}int main(){    int T;    scanf("%d",&T);    while(T--){        int N;        scanf("%d",&N);        struct homework homework[1001];        int max_date=0;        int reduced_score=0;        for(int i=0;i<N;i++){            scanf("%d",&homework[i].deadline);            if(homework[i].deadline>max_date){                max_date=homework[i].deadline;  //找最大的日期            }        }        for(int i=0;i<N;i++){            scanf("%d",&homework[i].score);            reduced_score+=homework[i].score;        }        //printf("%d\n",reduced_score); //debug        sort(homework,N);                // debug        // for(int i=0;i<N;i++){        //     printf(" %d ",homework[i].deadline);        // }        // printf("\n");        // for(int i=0;i<N;i++){        //     printf(" %d ",homework[i].score);        // }        // printf("\n");        struct homework schedule[1001];        for(int i=0;i<=max_date;i++){            schedule[i].availible=0; //1表示占用        }        //int not_finished=max_date;        for(int i=0;i<N;i++){            if(schedule[homework[i].deadline].availible==0){                schedule[homework[i].deadline].deadline=homework[i].deadline;                schedule[homework[i].deadline].score=homework[i].score;                reduced_score-=homework[i].score;                schedule[homework[i].deadline].availible=1;            }else{                for(int j=homework[i].deadline;j>=1;j--){                    if(schedule[j].availible==0){                        schedule[j].deadline=homework[i].deadline;                        schedule[j].score=homework[i].score;                        reduced_score-=homework[i].score;                        schedule[j].availible=1;                        break;                    }                }            }            // printf("*%d*%d*\n",i,reduced_score);            // for(int i=0;i<max_date;i++){            //     printf("%d ",schedule[i].deadline);            // }            // printf("\n");            // for(int i=0;i<max_date;i++){            //     printf("%d ",schedule[i].score);            // }            // printf("\n");            // for(int i=0;i<max_date;i++){            //     printf("%d ",schedule[i].availible);            // }            // printf("\n");        }        printf("%d\n",reduced_score);    }    return 0;}// 1 4 6 4 2 4 3// 3 2 1 7 6 5 4// 1 2 3 4 4 4 6// 3 6 4 7 5 2 1// 4 2 4 3 1 4 6// 7 6 5 4 3 2 1// 2 3 4 4 6 1 4// 6 4 7 5 1 3 2``` -->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM | FatMouse&#39; Trade</title>
    <link href="/2023/10/17/ACM-FatMouse-Trade/"/>
    <url>/2023/10/17/ACM-FatMouse-Trade/</url>
    
    <content type="html"><![CDATA[<p>FatMouse prepared M pounds of cat food, ready to trade with the catsguarding the warehouse containing his favorite food, JavaBean. Thewarehouse has N rooms. The i-th room contains J[i] pounds of JavaBeansand requires F[i] pounds of cat food. FatMouse does not have to tradefor all the JavaBeans in the room, instead, he may get J[i]* a% poundsof JavaBeans if he pays F[i]* a% pounds of cat food. Here a is a realnumber. Now he is assigning this homework to you: tell him the maximumamount of JavaBeans he can obtain.</p><h1 id="输入格式">输入格式:</h1><p>The input consists of multiple test cases. Each test case begins witha line containing two non-negative integers M and N. Then N linesfollow, each contains two non-negative integers J[i] and F[i]respectively. The last test case is followed by two -1's. All integersare not greater than 1000.</p><h1 id="输出格式">输出格式:</h1><p>For each test case, print in a single line a real number accurate upto 3 decimal places, which is the maximum amount of JavaBeans thatFatMouse can obtain.</p><h1 id="输入样例">输入样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">5 37 24 35 220 325 1824 1515 10-1 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="输出样例">输出样例:</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">13.33331.500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="错误代码示例">错误代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> J<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//回报</span>    <span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//付出</span>    <span class="token keyword">double</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> N<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>J<span class="token operator">+</span>i<span class="token punctuation">,</span>F<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>J<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> max<span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token punctuation">;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//找到回报率最大的位置</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    max<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cur<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            s<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>M<span class="token operator">>=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                M<span class="token operator">-=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>M<span class="token operator">/</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                M<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//printf("*%d*%lf*\n",cur,ans);  DEBUG</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="正确代码示例">正确代码示例：</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> J<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//回报</span>    <span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//付出</span>    <span class="token keyword">double</span> s<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> N<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>J<span class="token operator">+</span>i<span class="token punctuation">,</span>F<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>J<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> max<span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token punctuation">;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> items<span class="token operator">=</span>N<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>M<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> N<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//找到回报率最大的位置</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    max<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cur<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            s<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>M<span class="token operator">>=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                M<span class="token operator">-=</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>                items<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span>J<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>M<span class="token operator">/</span>F<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                M<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//printf("*%d*%lf*\n",cur,ans);  DEBUG</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/17/hello-world/"/>
    <url>/2023/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
